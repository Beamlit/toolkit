// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/beamlit/toolkit/cli/register"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Account defines model for Account.
type Account struct {
	// Address Billing address
	Address *map[string]interface{} `json:"address,omitempty"`

	// Admins Admins
	Admins *[]interface{} `json:"admins,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// Currency Currency
	Currency *string `json:"currency,omitempty"`

	// DisplayName Model display name
	DisplayName *string `json:"displayName,omitempty"`

	// Labels Labels
	Labels   *MetadataLabels `json:"labels,omitempty"`
	Metadata *interface{}    `json:"metadata,omitempty"`

	// Name Model name
	Name *string `json:"name,omitempty"`

	// Owner Owner
	Owner *string      `json:"owner,omitempty"`
	Spec  *interface{} `json:"spec,omitempty"`

	// Status Status
	Status *string `json:"status,omitempty"`

	// TaxId Tax ID
	TaxId *string `json:"tax_id,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// AccountSpec AccountSpec
type AccountSpec struct {
	// Address Billing address
	Address *map[string]interface{} `json:"address,omitempty"`

	// Admins Admins
	Admins *[]interface{} `json:"admins,omitempty"`

	// Currency Currency
	Currency *string `json:"currency,omitempty"`

	// Owner Owner
	Owner *string `json:"owner,omitempty"`

	// Status Status
	Status *string `json:"status,omitempty"`

	// TaxId Tax ID
	TaxId *string `json:"tax_id,omitempty"`
}

// Agent Agent
type Agent struct {
	// Events Core events
	Events *CoreEvents `json:"events,omitempty"`

	// Metadata Environment metadata
	Metadata *EnvironmentMetadata `json:"metadata,omitempty"`

	// Spec Agent specification
	Spec *AgentSpec `json:"spec,omitempty"`

	// Status Agent status
	Status *string `json:"status,omitempty"`
}

// AgentChain Agent chain configuration
type AgentChain struct {
	// Description Description of the agent in case you want to override the default one
	Description *string `json:"description,omitempty"`

	// Enabled Whether the agent chain is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Name The name of the agent to chain to
	Name *string `json:"name,omitempty"`
}

// AgentChains Agent chain
type AgentChains = []AgentChain

// AgentHistory defines model for AgentHistory.
type AgentHistory struct {
	// Agent Agent name
	Agent *string `json:"agent,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// End End time
	End *string `json:"end,omitempty"`

	// Environment Environment name
	Environment *string `json:"environment,omitempty"`

	// Events Events
	Events *[]AgentHistoryEvent `json:"events,omitempty"`

	// RequestId Request ID
	RequestId *string `json:"request_id,omitempty"`

	// Start Start time
	Start *string `json:"start,omitempty"`

	// Status Status, eg: running, success, failed
	Status *string `json:"status,omitempty"`

	// Took Number of milliseconds it took to complete the event
	Took *int `json:"took,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// Workspace The workspace the agent deployment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// AgentHistoryEvent Agent deployment history event
type AgentHistoryEvent struct {
	// End End time
	End *string `json:"end,omitempty"`

	// Error Error message
	Error *string `json:"error,omitempty"`

	// Name Name of the function or agent
	Name *string `json:"name,omitempty"`

	// Parameters Parameters
	Parameters *string `json:"parameters,omitempty"`

	// Start Start time
	Start *string `json:"start,omitempty"`

	// Status Status, eg: running, success, failed
	Status *string `json:"status,omitempty"`

	// SubFunction Function used in kit if a kit was used
	SubFunction *string `json:"subFunction,omitempty"`

	// Took Number of milliseconds it took to complete the event
	Took *int `json:"took,omitempty"`

	// Type Type, one of function or agent
	Type *string `json:"type,omitempty"`
}

// AgentRelease Agent release, used to deploy a agent from one environment to another
type AgentRelease struct {
	// From Origin environment from which the agent is released
	From *string `json:"from,omitempty"`

	// To Destination environment to which the agent is released
	To *string `json:"to,omitempty"`
}

// AgentSpec defines model for AgentSpec.
type AgentSpec struct {
	// AgentChain Agent chain
	AgentChain *AgentChains `json:"agentChain,omitempty"`

	// Configurations Optional configurations for the object
	Configurations *struct {
		// Key Configuration, this is a key value storage. In your object you can retrieve the value with config[key]
		Key *SpecConfiguration `json:"key,omitempty"`
	} `json:"configurations,omitempty"`

	// Description Agent description
	Description *string `json:"description,omitempty"`

	// Enabled Enable or disable the agent
	Enabled *bool `json:"enabled,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors                *Flavors                    `json:"flavors,omitempty"`
	Functions              *FunctionsList              `json:"functions,omitempty"`
	IntegrationConnections *IntegrationConnectionsList `json:"integrationConnections,omitempty"`

	// Model Model name
	Model *string `json:"model,omitempty"`

	// PodTemplate Pod template specification
	PodTemplate *PodTemplateSpec `json:"podTemplate,omitempty"`
	Policies    *PoliciesList    `json:"policies,omitempty"`

	// PrivateClusters Private cluster where the model deployment is deployed
	PrivateClusters *ModelPrivateCluster `json:"privateClusters,omitempty"`

	// Repository Repository
	Repository *Repository `json:"repository,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`

	// Sandbox Sandbox mode
	Sandbox *bool `json:"sandbox,omitempty"`

	// ServerlessConfig Configuration for a serverless deployment
	ServerlessConfig *ServerlessConfig `json:"serverlessConfig,omitempty"`

	// StoreId Store id
	StoreId *string `json:"storeId,omitempty"`
}

// ApiKey defines model for ApiKey.
type ApiKey struct {
	// ApiKey Api key
	ApiKey *string `json:"apiKey,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// ExpiresIn Duration until expiration (in seconds)
	ExpiresIn *string `json:"expires_in,omitempty"`

	// Id Api key id, to retrieve it from the API
	Id *string `json:"id,omitempty"`

	// Name Name for the API key
	Name *string `json:"name,omitempty"`

	// Sub User subject identifier
	Sub *string `json:"sub,omitempty"`

	// SubType Subject type
	SubType *string `json:"sub_type,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// ArrayMetric Array of metrics
type ArrayMetric = []Metric

// Configuration Configuration
type Configuration struct {
	// Continents Continents
	Continents *[]interface{} `json:"continents,omitempty"`

	// Countries Countries
	Countries *[]interface{} `json:"countries,omitempty"`

	// PrivateLocations Private locations managed with beamlit operator
	PrivateLocations *[]interface{} `json:"privateLocations,omitempty"`
}

// CoreEvent Core event
type CoreEvent struct {
	// Message Event message
	Message *string `json:"message,omitempty"`

	// Status Event status
	Status *string `json:"status,omitempty"`

	// Time Event time
	Time *string `json:"time,omitempty"`

	// Type Event type
	Type *string `json:"type,omitempty"`
}

// CoreEvents Core events
type CoreEvents = []CoreEvent

// CoreSpec Core specification
type CoreSpec struct {
	// Configurations Optional configurations for the object
	Configurations *struct {
		// Key Configuration, this is a key value storage. In your object you can retrieve the value with config[key]
		Key *SpecConfiguration `json:"key,omitempty"`
	} `json:"configurations,omitempty"`

	// Enabled Enable or disable the agent
	Enabled *bool `json:"enabled,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors                *Flavors                    `json:"flavors,omitempty"`
	IntegrationConnections *IntegrationConnectionsList `json:"integrationConnections,omitempty"`

	// PodTemplate Pod template specification
	PodTemplate *PodTemplateSpec `json:"podTemplate,omitempty"`
	Policies    *PoliciesList    `json:"policies,omitempty"`

	// PrivateClusters Private cluster where the model deployment is deployed
	PrivateClusters *ModelPrivateCluster `json:"privateClusters,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`

	// Sandbox Sandbox mode
	Sandbox *bool `json:"sandbox,omitempty"`

	// ServerlessConfig Configuration for a serverless deployment
	ServerlessConfig *ServerlessConfig `json:"serverlessConfig,omitempty"`
}

// Environment Environment on which deployments will be made (e.g. development, production), enforcing multiple policies at once.
type Environment struct {
	// Metadata Metadata
	Metadata *Metadata `json:"metadata,omitempty"`

	// Spec Environment specification
	Spec *EnvironmentSpec `json:"spec,omitempty"`
}

// EnvironmentMetadata defines model for EnvironmentMetadata.
type EnvironmentMetadata struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// DisplayName Model display name
	DisplayName *string `json:"displayName,omitempty"`

	// Environment Environment name
	Environment *string `json:"environment,omitempty"`

	// Labels Labels
	Labels *MetadataLabels `json:"labels,omitempty"`

	// Name Model name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// EnvironmentMetrics Metrics for the environment
type EnvironmentMetrics struct {
	// InferenceGlobal Array of metrics
	InferenceGlobal *ArrayMetric `json:"inferenceGlobal,omitempty"`
}

// EnvironmentSpec Environment specification
type EnvironmentSpec struct {
	Policies *PoliciesList `json:"policies,omitempty"`
}

// Flavor A type of hardware available for deployments
type Flavor struct {
	// Name Flavor name (e.g. t4)
	Name *string `json:"name,omitempty"`

	// Type Flavor type (e.g. cpu, gpu)
	Type *string `json:"type,omitempty"`
}

// Flavors Types of hardware available for deployments
type Flavors = []Flavor

// Function Function
type Function struct {
	// Events Core events
	Events *CoreEvents `json:"events,omitempty"`

	// Metadata Environment metadata
	Metadata *EnvironmentMetadata `json:"metadata,omitempty"`

	// Spec Function specification
	Spec *FunctionSpec `json:"spec,omitempty"`

	// Status Function status
	Status *string `json:"status,omitempty"`
}

// FunctionKit Function kit
type FunctionKit struct {
	// Description Description of the function kit, very important for the agent to work with your kit
	Description *string `json:"description,omitempty"`

	// Name The kit name, very important for the agent to work with your kit
	Name *string `json:"name,omitempty"`

	// Parameters Kit parameters, for your kit to be callable with an Agent
	Parameters *[]StoreFunctionParameter `json:"parameters,omitempty"`
}

// FunctionRelease Function release, used to deploy a function from one environment to another
type FunctionRelease struct {
	// From Origin environment from which the function is released
	From *string `json:"from,omitempty"`

	// To Destination environment to which the function is released
	To *string `json:"to,omitempty"`
}

// FunctionSpec defines model for FunctionSpec.
type FunctionSpec struct {
	// Configurations Optional configurations for the object
	Configurations *struct {
		// Key Configuration, this is a key value storage. In your object you can retrieve the value with config[key]
		Key *SpecConfiguration `json:"key,omitempty"`
	} `json:"configurations,omitempty"`

	// Description Function description, very important for the agent function to work with an LLM
	Description *string `json:"description,omitempty"`

	// Enabled Enable or disable the agent
	Enabled *bool `json:"enabled,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors                *Flavors                    `json:"flavors,omitempty"`
	IntegrationConnections *IntegrationConnectionsList `json:"integrationConnections,omitempty"`

	// Kit The kit of the function deployment
	Kit *[]FunctionKit `json:"kit,omitempty"`

	// Parameters Function parameters, for your function to be callable with Agent
	Parameters *[]StoreFunctionParameter `json:"parameters,omitempty"`

	// PodTemplate Pod template specification
	PodTemplate *PodTemplateSpec `json:"podTemplate,omitempty"`
	Policies    *PoliciesList    `json:"policies,omitempty"`

	// PrivateClusters Private cluster where the model deployment is deployed
	PrivateClusters *ModelPrivateCluster `json:"privateClusters,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`

	// Sandbox Sandbox mode
	Sandbox *bool `json:"sandbox,omitempty"`

	// ServerlessConfig Configuration for a serverless deployment
	ServerlessConfig *ServerlessConfig `json:"serverlessConfig,omitempty"`

	// StoreId Store id
	StoreId *string `json:"storeId,omitempty"`
}

// FunctionsList defines model for FunctionsList.
type FunctionsList = []string

// HistogramBucket Histogram bucket
type HistogramBucket struct {
	// Count Count
	Count *int `json:"count,omitempty"`

	// End End
	End *float32 `json:"end,omitempty"`

	// Start Start
	Start *float32 `json:"start,omitempty"`
}

// HistogramStats Histogram stats
type HistogramStats struct {
	// Average Average request duration
	Average *float32 `json:"average,omitempty"`

	// P50 P50 request duration
	P50 *float32 `json:"p50,omitempty"`

	// P90 P90 request duration
	P90 *float32 `json:"p90,omitempty"`

	// P99 P99 request duration
	P99 *float32 `json:"p99,omitempty"`
}

// IntegrationConnection Integration Connection
type IntegrationConnection struct {
	// Metadata Metadata
	Metadata *Metadata `json:"metadata,omitempty"`

	// Spec Integration connection specification
	Spec *IntegrationConnectionSpec `json:"spec,omitempty"`
}

// IntegrationConnectionSpec Integration connection specification
type IntegrationConnectionSpec struct {
	// Config Additional configuration for the integration
	Config *map[string]interface{} `json:"config,omitempty"`

	// Integration Integration type
	Integration *string `json:"integration,omitempty"`

	// Sandbox Sandbox mode
	Sandbox *bool `json:"sandbox,omitempty"`

	// Secret Integration secret
	Secret *map[string]interface{} `json:"secret,omitempty"`
}

// IntegrationConnectionsList defines model for IntegrationConnectionsList.
type IntegrationConnectionsList = []string

// LatencyMetric Latency metrics
type LatencyMetric struct {
	// GlobalHistogram Histogram bucket
	GlobalHistogram *HistogramBucket `json:"globalHistogram,omitempty"`

	// GlobalStats Histogram stats
	GlobalStats *HistogramStats `json:"globalStats,omitempty"`

	// HistogramPerCode Histogram bucket
	HistogramPerCode *HistogramBucket `json:"histogramPerCode,omitempty"`

	// StatsPerCode Histogram stats
	StatsPerCode *HistogramStats `json:"statsPerCode,omitempty"`
}

// LocationResponse Location availability for policies
type LocationResponse struct {
	// Continent Continent of the location
	Continent *string `json:"continent,omitempty"`

	// Country Country of the location
	Country *string `json:"country,omitempty"`

	// Flavors Hardware flavors available in the location
	Flavors *[]Flavor `json:"flavors,omitempty"`

	// Location Name of the location
	Location *string `json:"location,omitempty"`

	// Status Status of the location
	Status *string `json:"status,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// DisplayName Model display name
	DisplayName *string `json:"displayName,omitempty"`

	// Labels Labels
	Labels *MetadataLabels `json:"labels,omitempty"`

	// Name Model name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// MetadataLabels Labels
type MetadataLabels map[string]string

// Metric Metric
type Metric struct {
	// Rate Metric value
	Rate *int `json:"rate,omitempty"`

	// RequestTotal Metric value
	RequestTotal *int `json:"requestTotal,omitempty"`

	// Timestamp Metric timestamp
	Timestamp *string `json:"timestamp,omitempty"`
}

// Metrics Metrics for resources
type Metrics struct {
	// Agents Metrics for agents
	Agents *interface{} `json:"agents,omitempty"`

	// Functions Metrics for functions
	Functions *interface{} `json:"functions,omitempty"`

	// InferenceGlobal Historical requests for all resources globally
	InferenceGlobal *[]interface{} `json:"inferenceGlobal,omitempty"`

	// Models Metrics for models
	Models *map[string]interface{} `json:"models,omitempty"`

	// RequestTotal Number of requests for all resources globally
	RequestTotal *float32 `json:"requestTotal,omitempty"`

	// RequestTotalPerCode Number of requests for all resources globally per code
	RequestTotalPerCode *map[string]interface{} `json:"requestTotalPerCode,omitempty"`

	// Rps Number of requests per second for all resources globally
	Rps *float32 `json:"rps,omitempty"`

	// RpsPerCode Number of requests per second for all resources globally per code
	RpsPerCode *map[string]interface{} `json:"rpsPerCode,omitempty"`
}

// Model Logical object representing a model, that can be instantiated in multiple environments as model deployments
type Model struct {
	// Events Core events
	Events *CoreEvents `json:"events,omitempty"`

	// Metadata Environment metadata
	Metadata *EnvironmentMetadata `json:"metadata,omitempty"`

	// Spec Model specification
	Spec *ModelSpec `json:"spec,omitempty"`

	// Status Model status
	Status *string `json:"status,omitempty"`
}

// ModelPrivateCluster Private cluster where the model deployment is deployed
type ModelPrivateCluster struct {
	// BaseUrl The base url of the model in the private cluster
	BaseUrl *string `json:"baseUrl,omitempty"`

	// Enabled If true, the private cluster is available
	Enabled *bool `json:"enabled,omitempty"`

	// Name The name of the private cluster
	Name *string `json:"name,omitempty"`
}

// ModelRelease Model release, used to deploy a model from one environment to another
type ModelRelease struct {
	// From Origin environment from which the model is released
	From *string `json:"from,omitempty"`

	// To Destination environment to which the model is released
	To *string `json:"to,omitempty"`
}

// ModelSpec defines model for ModelSpec.
type ModelSpec struct {
	// Configurations Optional configurations for the object
	Configurations *struct {
		// Key Configuration, this is a key value storage. In your object you can retrieve the value with config[key]
		Key *SpecConfiguration `json:"key,omitempty"`
	} `json:"configurations,omitempty"`

	// Enabled Enable or disable the agent
	Enabled *bool `json:"enabled,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors                *Flavors                    `json:"flavors,omitempty"`
	IntegrationConnections *IntegrationConnectionsList `json:"integrationConnections,omitempty"`

	// PodTemplate Pod template specification
	PodTemplate *PodTemplateSpec `json:"podTemplate,omitempty"`
	Policies    *PoliciesList    `json:"policies,omitempty"`

	// PrivateClusters Private cluster where the model deployment is deployed
	PrivateClusters *ModelPrivateCluster `json:"privateClusters,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`

	// Sandbox Sandbox mode
	Sandbox *bool `json:"sandbox,omitempty"`

	// ServerlessConfig Configuration for a serverless deployment
	ServerlessConfig *ServerlessConfig `json:"serverlessConfig,omitempty"`
}

// OwnerFields Owner fields for Persistance
type OwnerFields struct {
	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// PendingInvitation defines model for PendingInvitation.
type PendingInvitation struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// Email User email
	Email *string `json:"email,omitempty"`

	// InvitedBy User sub
	InvitedBy *string `json:"invitedBy,omitempty"`

	// Role ACL role
	Role *string `json:"role,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// PendingInvitationAccept Pending invitation accept
type PendingInvitationAccept struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// Workspace Workspace
	Workspace *Workspace `json:"workspace,omitempty"`
}

// PendingInvitationRender Pending invitation in workspace
type PendingInvitationRender struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// InvitedAt Invitation date
	InvitedAt *string `json:"invitedAt,omitempty"`

	// InvitedBy Invited by
	InvitedBy *PendingInvitationRenderInvitedBy `json:"invitedBy,omitempty"`

	// Role ACL role
	Role *string `json:"role,omitempty"`

	// Workspace Workspace
	Workspace *PendingInvitationRenderWorkspace `json:"workspace,omitempty"`

	// WorkspaceDetails Workspace details
	WorkspaceDetails *PendingInvitationWorkspaceDetails `json:"workspaceDetails,omitempty"`
}

// PendingInvitationRenderInvitedBy Invited by
type PendingInvitationRenderInvitedBy struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// FamilyName User family name
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName User given name
	GivenName *string `json:"given_name,omitempty"`

	// Sub User sub
	Sub *string `json:"sub,omitempty"`
}

// PendingInvitationRenderWorkspace Workspace
type PendingInvitationRenderWorkspace struct {
	// DisplayName Workspace display name
	DisplayName *string `json:"displayName,omitempty"`

	// Name Workspace name
	Name *string `json:"name,omitempty"`
}

// PendingInvitationWorkspaceDetails Workspace details
type PendingInvitationWorkspaceDetails struct {
	// Emails List of user emails in the workspace
	Emails *[]interface{} `json:"emails,omitempty"`

	// UserNumber Number of users in the workspace
	UserNumber *float32 `json:"user_number,omitempty"`
}

// PodTemplateSpec Pod template specification
type PodTemplateSpec = map[string]interface{}

// PoliciesList defines model for PoliciesList.
type PoliciesList = []string

// Policy Rule that controls how a deployment is made and served (e.g. location restrictions)
type Policy struct {
	// Metadata Metadata
	Metadata *Metadata `json:"metadata,omitempty"`

	// Spec Policy specification
	Spec *PolicySpec `json:"spec,omitempty"`
}

// PolicyLocation Policy location
type PolicyLocation struct {
	// Name Policy location name
	Name *string `json:"name,omitempty"`

	// Type Policy location type
	Type *string `json:"type,omitempty"`
}

// PolicyLocations PolicyLocations is a local type that wraps a slice of Location
type PolicyLocations = []PolicyLocation

// PolicyMaxTokens PolicyMaxTokens is a local type that wraps a slice of PolicyMaxTokens
type PolicyMaxTokens struct {
	// Granularity Granularity
	Granularity *string `json:"granularity,omitempty"`

	// Input Input
	Input *int `json:"input,omitempty"`

	// Output Output
	Output *int `json:"output,omitempty"`

	// RatioInputOverOutput RatioInputOverOutput
	RatioInputOverOutput *int `json:"ratioInputOverOutput,omitempty"`

	// Step Step
	Step *int `json:"step,omitempty"`

	// Total Total
	Total *int `json:"total,omitempty"`
}

// PolicyResourceType PolicyResourceType is a type of resource, e.g. model, function, etc.
type PolicyResourceType = string

// PolicyResourceTypes PolicyResourceTypes is a local type that wraps a slice of PolicyResourceType
type PolicyResourceTypes = []PolicyResourceType

// PolicySpec Policy specification
type PolicySpec struct {
	// Flavors Types of hardware available for deployments
	Flavors *Flavors `json:"flavors,omitempty"`

	// Locations PolicyLocations is a local type that wraps a slice of Location
	Locations *PolicyLocations `json:"locations,omitempty"`

	// MaxTokens PolicyMaxTokens is a local type that wraps a slice of PolicyMaxTokens
	MaxTokens *PolicyMaxTokens `json:"maxTokens,omitempty"`

	// ResourceTypes PolicyResourceTypes is a local type that wraps a slice of PolicyResourceType
	ResourceTypes *PolicyResourceTypes `json:"resourceTypes,omitempty"`

	// Sandbox Sandbox mode
	Sandbox *bool `json:"sandbox,omitempty"`

	// Type Policy type, can be location or flavor
	Type *string `json:"type,omitempty"`
}

// PrivateCluster defines model for PrivateCluster.
type PrivateCluster struct {
	// Continent The private cluster's continent, used to determine the closest private cluster to serve inference requests based on the user's location
	Continent *string `json:"continent,omitempty"`

	// Country The country where the private cluster is located, used to determine the closest private cluster to serve inference requests based on the user's location
	Country *string `json:"country,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// DisplayName The private cluster's display Name
	DisplayName *string `json:"displayName,omitempty"`

	// Healthy Whether the private cluster is healthy or not, used to determine if the private cluster is ready to run inference
	Healthy *bool `json:"healthy,omitempty"`

	// LastHealthCheckTime The private cluster's unique name
	LastHealthCheckTime *string `json:"lastHealthCheckTime,omitempty"`

	// Latitude The private cluster's latitude, used to determine the closest private cluster to serve inference requests based on the user's location
	Latitude *string `json:"latitude,omitempty"`

	// Longitude The private cluster's longitude, used to determine the closest private cluster to serve inference requests based on the user's location
	Longitude *string `json:"longitude,omitempty"`

	// Name The name of the private cluster, it must be unique
	Name *string `json:"name,omitempty"`

	// OwnedBy The service account (operator) that owns the cluster
	OwnedBy *string `json:"ownedBy,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`

	// Workspace The workspace the private cluster belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// Quotas Workspace quotas
type Quotas = interface{}

// Repository Repository
type Repository struct {
	// Type Repository type
	Type *string `json:"type,omitempty"`

	// Url Repository URL
	Url *string `json:"url,omitempty"`
}

// RequestDurationOverTimeMetric Request duration over time metric
type RequestDurationOverTimeMetric struct {
	// Average Average request duration
	Average *float32 `json:"average,omitempty"`

	// P50 P50 request duration
	P50 *float32 `json:"p50,omitempty"`

	// P90 P90 request duration
	P90 *float32 `json:"p90,omitempty"`

	// P99 P99 request duration
	P99 *float32 `json:"p99,omitempty"`

	// Timestamp Timestamp
	Timestamp *string `json:"timestamp,omitempty"`
}

// RequestDurationOverTimeMetrics Request duration over time metrics
type RequestDurationOverTimeMetrics struct {
	// RequestDurationOverTime Request duration over time metric
	RequestDurationOverTime *RequestDurationOverTimeMetric `json:"requestDurationOverTime,omitempty"`
}

// RequestTotalByOriginMetric Request total by origin metric
type RequestTotalByOriginMetric struct {
	// RequestTotalByOrigin Request total by origin
	RequestTotalByOrigin *map[string]interface{} `json:"requestTotalByOrigin,omitempty"`

	// RequestTotalByOriginAndCode Request total by origin and code
	RequestTotalByOriginAndCode *map[string]interface{} `json:"requestTotalByOriginAndCode,omitempty"`
}

// ResourceEnvironmentMetrics Metrics for a single resource deployment (eg. model deployment, function deployment)
type ResourceEnvironmentMetrics struct {
	// InferenceGlobal Array of metrics
	InferenceGlobal *ArrayMetric `json:"inferenceGlobal,omitempty"`

	// LastNRequests Array of metrics
	LastNRequests *ArrayMetric `json:"lastNRequests,omitempty"`

	// Latency Latency metrics
	Latency *LatencyMetric `json:"latency,omitempty"`

	// RequestDurationOverTime Request duration over time metrics
	RequestDurationOverTime *RequestDurationOverTimeMetrics `json:"requestDurationOverTime,omitempty"`

	// RequestTotal Number of requests for the resource globally
	RequestTotal *float32 `json:"requestTotal,omitempty"`

	// RequestTotalByOrigin Request total by origin metric
	RequestTotalByOrigin *RequestTotalByOriginMetric `json:"requestTotalByOrigin,omitempty"`

	// RequestTotalPerCode Number of requests for the resource globally per code
	RequestTotalPerCode *map[string]interface{} `json:"requestTotalPerCode,omitempty"`

	// Rps Number of requests per second for the resource globally
	Rps *float32 `json:"rps,omitempty"`

	// RpsPerCode Number of requests per second for the resource globally per code
	RpsPerCode *map[string]interface{} `json:"rpsPerCode,omitempty"`

	// TokenRate Token rate metrics
	TokenRate *TokenRateMetrics `json:"tokenRate,omitempty"`

	// TokenTotal Token total metric
	TokenTotal *TokenTotalMetric `json:"tokenTotal,omitempty"`
}

// ResourceLog Log for a resource deployment (eg. model deployment, function deployment)
type ResourceLog struct {
	// Message Content of the log
	Message *string `json:"message,omitempty"`

	// Severity Severity of the log
	Severity *int `json:"severity,omitempty"`

	// Timestamp The timestamp of the log
	Timestamp *string `json:"timestamp,omitempty"`
}

// Runtime Set of configurations for a deployment
type Runtime struct {
	// Args The arguments to pass to the deployment runtime
	Args *[]interface{} `json:"args,omitempty"`

	// Command The command to run the deployment
	Command *[]interface{} `json:"command,omitempty"`

	// Envs The environment variables to set in the deployment. Should be a list of Kubernetes EnvVar types
	Envs *[]interface{} `json:"envs,omitempty"`

	// Image The Docker image for the deployment
	Image *string `json:"image,omitempty"`

	// MetricPort The port to serve the metrics on
	MetricPort *int `json:"metricPort,omitempty"`

	// Model The slug name of the origin model. Only used if the deployment is a Deployment
	Model *string `json:"model,omitempty"`

	// ReadinessProbe The readiness probe. Should be a Kubernetes Probe type
	ReadinessProbe *map[string]interface{} `json:"readinessProbe,omitempty"`

	// Resources The resources for the deployment. Should be a Kubernetes ResourceRequirements type
	Resources *map[string]interface{} `json:"resources,omitempty"`

	// ServingPort The port to serve the model on
	ServingPort *int `json:"servingPort,omitempty"`

	// Type The type of origin for the deployment
	Type *string `json:"type,omitempty"`
}

// ServerlessConfig Configuration for a serverless deployment
type ServerlessConfig struct {
	// LastPodRetentionPeriod The minimum amount of time that the last replica will remain active AFTER a scale-to-zero decision is made
	LastPodRetentionPeriod *string `json:"lastPodRetentionPeriod,omitempty"`

	// MaxNumReplicas The maximum number of replicas for the deployment.
	MaxNumReplicas *int `json:"maxNumReplicas,omitempty"`

	// Metric Metric watched to make scaling decisions. Can be "cpu" or "memory" or "rps" or "concurrency"
	Metric *string `json:"metric,omitempty"`

	// MinNumReplicas The minimum number of replicas for the deployment. Can be 0 or 1 (in which case the deployment is always running in at least one location).
	MinNumReplicas *int `json:"minNumReplicas,omitempty"`

	// ScaleDownDelay The time window which must pass at reduced concurrency before a scale-down decision is applied. This can be useful, for example, to keep containers around for a configurable duration to avoid a cold start penalty if new requests come in.
	ScaleDownDelay *string `json:"scaleDownDelay,omitempty"`

	// ScaleUpMinimum The minimum number of replicas that will be created when the deployment scales up from zero.
	ScaleUpMinimum *int `json:"scaleUpMinimum,omitempty"`

	// StableWindow The sliding time window over which metrics are averaged to provide the input for scaling decisions
	StableWindow *string `json:"stableWindow,omitempty"`

	// Target Target value for the watched metric
	Target *string `json:"target,omitempty"`
}

// SpecConfiguration Configuration, this is a key value storage. In your object you can retrieve the value with config[key]
type SpecConfiguration struct {
	// Secret ACconfiguration secret
	Secret *bool `json:"secret,omitempty"`

	// Value Configuration value
	Value *string `json:"value,omitempty"`
}

// StoreAgent defines model for StoreAgent.
type StoreAgent struct {
	// Configuration Store agent configuration
	Configuration *[]StoreConfiguration `json:"configuration,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Store agent description
	Description *string `json:"description,omitempty"`

	// DisplayName Store agent display name
	DisplayName *string `json:"displayName,omitempty"`

	// Image Store agent image
	Image *string `json:"image,omitempty"`

	// Labels Store agent labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Store agent name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// StoreConfiguration Store configuration for resources (eg: agent, function, etc)
type StoreConfiguration struct {
	// AvailableModels Available models for the configuration
	AvailableModels *[]string `json:"availableModels,omitempty"`

	// Description Store configuration description
	Description *string `json:"description,omitempty"`

	// DisplayName Store configuration display name
	DisplayName *string `json:"displayName,omitempty"`

	// If Conditional rendering for the configuration, example: provider === 'openai'
	If *string `json:"if,omitempty"`

	// Name Store configuration name
	Name    *string                     `json:"name,omitempty"`
	Options *[]StoreConfigurationOption `json:"options,omitempty"`

	// Required Store configuration required
	Required *bool `json:"required,omitempty"`

	// Secret Store configuration secret
	Secret *bool `json:"secret,omitempty"`

	// Type Store configuration type
	Type *string `json:"type,omitempty"`
}

// StoreConfigurationOption Store configuration options for a select type configuration
type StoreConfigurationOption struct {
	// If Conditional rendering for the configuration option, example: provider === 'openai'
	If *string `json:"if,omitempty"`

	// Label Store configuration option label
	Label *string `json:"label,omitempty"`

	// Value Store configuration option value
	Value *string `json:"value,omitempty"`
}

// StoreFunction defines model for StoreFunction.
type StoreFunction struct {
	// Configuration Store function configuration
	Configuration *[]StoreConfiguration `json:"configuration,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Store function description
	Description *string `json:"description,omitempty"`

	// DisplayName Store function display name
	DisplayName *string `json:"displayName,omitempty"`

	// Image Store function image
	Image *string `json:"image,omitempty"`

	// Kit Store function kit
	Kit *[]StoreFunctionKit `json:"kit,omitempty"`

	// Labels Store function labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Store function name
	Name *string `json:"name,omitempty"`

	// Parameters Store function parameters
	Parameters *[]StoreFunctionParameter `json:"parameters,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// StoreFunctionKit Store function kit
type StoreFunctionKit struct {
	// Description Description of the function kit, very important for the agent to work with your kit
	Description *string `json:"description,omitempty"`

	// Name The kit name, very important for the agent to work with your kit
	Name *string `json:"name,omitempty"`

	// Parameters Kit parameters, for your kit to be callable with an Agent
	Parameters *[]StoreFunctionParameter `json:"parameters,omitempty"`
}

// StoreFunctionParameter Store function parameter
type StoreFunctionParameter struct {
	// Description Store function parameter description
	Description *string `json:"description,omitempty"`

	// Name Store function parameter name
	Name *string `json:"name,omitempty"`

	// Required Store function parameter required
	Required *bool `json:"required,omitempty"`

	// Type Store function parameter type
	Type *string `json:"type,omitempty"`
}

// TimeFields Time fields for Persistance
type TimeFields struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// TokenRateMetric Token rate metric
type TokenRateMetric struct {
	// Model Model ID
	Model *string `json:"model,omitempty"`

	// Timestamp Timestamp
	Timestamp *string `json:"timestamp,omitempty"`

	// TokenTotal Total tokens
	TokenTotal *float32 `json:"tokenTotal,omitempty"`

	// Trend Trend
	Trend *float32 `json:"trend,omitempty"`
}

// TokenRateMetrics Token rate metrics
type TokenRateMetrics struct {
	// TokenRate Token rate metric
	TokenRate *TokenRateMetric `json:"tokenRate,omitempty"`

	// TokenRateInput Token rate metric
	TokenRateInput *TokenRateMetric `json:"tokenRateInput,omitempty"`

	// TokenRateOutput Token rate metric
	TokenRateOutput *TokenRateMetric `json:"tokenRateOutput,omitempty"`
}

// TokenTotalMetric Token total metric
type TokenTotalMetric struct {
	// AverageTokenInputPerRequest Average input token per request
	AverageTokenInputPerRequest *float32 `json:"averageTokenInputPerRequest,omitempty"`

	// AverageTokenOutputPerRequest Average output token per request
	AverageTokenOutputPerRequest *float32 `json:"averageTokenOutputPerRequest,omitempty"`

	// AverageTokenPerRequest Average token per request
	AverageTokenPerRequest *float32 `json:"averageTokenPerRequest,omitempty"`

	// TokenInput Total input tokens
	TokenInput *float32 `json:"tokenInput,omitempty"`

	// TokenOutput Total output tokens
	TokenOutput *float32 `json:"tokenOutput,omitempty"`

	// TokenTotal Total tokens
	TokenTotal *float32 `json:"tokenTotal,omitempty"`
}

// TraceIdsResponse Trace IDs response
type TraceIdsResponse = map[string]interface{}

// Workspace defines model for Workspace.
type Workspace struct {
	// AccountId Workspace account id
	AccountId *string `json:"accountId,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy The user or service account who created the resource
	CreatedBy *string `json:"createdBy,omitempty"`

	// DisplayName Workspace display name
	DisplayName *string `json:"displayName,omitempty"`

	// Labels Workspace labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Workspace name
	Name *string `json:"name,omitempty"`

	// Quotasomitempty Workspace quotas
	Quotasomitempty *Quotas `json:"quotas,omitempty,omitempty"`

	// Region Workspace write region
	Region *string `json:"region,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UpdatedBy The user or service account who updated the resource
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// WorkspaceUser Workspace user
type WorkspaceUser struct {
	// Accepted Whether the user has accepted the workspace invitation
	Accepted *bool `json:"accepted,omitempty"`

	// Email Workspace user email
	Email *string `json:"email,omitempty"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified *bool `json:"email_verified,omitempty"`

	// FamilyName Workspace user family name
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName Workspace user given name
	GivenName *string `json:"given_name,omitempty"`

	// Role Workspace user role
	Role *string `json:"role,omitempty"`

	// Sub Workspace user identifier
	Sub *string `json:"sub,omitempty"`
}

// ListAgentsParams defines parameters for ListAgents.
type ListAgentsParams struct {
	// Environment Environment to filter agents by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// DeleteAgentParams defines parameters for DeleteAgent.
type DeleteAgentParams struct {
	// Environment Environment of the model
	Environment string `form:"environment" json:"environment"`
}

// GetAgentParams defines parameters for GetAgent.
type GetAgentParams struct {
	// Environment Environment to filter agents by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// GetAgentMetricsParams defines parameters for GetAgentMetrics.
type GetAgentMetricsParams struct {
	// Environment Environment to filter agents by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// GetAgentTraceIdsParams defines parameters for GetAgentTraceIds.
type GetAgentTraceIdsParams struct {
	// Environment Environment to filter agents by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// ListFunctionsParams defines parameters for ListFunctions.
type ListFunctionsParams struct {
	// Environment Environment to filter functions by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// DeleteFunctionParams defines parameters for DeleteFunction.
type DeleteFunctionParams struct {
	// Environment Environment of the model
	Environment string `form:"environment" json:"environment"`
}

// GetFunctionParams defines parameters for GetFunction.
type GetFunctionParams struct {
	// Environment Environment to filter functions by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// GetFunctionMetricsParams defines parameters for GetFunctionMetrics.
type GetFunctionMetricsParams struct {
	// Environment Environment to filter functions by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// GetFunctionTraceIdsParams defines parameters for GetFunctionTraceIds.
type GetFunctionTraceIdsParams struct {
	// Environment Environment to filter function by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// ListModelsParams defines parameters for ListModels.
type ListModelsParams struct {
	// Environment Environment of the model
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// DeleteModelParams defines parameters for DeleteModel.
type DeleteModelParams struct {
	// Environment Environment of the model
	Environment string `form:"environment" json:"environment"`
}

// GetModelParams defines parameters for GetModel.
type GetModelParams struct {
	// Environment Environment of the model
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// GetModelMetricsParams defines parameters for GetModelMetrics.
type GetModelMetricsParams struct {
	// Environment Environment of the model
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// GetModelTraceIdsParams defines parameters for GetModelTraceIds.
type GetModelTraceIdsParams struct {
	// Environment Environment to filter models by
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// CreateWorkspaceServiceAccountJSONBody defines parameters for CreateWorkspaceServiceAccount.
type CreateWorkspaceServiceAccountJSONBody struct {
	// Description Service account description
	Description *string `json:"description,omitempty"`

	// Name Service account name
	Name string `json:"name"`
}

// UpdateWorkspaceServiceAccountJSONBody defines parameters for UpdateWorkspaceServiceAccount.
type UpdateWorkspaceServiceAccountJSONBody struct {
	// Description Service account description
	Description *string `json:"description,omitempty"`

	// Name Service account name
	Name *string `json:"name,omitempty"`
}

// CreateApiKeyForServiceAccountJSONBody defines parameters for CreateApiKeyForServiceAccount.
type CreateApiKeyForServiceAccountJSONBody struct {
	// ExpiresIn Expiration period for the API key
	ExpiresIn *string `json:"expires_in,omitempty"`

	// Name Name for the API key
	Name *string `json:"name,omitempty"`
}

// GetTraceIdsParams defines parameters for GetTraceIds.
type GetTraceIdsParams struct {
	WorkloadId   *string `form:"workloadId,omitempty" json:"workloadId,omitempty"`
	WorkloadType *string `form:"workloadType,omitempty" json:"workloadType,omitempty"`
	Environment  *string `form:"environment,omitempty" json:"environment,omitempty"`
	Limit        *string `form:"limit,omitempty" json:"limit,omitempty"`
	StartTime    *string `form:"startTime,omitempty" json:"startTime,omitempty"`
	EndTime      *string `form:"endTime,omitempty" json:"endTime,omitempty"`
}

// GetTraceLogsParams defines parameters for GetTraceLogs.
type GetTraceLogsParams struct {
	SpanId *string `form:"spanId,omitempty" json:"spanId,omitempty"`
	Limit  *string `form:"limit,omitempty" json:"limit,omitempty"`
}

// InviteWorkspaceUserJSONBody defines parameters for InviteWorkspaceUser.
type InviteWorkspaceUserJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
}

// UpdateWorkspaceUserRoleJSONBody defines parameters for UpdateWorkspaceUserRole.
type UpdateWorkspaceUserRoleJSONBody struct {
	// Role The new role to assign to the user
	Role string `json:"role"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = Account

// UpdateAccountJSONRequestBody defines body for UpdateAccount for application/json ContentType.
type UpdateAccountJSONRequestBody = Account

// CreateAgentJSONRequestBody defines body for CreateAgent for application/json ContentType.
type CreateAgentJSONRequestBody = Agent

// UpdateAgentJSONRequestBody defines body for UpdateAgent for application/json ContentType.
type UpdateAgentJSONRequestBody = Agent

// PutAgentHistoryJSONRequestBody defines body for PutAgentHistory for application/json ContentType.
type PutAgentHistoryJSONRequestBody = AgentHistory

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = Environment

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = Environment

// CreateFunctionJSONRequestBody defines body for CreateFunction for application/json ContentType.
type CreateFunctionJSONRequestBody = Function

// UpdateFunctionJSONRequestBody defines body for UpdateFunction for application/json ContentType.
type UpdateFunctionJSONRequestBody = Function

// CreateIntegrationConnectionJSONRequestBody defines body for CreateIntegrationConnection for application/json ContentType.
type CreateIntegrationConnectionJSONRequestBody = IntegrationConnection

// UpdateIntegrationConnectionJSONRequestBody defines body for UpdateIntegrationConnection for application/json ContentType.
type UpdateIntegrationConnectionJSONRequestBody = IntegrationConnection

// CreateModelJSONRequestBody defines body for CreateModel for application/json ContentType.
type CreateModelJSONRequestBody = Model

// UpdateModelJSONRequestBody defines body for UpdateModel for application/json ContentType.
type UpdateModelJSONRequestBody = Model

// CreatePolicyJSONRequestBody defines body for CreatePolicy for application/json ContentType.
type CreatePolicyJSONRequestBody = Policy

// UpdatePolicyJSONRequestBody defines body for UpdatePolicy for application/json ContentType.
type UpdatePolicyJSONRequestBody = Policy

// CreateWorkspaceServiceAccountJSONRequestBody defines body for CreateWorkspaceServiceAccount for application/json ContentType.
type CreateWorkspaceServiceAccountJSONRequestBody CreateWorkspaceServiceAccountJSONBody

// UpdateWorkspaceServiceAccountJSONRequestBody defines body for UpdateWorkspaceServiceAccount for application/json ContentType.
type UpdateWorkspaceServiceAccountJSONRequestBody UpdateWorkspaceServiceAccountJSONBody

// CreateApiKeyForServiceAccountJSONRequestBody defines body for CreateApiKeyForServiceAccount for application/json ContentType.
type CreateApiKeyForServiceAccountJSONRequestBody CreateApiKeyForServiceAccountJSONBody

// InviteWorkspaceUserJSONRequestBody defines body for InviteWorkspaceUser for application/json ContentType.
type InviteWorkspaceUserJSONRequestBody InviteWorkspaceUserJSONBody

// UpdateWorkspaceUserRoleJSONRequestBody defines body for UpdateWorkspaceUserRole for application/json ContentType.
type UpdateWorkspaceUserRoleJSONRequestBody UpdateWorkspaceUserRoleJSONBody

// CreateWorspaceJSONRequestBody defines body for CreateWorspace for application/json ContentType.
type CreateWorspaceJSONRequestBody = Workspace

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody = Workspace

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	RunServer string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, runServer string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server:    server,
		RunServer: runServer,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	Chat(
		ctx context.Context,
		workspace string,
		environment string,
		resourceType string,
		resourceName string,
	) error
	Run(
		ctx context.Context,
		workspaceName string,
		environment string,
		resourceType string,
		resourceName string,
		method string,
		path string,
		headers map[string]string,
		params []string,
		body string,
		debug bool,
		local bool,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListAccounts request
	ListAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountWithBody request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccount request
	DeleteAccount(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountWithBody request with any body
	UpdateAccountWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccount(ctx context.Context, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAgents request
	ListAgents(ctx context.Context, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAgentWithBody request with any body
	CreateAgentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAgent(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgent request
	DeleteAgent(ctx context.Context, agentName string, params *DeleteAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgent request
	GetAgent(ctx context.Context, agentName string, params *GetAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAgentWithBody request with any body
	UpdateAgentWithBody(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAgent(ctx context.Context, agentName string, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAgentHistory request
	ListAgentHistory(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgentHistory request
	DeleteAgentHistory(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentHistory request
	GetAgentHistory(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentHistoryWithBody request with any body
	PutAgentHistoryWithBody(ctx context.Context, agentName string, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentHistory(ctx context.Context, agentName string, requestId string, body PutAgentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentEnvironmentLogs request
	GetAgentEnvironmentLogs(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentMetrics request
	GetAgentMetrics(ctx context.Context, agentName string, params *GetAgentMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAgentRelease request
	CreateAgentRelease(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentTraceIds request
	GetAgentTraceIds(ctx context.Context, agentName string, params *GetAgentTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfiguration request
	GetConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironmentWithBody request with any body
	UpdateEnvironmentWithBody(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvironment(ctx context.Context, environmentName string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentMetrics request
	GetEnvironmentMetrics(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctions request
	ListFunctions(ctx context.Context, params *ListFunctionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionWithBody request with any body
	CreateFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFunction(ctx context.Context, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunction request
	DeleteFunction(ctx context.Context, functionName string, params *DeleteFunctionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunction request
	GetFunction(ctx context.Context, functionName string, params *GetFunctionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionWithBody request with any body
	UpdateFunctionWithBody(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFunction(ctx context.Context, functionName string, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionEnvironmentLogs request
	GetFunctionEnvironmentLogs(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionMetrics request
	GetFunctionMetrics(ctx context.Context, functionName string, params *GetFunctionMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionRelease request
	CreateFunctionRelease(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionTraceIds request
	GetFunctionTraceIds(ctx context.Context, functionName string, params *GetFunctionTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAgentsHistory request
	ListAgentsHistory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentsHistory request
	GetAgentsHistory(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIntegrationConnections request
	ListIntegrationConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIntegrationConnectionWithBody request with any body
	CreateIntegrationConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIntegrationConnection(ctx context.Context, body CreateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIntegrationConnection request
	DeleteIntegrationConnection(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrationConnection request
	GetIntegrationConnection(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIntegrationConnectionWithBody request with any body
	UpdateIntegrationConnectionWithBody(ctx context.Context, connectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIntegrationConnection(ctx context.Context, connectionName string, body UpdateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIntegrationConnectionModels request
	ListIntegrationConnectionModels(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrationConnectionModel request
	GetIntegrationConnectionModel(ctx context.Context, connectionName string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegration request
	GetIntegration(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIntegrationModels request
	ListIntegrationModels(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrationModel request
	GetIntegrationModel(ctx context.Context, integrationName string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLocations request
	ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetrics request
	GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModels request
	ListModels(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModelWithBody request with any body
	CreateModelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateModel(ctx context.Context, body CreateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModel request
	DeleteModel(ctx context.Context, modelName string, params *DeleteModelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModel request
	GetModel(ctx context.Context, modelName string, params *GetModelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateModelWithBody request with any body
	UpdateModelWithBody(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateModel(ctx context.Context, modelName string, body UpdateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelEnvironmentLogs request
	GetModelEnvironmentLogs(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelMetrics request
	GetModelMetrics(ctx context.Context, modelName string, params *GetModelMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleaseModel request
	ReleaseModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelTraceIds request
	GetModelTraceIds(ctx context.Context, modelName string, params *GetModelTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPolicies request
	ListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePolicyWithBody request with any body
	CreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePolicy(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicy request
	DeletePolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicy request
	GetPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePolicyWithBody request with any body
	UpdatePolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePolicy(ctx context.Context, policyName string, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPrivateClusters request
	ListPrivateClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePrivateCluster request
	CreatePrivateCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePrivateCluster request
	DeletePrivateCluster(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrivateCluster request
	GetPrivateCluster(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePrivateCluster request
	UpdatePrivateCluster(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrivateClusterHealth request
	GetPrivateClusterHealth(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePrivateClusterHealth request
	UpdatePrivateClusterHealth(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllPendingInvitations request
	ListAllPendingInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceServiceAccounts request
	GetWorkspaceServiceAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspaceServiceAccountWithBody request with any body
	CreateWorkspaceServiceAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspaceServiceAccount(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceServiceAccount request
	DeleteWorkspaceServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceServiceAccountWithBody request with any body
	UpdateWorkspaceServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceServiceAccount(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApiKeysForServiceAccount request
	ListApiKeysForServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiKeyForServiceAccountWithBody request with any body
	CreateApiKeyForServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiKeyForServiceAccount(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKeyForServiceAccount request
	DeleteApiKeyForServiceAccount(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStoreAgents request
	ListStoreAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoreAgent request
	GetStoreAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStoreFunctions request
	ListStoreFunctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoreFunction request
	GetStoreFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceIds request
	GetTraceIds(ctx context.Context, params *GetTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrace request
	GetTrace(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceLogs request
	GetTraceLogs(ctx context.Context, traceId string, params *GetTraceLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceUsers request
	ListWorkspaceUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteWorkspaceUserWithBody request with any body
	InviteWorkspaceUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InviteWorkspaceUser(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveWorkspaceUser request
	RemoveWorkspaceUser(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceUserRoleWithBody request with any body
	UpdateWorkspaceUserRoleWithBody(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceUserRole(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorspaceWithBody request with any body
	CreateWorspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorspace(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspace request
	DeleteWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceWithBody request with any body
	UpdateWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeclineWorkspaceInvitation request
	DeclineWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptWorkspaceInvitation request
	AcceptWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LeaveWorkspace request
	LeaveWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkspaceQuotasRequest request
	WorkspaceQuotasRequest(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

// RegisterCliCommands registers CLI commands for the client
func (c *ClientWithResponses) RegisterCliCommands(reg register.Register, ctx context.Context) {

	// Register CLI commands for ListAccounts
	reg.CliCommand(ctx, "ListAccounts", c.ListAccounts)

	// Register CLI commands for CreateAccount
	reg.CliCommand(ctx, "CreateAccount", c.CreateAccount)

	// Register CLI commands for DeleteAccount
	reg.CliCommand(ctx, "DeleteAccount", c.DeleteAccount)

	// Register CLI commands for GetAccount
	reg.CliCommand(ctx, "GetAccount", c.GetAccount)

	// Register CLI commands for UpdateAccount
	reg.CliCommand(ctx, "UpdateAccount", c.UpdateAccount)

	// Register CLI commands for ListAgents
	reg.CliCommand(ctx, "ListAgents", c.ListAgents)

	// Register CLI commands for CreateAgent
	reg.CliCommand(ctx, "CreateAgent", c.CreateAgent)

	// Register CLI commands for DeleteAgent
	reg.CliCommand(ctx, "DeleteAgent", c.DeleteAgent)

	// Register CLI commands for GetAgent
	reg.CliCommand(ctx, "GetAgent", c.GetAgent)

	// Register CLI commands for UpdateAgent
	reg.CliCommand(ctx, "UpdateAgent", c.UpdateAgent)

	// Register CLI commands for ListAgentHistory
	reg.CliCommand(ctx, "ListAgentHistory", c.ListAgentHistory)

	// Register CLI commands for DeleteAgentHistory
	reg.CliCommand(ctx, "DeleteAgentHistory", c.DeleteAgentHistory)

	// Register CLI commands for GetAgentHistory
	reg.CliCommand(ctx, "GetAgentHistory", c.GetAgentHistory)

	// Register CLI commands for PutAgentHistory
	reg.CliCommand(ctx, "PutAgentHistory", c.PutAgentHistory)

	// Register CLI commands for GetAgentEnvironmentLogs
	reg.CliCommand(ctx, "GetAgentEnvironmentLogs", c.GetAgentEnvironmentLogs)

	// Register CLI commands for GetAgentMetrics
	reg.CliCommand(ctx, "GetAgentMetrics", c.GetAgentMetrics)

	// Register CLI commands for CreateAgentRelease
	reg.CliCommand(ctx, "CreateAgentRelease", c.CreateAgentRelease)

	// Register CLI commands for GetAgentTraceIds
	reg.CliCommand(ctx, "GetAgentTraceIds", c.GetAgentTraceIds)

	// Register CLI commands for GetConfiguration
	reg.CliCommand(ctx, "GetConfiguration", c.GetConfiguration)

	// Register CLI commands for ListEnvironments
	reg.CliCommand(ctx, "ListEnvironments", c.ListEnvironments)

	// Register CLI commands for CreateEnvironment
	reg.CliCommand(ctx, "CreateEnvironment", c.CreateEnvironment)

	// Register CLI commands for DeleteEnvironment
	reg.CliCommand(ctx, "DeleteEnvironment", c.DeleteEnvironment)

	// Register CLI commands for GetEnvironment
	reg.CliCommand(ctx, "GetEnvironment", c.GetEnvironment)

	// Register CLI commands for UpdateEnvironment
	reg.CliCommand(ctx, "UpdateEnvironment", c.UpdateEnvironment)

	// Register CLI commands for GetEnvironmentMetrics
	reg.CliCommand(ctx, "GetEnvironmentMetrics", c.GetEnvironmentMetrics)

	// Register CLI commands for ListFunctions
	reg.CliCommand(ctx, "ListFunctions", c.ListFunctions)

	// Register CLI commands for CreateFunction
	reg.CliCommand(ctx, "CreateFunction", c.CreateFunction)

	// Register CLI commands for DeleteFunction
	reg.CliCommand(ctx, "DeleteFunction", c.DeleteFunction)

	// Register CLI commands for GetFunction
	reg.CliCommand(ctx, "GetFunction", c.GetFunction)

	// Register CLI commands for UpdateFunction
	reg.CliCommand(ctx, "UpdateFunction", c.UpdateFunction)

	// Register CLI commands for GetFunctionEnvironmentLogs
	reg.CliCommand(ctx, "GetFunctionEnvironmentLogs", c.GetFunctionEnvironmentLogs)

	// Register CLI commands for GetFunctionMetrics
	reg.CliCommand(ctx, "GetFunctionMetrics", c.GetFunctionMetrics)

	// Register CLI commands for CreateFunctionRelease
	reg.CliCommand(ctx, "CreateFunctionRelease", c.CreateFunctionRelease)

	// Register CLI commands for GetFunctionTraceIds
	reg.CliCommand(ctx, "GetFunctionTraceIds", c.GetFunctionTraceIds)

	// Register CLI commands for ListAgentsHistory
	reg.CliCommand(ctx, "ListAgentsHistory", c.ListAgentsHistory)

	// Register CLI commands for GetAgentsHistory
	reg.CliCommand(ctx, "GetAgentsHistory", c.GetAgentsHistory)

	// Register CLI commands for ListIntegrationConnections
	reg.CliCommand(ctx, "ListIntegrationConnections", c.ListIntegrationConnections)

	// Register CLI commands for CreateIntegrationConnection
	reg.CliCommand(ctx, "CreateIntegrationConnection", c.CreateIntegrationConnection)

	// Register CLI commands for DeleteIntegrationConnection
	reg.CliCommand(ctx, "DeleteIntegrationConnection", c.DeleteIntegrationConnection)

	// Register CLI commands for GetIntegrationConnection
	reg.CliCommand(ctx, "GetIntegrationConnection", c.GetIntegrationConnection)

	// Register CLI commands for UpdateIntegrationConnection
	reg.CliCommand(ctx, "UpdateIntegrationConnection", c.UpdateIntegrationConnection)

	// Register CLI commands for ListIntegrationConnectionModels
	reg.CliCommand(ctx, "ListIntegrationConnectionModels", c.ListIntegrationConnectionModels)

	// Register CLI commands for GetIntegrationConnectionModel
	reg.CliCommand(ctx, "GetIntegrationConnectionModel", c.GetIntegrationConnectionModel)

	// Register CLI commands for GetIntegration
	reg.CliCommand(ctx, "GetIntegration", c.GetIntegration)

	// Register CLI commands for ListIntegrationModels
	reg.CliCommand(ctx, "ListIntegrationModels", c.ListIntegrationModels)

	// Register CLI commands for GetIntegrationModel
	reg.CliCommand(ctx, "GetIntegrationModel", c.GetIntegrationModel)

	// Register CLI commands for ListLocations
	reg.CliCommand(ctx, "ListLocations", c.ListLocations)

	// Register CLI commands for GetMetrics
	reg.CliCommand(ctx, "GetMetrics", c.GetMetrics)

	// Register CLI commands for ListModels
	reg.CliCommand(ctx, "ListModels", c.ListModels)

	// Register CLI commands for CreateModel
	reg.CliCommand(ctx, "CreateModel", c.CreateModel)

	// Register CLI commands for DeleteModel
	reg.CliCommand(ctx, "DeleteModel", c.DeleteModel)

	// Register CLI commands for GetModel
	reg.CliCommand(ctx, "GetModel", c.GetModel)

	// Register CLI commands for UpdateModel
	reg.CliCommand(ctx, "UpdateModel", c.UpdateModel)

	// Register CLI commands for GetModelEnvironmentLogs
	reg.CliCommand(ctx, "GetModelEnvironmentLogs", c.GetModelEnvironmentLogs)

	// Register CLI commands for GetModelMetrics
	reg.CliCommand(ctx, "GetModelMetrics", c.GetModelMetrics)

	// Register CLI commands for ReleaseModel
	reg.CliCommand(ctx, "ReleaseModel", c.ReleaseModel)

	// Register CLI commands for GetModelTraceIds
	reg.CliCommand(ctx, "GetModelTraceIds", c.GetModelTraceIds)

	// Register CLI commands for ListPolicies
	reg.CliCommand(ctx, "ListPolicies", c.ListPolicies)

	// Register CLI commands for CreatePolicy
	reg.CliCommand(ctx, "CreatePolicy", c.CreatePolicy)

	// Register CLI commands for DeletePolicy
	reg.CliCommand(ctx, "DeletePolicy", c.DeletePolicy)

	// Register CLI commands for GetPolicy
	reg.CliCommand(ctx, "GetPolicy", c.GetPolicy)

	// Register CLI commands for UpdatePolicy
	reg.CliCommand(ctx, "UpdatePolicy", c.UpdatePolicy)

	// Register CLI commands for ListPrivateClusters
	reg.CliCommand(ctx, "ListPrivateClusters", c.ListPrivateClusters)

	// Register CLI commands for CreatePrivateCluster
	reg.CliCommand(ctx, "CreatePrivateCluster", c.CreatePrivateCluster)

	// Register CLI commands for DeletePrivateCluster
	reg.CliCommand(ctx, "DeletePrivateCluster", c.DeletePrivateCluster)

	// Register CLI commands for GetPrivateCluster
	reg.CliCommand(ctx, "GetPrivateCluster", c.GetPrivateCluster)

	// Register CLI commands for UpdatePrivateCluster
	reg.CliCommand(ctx, "UpdatePrivateCluster", c.UpdatePrivateCluster)

	// Register CLI commands for GetPrivateClusterHealth
	reg.CliCommand(ctx, "GetPrivateClusterHealth", c.GetPrivateClusterHealth)

	// Register CLI commands for UpdatePrivateClusterHealth
	reg.CliCommand(ctx, "UpdatePrivateClusterHealth", c.UpdatePrivateClusterHealth)

	// Register CLI commands for ListAllPendingInvitations
	reg.CliCommand(ctx, "ListAllPendingInvitations", c.ListAllPendingInvitations)

	// Register CLI commands for GetWorkspaceServiceAccounts
	reg.CliCommand(ctx, "GetWorkspaceServiceAccounts", c.GetWorkspaceServiceAccounts)

	// Register CLI commands for CreateWorkspaceServiceAccount
	reg.CliCommand(ctx, "CreateWorkspaceServiceAccount", c.CreateWorkspaceServiceAccount)

	// Register CLI commands for DeleteWorkspaceServiceAccount
	reg.CliCommand(ctx, "DeleteWorkspaceServiceAccount", c.DeleteWorkspaceServiceAccount)

	// Register CLI commands for UpdateWorkspaceServiceAccount
	reg.CliCommand(ctx, "UpdateWorkspaceServiceAccount", c.UpdateWorkspaceServiceAccount)

	// Register CLI commands for ListApiKeysForServiceAccount
	reg.CliCommand(ctx, "ListApiKeysForServiceAccount", c.ListApiKeysForServiceAccount)

	// Register CLI commands for CreateApiKeyForServiceAccount
	reg.CliCommand(ctx, "CreateApiKeyForServiceAccount", c.CreateApiKeyForServiceAccount)

	// Register CLI commands for DeleteApiKeyForServiceAccount
	reg.CliCommand(ctx, "DeleteApiKeyForServiceAccount", c.DeleteApiKeyForServiceAccount)

	// Register CLI commands for ListStoreAgents
	reg.CliCommand(ctx, "ListStoreAgents", c.ListStoreAgents)

	// Register CLI commands for GetStoreAgent
	reg.CliCommand(ctx, "GetStoreAgent", c.GetStoreAgent)

	// Register CLI commands for ListStoreFunctions
	reg.CliCommand(ctx, "ListStoreFunctions", c.ListStoreFunctions)

	// Register CLI commands for GetStoreFunction
	reg.CliCommand(ctx, "GetStoreFunction", c.GetStoreFunction)

	// Register CLI commands for GetTraceIds
	reg.CliCommand(ctx, "GetTraceIds", c.GetTraceIds)

	// Register CLI commands for GetTrace
	reg.CliCommand(ctx, "GetTrace", c.GetTrace)

	// Register CLI commands for GetTraceLogs
	reg.CliCommand(ctx, "GetTraceLogs", c.GetTraceLogs)

	// Register CLI commands for ListWorkspaceUsers
	reg.CliCommand(ctx, "ListWorkspaceUsers", c.ListWorkspaceUsers)

	// Register CLI commands for InviteWorkspaceUser
	reg.CliCommand(ctx, "InviteWorkspaceUser", c.InviteWorkspaceUser)

	// Register CLI commands for RemoveWorkspaceUser
	reg.CliCommand(ctx, "RemoveWorkspaceUser", c.RemoveWorkspaceUser)

	// Register CLI commands for UpdateWorkspaceUserRole
	reg.CliCommand(ctx, "UpdateWorkspaceUserRole", c.UpdateWorkspaceUserRole)

	// Register CLI commands for ListWorkspaces
	reg.CliCommand(ctx, "ListWorkspaces", c.ListWorkspaces)

	// Register CLI commands for CreateWorspace
	reg.CliCommand(ctx, "CreateWorspace", c.CreateWorspace)

	// Register CLI commands for DeleteWorkspace
	reg.CliCommand(ctx, "DeleteWorkspace", c.DeleteWorkspace)

	// Register CLI commands for GetWorkspace
	reg.CliCommand(ctx, "GetWorkspace", c.GetWorkspace)

	// Register CLI commands for UpdateWorkspace
	reg.CliCommand(ctx, "UpdateWorkspace", c.UpdateWorkspace)

	// Register CLI commands for DeclineWorkspaceInvitation
	reg.CliCommand(ctx, "DeclineWorkspaceInvitation", c.DeclineWorkspaceInvitation)

	// Register CLI commands for AcceptWorkspaceInvitation
	reg.CliCommand(ctx, "AcceptWorkspaceInvitation", c.AcceptWorkspaceInvitation)

	// Register CLI commands for LeaveWorkspace
	reg.CliCommand(ctx, "LeaveWorkspace", c.LeaveWorkspace)

	// Register CLI commands for WorkspaceQuotasRequest
	reg.CliCommand(ctx, "WorkspaceQuotasRequest", c.WorkspaceQuotasRequest)

}

func (c *Client) ListAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccount(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccount(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccount(ctx context.Context, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAgents(ctx context.Context, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgent(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgent(ctx context.Context, agentName string, params *DeleteAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentRequest(c.Server, agentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgent(ctx context.Context, agentName string, params *GetAgentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentRequest(c.Server, agentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgentWithBody(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentRequestWithBody(c.Server, agentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgent(ctx context.Context, agentName string, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentRequest(c.Server, agentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAgentHistory(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentHistoryRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgentHistory(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentHistoryRequest(c.Server, agentName, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentHistory(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentHistoryRequest(c.Server, agentName, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentHistoryWithBody(ctx context.Context, agentName string, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentHistoryRequestWithBody(c.Server, agentName, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentHistory(ctx context.Context, agentName string, requestId string, body PutAgentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentHistoryRequest(c.Server, agentName, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentEnvironmentLogs(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentEnvironmentLogsRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentMetrics(ctx context.Context, agentName string, params *GetAgentMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentMetricsRequest(c.Server, agentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgentRelease(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentReleaseRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentTraceIds(ctx context.Context, agentName string, params *GetAgentTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentTraceIdsRequest(c.Server, agentName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironment(ctx context.Context, environmentName string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequest(c.Server, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentMetrics(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentMetricsRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctions(ctx context.Context, params *ListFunctionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunction(ctx context.Context, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunction(ctx context.Context, functionName string, params *DeleteFunctionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionRequest(c.Server, functionName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunction(ctx context.Context, functionName string, params *GetFunctionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionRequest(c.Server, functionName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionWithBody(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionRequestWithBody(c.Server, functionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunction(ctx context.Context, functionName string, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionRequest(c.Server, functionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionEnvironmentLogs(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionEnvironmentLogsRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionMetrics(ctx context.Context, functionName string, params *GetFunctionMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionMetricsRequest(c.Server, functionName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionRelease(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionReleaseRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionTraceIds(ctx context.Context, functionName string, params *GetFunctionTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionTraceIdsRequest(c.Server, functionName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAgentsHistory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentsHistoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentsHistory(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsHistoryRequest(c.Server, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIntegrationConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIntegrationConnectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIntegrationConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIntegrationConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIntegrationConnection(ctx context.Context, body CreateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIntegrationConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIntegrationConnection(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIntegrationConnectionRequest(c.Server, connectionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrationConnection(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationConnectionRequest(c.Server, connectionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIntegrationConnectionWithBody(ctx context.Context, connectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIntegrationConnectionRequestWithBody(c.Server, connectionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIntegrationConnection(ctx context.Context, connectionName string, body UpdateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIntegrationConnectionRequest(c.Server, connectionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIntegrationConnectionModels(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIntegrationConnectionModelsRequest(c.Server, connectionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrationConnectionModel(ctx context.Context, connectionName string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationConnectionModelRequest(c.Server, connectionName, modelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegration(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationRequest(c.Server, integrationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIntegrationModels(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIntegrationModelsRequest(c.Server, integrationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrationModel(ctx context.Context, integrationName string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationModelRequest(c.Server, integrationName, modelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLocationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModels(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModel(ctx context.Context, body CreateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModel(ctx context.Context, modelName string, params *DeleteModelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelRequest(c.Server, modelName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModel(ctx context.Context, modelName string, params *GetModelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelRequest(c.Server, modelName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateModelWithBody(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateModelRequestWithBody(c.Server, modelName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateModel(ctx context.Context, modelName string, body UpdateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateModelRequest(c.Server, modelName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelEnvironmentLogs(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelEnvironmentLogsRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelMetrics(ctx context.Context, modelName string, params *GetModelMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelMetricsRequest(c.Server, modelName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelTraceIds(ctx context.Context, modelName string, params *GetModelTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelTraceIdsRequest(c.Server, modelName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolicy(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePolicyRequestWithBody(c.Server, policyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePolicy(ctx context.Context, policyName string, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePolicyRequest(c.Server, policyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPrivateClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPrivateClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePrivateCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePrivateClusterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePrivateCluster(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePrivateClusterRequest(c.Server, privateClusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrivateCluster(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrivateClusterRequest(c.Server, privateClusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrivateCluster(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrivateClusterRequest(c.Server, privateClusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrivateClusterHealth(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrivateClusterHealthRequest(c.Server, privateClusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrivateClusterHealth(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrivateClusterHealthRequest(c.Server, privateClusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllPendingInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllPendingInvitationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceServiceAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceServiceAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceServiceAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceServiceAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceServiceAccount(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceServiceAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceServiceAccountRequest(c.Server, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceServiceAccountRequestWithBody(c.Server, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceServiceAccount(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceServiceAccountRequest(c.Server, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiKeysForServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiKeysForServiceAccountRequest(c.Server, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyForServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyForServiceAccountRequestWithBody(c.Server, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyForServiceAccount(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyForServiceAccountRequest(c.Server, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKeyForServiceAccount(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyForServiceAccountRequest(c.Server, clientId, apiKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStoreAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStoreAgentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoreAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoreAgentRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStoreFunctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStoreFunctionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoreFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoreFunctionRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceIds(ctx context.Context, params *GetTraceIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrace(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceRequest(c.Server, traceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceLogs(ctx context.Context, traceId string, params *GetTraceLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceLogsRequest(c.Server, traceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteWorkspaceUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteWorkspaceUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteWorkspaceUser(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteWorkspaceUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveWorkspaceUser(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveWorkspaceUserRequest(c.Server, subOrEmail)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceUserRoleWithBody(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceUserRoleRequestWithBody(c.Server, subOrEmail, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceUserRole(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceUserRoleRequest(c.Server, subOrEmail, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorspace(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, workspaceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, workspaceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeclineWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeclineWorkspaceInvitationRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptWorkspaceInvitationRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LeaveWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLeaveWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkspaceQuotasRequest(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkspaceQuotasRequestRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAccountsRequest generates requests for ListAccounts
func NewListAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountRequest generates requests for DeleteAccount
func NewDeleteAccountRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccountRequest calls the generic UpdateAccount builder with application/json body
func NewUpdateAccountRequest(server string, accountId string, body UpdateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewUpdateAccountRequestWithBody generates requests for UpdateAccount with any type of body
func NewUpdateAccountRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAgentsRequest generates requests for ListAgents
func NewListAgentsRequest(server string, params *ListAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAgentRequest calls the generic CreateAgent builder with application/json body
func NewCreateAgentRequest(server string, body CreateAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAgentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAgentRequestWithBody generates requests for CreateAgent with any type of body
func NewCreateAgentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAgentRequest generates requests for DeleteAgent
func NewDeleteAgentRequest(server string, agentName string, params *DeleteAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentRequest generates requests for GetAgent
func NewGetAgentRequest(server string, agentName string, params *GetAgentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAgentRequest calls the generic UpdateAgent builder with application/json body
func NewUpdateAgentRequest(server string, agentName string, body UpdateAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAgentRequestWithBody(server, agentName, "application/json", bodyReader)
}

// NewUpdateAgentRequestWithBody generates requests for UpdateAgent with any type of body
func NewUpdateAgentRequestWithBody(server string, agentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAgentHistoryRequest generates requests for ListAgentHistory
func NewListAgentHistoryRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAgentHistoryRequest generates requests for DeleteAgentHistory
func NewDeleteAgentHistoryRequest(server string, agentName string, requestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/history/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentHistoryRequest generates requests for GetAgentHistory
func NewGetAgentHistoryRequest(server string, agentName string, requestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/history/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAgentHistoryRequest calls the generic PutAgentHistory builder with application/json body
func NewPutAgentHistoryRequest(server string, agentName string, requestId string, body PutAgentHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentHistoryRequestWithBody(server, agentName, requestId, "application/json", bodyReader)
}

// NewPutAgentHistoryRequestWithBody generates requests for PutAgentHistory with any type of body
func NewPutAgentHistoryRequestWithBody(server string, agentName string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/history/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAgentEnvironmentLogsRequest generates requests for GetAgentEnvironmentLogs
func NewGetAgentEnvironmentLogsRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentMetricsRequest generates requests for GetAgentMetrics
func NewGetAgentMetricsRequest(server string, agentName string, params *GetAgentMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAgentReleaseRequest generates requests for CreateAgentRelease
func NewCreateAgentReleaseRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentTraceIdsRequest generates requests for GetAgentTraceIds
func NewGetAgentTraceIdsRequest(server string, agentName string, params *GetAgentTraceIdsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/traces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigurationRequest generates requests for GetConfiguration
func NewGetConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequest calls the generic UpdateEnvironment builder with application/json body
func NewUpdateEnvironmentRequest(server string, environmentName string, body UpdateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvironmentRequestWithBody(server, environmentName, "application/json", bodyReader)
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentMetricsRequest generates requests for GetEnvironmentMetrics
func NewGetEnvironmentMetricsRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFunctionsRequest generates requests for ListFunctions
func NewListFunctionsRequest(server string, params *ListFunctionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionRequest calls the generic CreateFunction builder with application/json body
func NewCreateFunctionRequest(server string, body CreateFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFunctionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFunctionRequestWithBody generates requests for CreateFunction with any type of body
func NewCreateFunctionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionRequest generates requests for DeleteFunction
func NewDeleteFunctionRequest(server string, functionName string, params *DeleteFunctionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionRequest generates requests for GetFunction
func NewGetFunctionRequest(server string, functionName string, params *GetFunctionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionRequest calls the generic UpdateFunction builder with application/json body
func NewUpdateFunctionRequest(server string, functionName string, body UpdateFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFunctionRequestWithBody(server, functionName, "application/json", bodyReader)
}

// NewUpdateFunctionRequestWithBody generates requests for UpdateFunction with any type of body
func NewUpdateFunctionRequestWithBody(server string, functionName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionEnvironmentLogsRequest generates requests for GetFunctionEnvironmentLogs
func NewGetFunctionEnvironmentLogsRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionMetricsRequest generates requests for GetFunctionMetrics
func NewGetFunctionMetricsRequest(server string, functionName string, params *GetFunctionMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionReleaseRequest generates requests for CreateFunctionRelease
func NewCreateFunctionReleaseRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionTraceIdsRequest generates requests for GetFunctionTraceIds
func NewGetFunctionTraceIdsRequest(server string, functionName string, params *GetFunctionTraceIdsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/traces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAgentsHistoryRequest generates requests for ListAgentsHistory
func NewListAgentsHistoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/history/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentsHistoryRequest generates requests for GetAgentsHistory
func NewGetAgentsHistoryRequest(server string, requestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/history/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIntegrationConnectionsRequest generates requests for ListIntegrationConnections
func NewListIntegrationConnectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIntegrationConnectionRequest calls the generic CreateIntegrationConnection builder with application/json body
func NewCreateIntegrationConnectionRequest(server string, body CreateIntegrationConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIntegrationConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIntegrationConnectionRequestWithBody generates requests for CreateIntegrationConnection with any type of body
func NewCreateIntegrationConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIntegrationConnectionRequest generates requests for DeleteIntegrationConnection
func NewDeleteIntegrationConnectionRequest(server string, connectionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionName", runtime.ParamLocationPath, connectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationConnectionRequest generates requests for GetIntegrationConnection
func NewGetIntegrationConnectionRequest(server string, connectionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionName", runtime.ParamLocationPath, connectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIntegrationConnectionRequest calls the generic UpdateIntegrationConnection builder with application/json body
func NewUpdateIntegrationConnectionRequest(server string, connectionName string, body UpdateIntegrationConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIntegrationConnectionRequestWithBody(server, connectionName, "application/json", bodyReader)
}

// NewUpdateIntegrationConnectionRequestWithBody generates requests for UpdateIntegrationConnection with any type of body
func NewUpdateIntegrationConnectionRequestWithBody(server string, connectionName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionName", runtime.ParamLocationPath, connectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIntegrationConnectionModelsRequest generates requests for ListIntegrationConnectionModels
func NewListIntegrationConnectionModelsRequest(server string, connectionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionName", runtime.ParamLocationPath, connectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/connections/%s/models", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationConnectionModelRequest generates requests for GetIntegrationConnectionModel
func NewGetIntegrationConnectionModelRequest(server string, connectionName string, modelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionName", runtime.ParamLocationPath, connectionName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "modelId", runtime.ParamLocationPath, modelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/connections/%s/models/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationRequest generates requests for GetIntegration
func NewGetIntegrationRequest(server string, integrationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationName", runtime.ParamLocationPath, integrationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIntegrationModelsRequest generates requests for ListIntegrationModels
func NewListIntegrationModelsRequest(server string, integrationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationName", runtime.ParamLocationPath, integrationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/%s/models", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationModelRequest generates requests for GetIntegrationModel
func NewGetIntegrationModelRequest(server string, integrationName string, modelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationName", runtime.ParamLocationPath, integrationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "modelId", runtime.ParamLocationPath, modelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/%s/models/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLocationsRequest generates requests for ListLocations
func NewListLocationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsRequest generates requests for GetMetrics
func NewGetMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModelsRequest generates requests for ListModels
func NewListModelsRequest(server string, params *ListModelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModelRequest calls the generic CreateModel builder with application/json body
func NewCreateModelRequest(server string, body CreateModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateModelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateModelRequestWithBody generates requests for CreateModel with any type of body
func NewCreateModelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteModelRequest generates requests for DeleteModel
func NewDeleteModelRequest(server string, modelName string, params *DeleteModelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelRequest generates requests for GetModel
func NewGetModelRequest(server string, modelName string, params *GetModelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateModelRequest calls the generic UpdateModel builder with application/json body
func NewUpdateModelRequest(server string, modelName string, body UpdateModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateModelRequestWithBody(server, modelName, "application/json", bodyReader)
}

// NewUpdateModelRequestWithBody generates requests for UpdateModel with any type of body
func NewUpdateModelRequestWithBody(server string, modelName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetModelEnvironmentLogsRequest generates requests for GetModelEnvironmentLogs
func NewGetModelEnvironmentLogsRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelMetricsRequest generates requests for GetModelMetrics
func NewGetModelMetricsRequest(server string, modelName string, params *GetModelMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReleaseModelRequest generates requests for ReleaseModel
func NewReleaseModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelTraceIdsRequest generates requests for GetModelTraceIds
func NewGetModelTraceIdsRequest(server string, modelName string, params *GetModelTraceIdsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/traces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPoliciesRequest generates requests for ListPolicies
func NewListPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePolicyRequest calls the generic CreatePolicy builder with application/json body
func NewCreatePolicyRequest(server string, body CreatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePolicyRequestWithBody generates requests for CreatePolicy with any type of body
func NewCreatePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyRequest generates requests for DeletePolicy
func NewDeletePolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyRequest generates requests for GetPolicy
func NewGetPolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePolicyRequest calls the generic UpdatePolicy builder with application/json body
func NewUpdatePolicyRequest(server string, policyName string, body UpdatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePolicyRequestWithBody(server, policyName, "application/json", bodyReader)
}

// NewUpdatePolicyRequestWithBody generates requests for UpdatePolicy with any type of body
func NewUpdatePolicyRequestWithBody(server string, policyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPrivateClustersRequest generates requests for ListPrivateClusters
func NewListPrivateClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/privateclusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePrivateClusterRequest generates requests for CreatePrivateCluster
func NewCreatePrivateClusterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/privateclusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePrivateClusterRequest generates requests for DeletePrivateCluster
func NewDeletePrivateClusterRequest(server string, privateClusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "privateClusterName", runtime.ParamLocationPath, privateClusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/privateclusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrivateClusterRequest generates requests for GetPrivateCluster
func NewGetPrivateClusterRequest(server string, privateClusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "privateClusterName", runtime.ParamLocationPath, privateClusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/privateclusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePrivateClusterRequest generates requests for UpdatePrivateCluster
func NewUpdatePrivateClusterRequest(server string, privateClusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "privateClusterName", runtime.ParamLocationPath, privateClusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/privateclusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrivateClusterHealthRequest generates requests for GetPrivateClusterHealth
func NewGetPrivateClusterHealthRequest(server string, privateClusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "privateClusterName", runtime.ParamLocationPath, privateClusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/privateclusters/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePrivateClusterHealthRequest generates requests for UpdatePrivateClusterHealth
func NewUpdatePrivateClusterHealthRequest(server string, privateClusterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "privateClusterName", runtime.ParamLocationPath, privateClusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/privateclusters/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAllPendingInvitationsRequest generates requests for ListAllPendingInvitations
func NewListAllPendingInvitationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceServiceAccountsRequest generates requests for GetWorkspaceServiceAccounts
func NewGetWorkspaceServiceAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkspaceServiceAccountRequest calls the generic CreateWorkspaceServiceAccount builder with application/json body
func NewCreateWorkspaceServiceAccountRequest(server string, body CreateWorkspaceServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceServiceAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorkspaceServiceAccountRequestWithBody generates requests for CreateWorkspaceServiceAccount with any type of body
func NewCreateWorkspaceServiceAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceServiceAccountRequest generates requests for DeleteWorkspaceServiceAccount
func NewDeleteWorkspaceServiceAccountRequest(server string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceServiceAccountRequest calls the generic UpdateWorkspaceServiceAccount builder with application/json body
func NewUpdateWorkspaceServiceAccountRequest(server string, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceServiceAccountRequestWithBody(server, clientId, "application/json", bodyReader)
}

// NewUpdateWorkspaceServiceAccountRequestWithBody generates requests for UpdateWorkspaceServiceAccount with any type of body
func NewUpdateWorkspaceServiceAccountRequestWithBody(server string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApiKeysForServiceAccountRequest generates requests for ListApiKeysForServiceAccount
func NewListApiKeysForServiceAccountRequest(server string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s/api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiKeyForServiceAccountRequest calls the generic CreateApiKeyForServiceAccount builder with application/json body
func NewCreateApiKeyForServiceAccountRequest(server string, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiKeyForServiceAccountRequestWithBody(server, clientId, "application/json", bodyReader)
}

// NewCreateApiKeyForServiceAccountRequestWithBody generates requests for CreateApiKeyForServiceAccount with any type of body
func NewCreateApiKeyForServiceAccountRequestWithBody(server string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s/api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeyForServiceAccountRequest generates requests for DeleteApiKeyForServiceAccount
func NewDeleteApiKeyForServiceAccountRequest(server string, clientId string, apiKeyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s/api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListStoreAgentsRequest generates requests for ListStoreAgents
func NewListStoreAgentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoreAgentRequest generates requests for GetStoreAgent
func NewGetStoreAgentRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListStoreFunctionsRequest generates requests for ListStoreFunctions
func NewListStoreFunctionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/functions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoreFunctionRequest generates requests for GetStoreFunction
func NewGetStoreFunctionRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceIdsRequest generates requests for GetTraceIds
func NewGetTraceIdsRequest(server string, params *GetTraceIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WorkloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadId", runtime.ParamLocationQuery, *params.WorkloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkloadType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadType", runtime.ParamLocationQuery, *params.WorkloadType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceRequest generates requests for GetTrace
func NewGetTraceRequest(server string, traceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "traceId", runtime.ParamLocationPath, traceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceLogsRequest generates requests for GetTraceLogs
func NewGetTraceLogsRequest(server string, traceId string, params *GetTraceLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "traceId", runtime.ParamLocationPath, traceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traces/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SpanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spanId", runtime.ParamLocationQuery, *params.SpanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWorkspaceUsersRequest generates requests for ListWorkspaceUsers
func NewListWorkspaceUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInviteWorkspaceUserRequest calls the generic InviteWorkspaceUser builder with application/json body
func NewInviteWorkspaceUserRequest(server string, body InviteWorkspaceUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInviteWorkspaceUserRequestWithBody(server, "application/json", bodyReader)
}

// NewInviteWorkspaceUserRequestWithBody generates requests for InviteWorkspaceUser with any type of body
func NewInviteWorkspaceUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveWorkspaceUserRequest generates requests for RemoveWorkspaceUser
func NewRemoveWorkspaceUserRequest(server string, subOrEmail string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subOrEmail", runtime.ParamLocationPath, subOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceUserRoleRequest calls the generic UpdateWorkspaceUserRole builder with application/json body
func NewUpdateWorkspaceUserRoleRequest(server string, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceUserRoleRequestWithBody(server, subOrEmail, "application/json", bodyReader)
}

// NewUpdateWorkspaceUserRoleRequestWithBody generates requests for UpdateWorkspaceUserRole with any type of body
func NewUpdateWorkspaceUserRoleRequestWithBody(server string, subOrEmail string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subOrEmail", runtime.ParamLocationPath, subOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorspaceRequest calls the generic CreateWorspace builder with application/json body
func NewCreateWorspaceRequest(server string, body CreateWorspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorspaceRequestWithBody generates requests for CreateWorspace with any type of body
func NewCreateWorspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, workspaceName string, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, workspaceName, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, workspaceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeclineWorkspaceInvitationRequest generates requests for DeclineWorkspaceInvitation
func NewDeclineWorkspaceInvitationRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/decline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptWorkspaceInvitationRequest generates requests for AcceptWorkspaceInvitation
func NewAcceptWorkspaceInvitationRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLeaveWorkspaceRequest generates requests for LeaveWorkspace
func NewLeaveWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/leave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkspaceQuotasRequestRequest generates requests for WorkspaceQuotasRequest
func NewWorkspaceQuotasRequestRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/quotas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, runServer string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, runServer, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAccountsWithResponse request
	ListAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAccountsResponse, error)

	// CreateAccountWithBodyWithResponse request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// DeleteAccountWithResponse request
	DeleteAccountWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetAccountWithResponse request
	GetAccountWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// UpdateAccountWithBodyWithResponse request with any body
	UpdateAccountWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error)

	UpdateAccountWithResponse(ctx context.Context, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error)

	// ListAgentsWithResponse request
	ListAgentsWithResponse(ctx context.Context, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*ListAgentsResponse, error)

	// CreateAgentWithBodyWithResponse request with any body
	CreateAgentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error)

	CreateAgentWithResponse(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error)

	// DeleteAgentWithResponse request
	DeleteAgentWithResponse(ctx context.Context, agentName string, params *DeleteAgentParams, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error)

	// GetAgentWithResponse request
	GetAgentWithResponse(ctx context.Context, agentName string, params *GetAgentParams, reqEditors ...RequestEditorFn) (*GetAgentResponse, error)

	// UpdateAgentWithBodyWithResponse request with any body
	UpdateAgentWithBodyWithResponse(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error)

	UpdateAgentWithResponse(ctx context.Context, agentName string, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error)

	// ListAgentHistoryWithResponse request
	ListAgentHistoryWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*ListAgentHistoryResponse, error)

	// DeleteAgentHistoryWithResponse request
	DeleteAgentHistoryWithResponse(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*DeleteAgentHistoryResponse, error)

	// GetAgentHistoryWithResponse request
	GetAgentHistoryWithResponse(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*GetAgentHistoryResponse, error)

	// PutAgentHistoryWithBodyWithResponse request with any body
	PutAgentHistoryWithBodyWithResponse(ctx context.Context, agentName string, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentHistoryResponse, error)

	PutAgentHistoryWithResponse(ctx context.Context, agentName string, requestId string, body PutAgentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentHistoryResponse, error)

	// GetAgentEnvironmentLogsWithResponse request
	GetAgentEnvironmentLogsWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetAgentEnvironmentLogsResponse, error)

	// GetAgentMetricsWithResponse request
	GetAgentMetricsWithResponse(ctx context.Context, agentName string, params *GetAgentMetricsParams, reqEditors ...RequestEditorFn) (*GetAgentMetricsResponse, error)

	// CreateAgentReleaseWithResponse request
	CreateAgentReleaseWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*CreateAgentReleaseResponse, error)

	// GetAgentTraceIdsWithResponse request
	GetAgentTraceIdsWithResponse(ctx context.Context, agentName string, params *GetAgentTraceIdsParams, reqEditors ...RequestEditorFn) (*GetAgentTraceIdsResponse, error)

	// GetConfigurationWithResponse request
	GetConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationResponse, error)

	// ListEnvironmentsWithResponse request
	ListEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironmentWithBodyWithResponse request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	UpdateEnvironmentWithResponse(ctx context.Context, environmentName string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// GetEnvironmentMetricsWithResponse request
	GetEnvironmentMetricsWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentMetricsResponse, error)

	// ListFunctionsWithResponse request
	ListFunctionsWithResponse(ctx context.Context, params *ListFunctionsParams, reqEditors ...RequestEditorFn) (*ListFunctionsResponse, error)

	// CreateFunctionWithBodyWithResponse request with any body
	CreateFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error)

	CreateFunctionWithResponse(ctx context.Context, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error)

	// DeleteFunctionWithResponse request
	DeleteFunctionWithResponse(ctx context.Context, functionName string, params *DeleteFunctionParams, reqEditors ...RequestEditorFn) (*DeleteFunctionResponse, error)

	// GetFunctionWithResponse request
	GetFunctionWithResponse(ctx context.Context, functionName string, params *GetFunctionParams, reqEditors ...RequestEditorFn) (*GetFunctionResponse, error)

	// UpdateFunctionWithBodyWithResponse request with any body
	UpdateFunctionWithBodyWithResponse(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error)

	UpdateFunctionWithResponse(ctx context.Context, functionName string, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error)

	// GetFunctionEnvironmentLogsWithResponse request
	GetFunctionEnvironmentLogsWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetFunctionEnvironmentLogsResponse, error)

	// GetFunctionMetricsWithResponse request
	GetFunctionMetricsWithResponse(ctx context.Context, functionName string, params *GetFunctionMetricsParams, reqEditors ...RequestEditorFn) (*GetFunctionMetricsResponse, error)

	// CreateFunctionReleaseWithResponse request
	CreateFunctionReleaseWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*CreateFunctionReleaseResponse, error)

	// GetFunctionTraceIdsWithResponse request
	GetFunctionTraceIdsWithResponse(ctx context.Context, functionName string, params *GetFunctionTraceIdsParams, reqEditors ...RequestEditorFn) (*GetFunctionTraceIdsResponse, error)

	// ListAgentsHistoryWithResponse request
	ListAgentsHistoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAgentsHistoryResponse, error)

	// GetAgentsHistoryWithResponse request
	GetAgentsHistoryWithResponse(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*GetAgentsHistoryResponse, error)

	// ListIntegrationConnectionsWithResponse request
	ListIntegrationConnectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListIntegrationConnectionsResponse, error)

	// CreateIntegrationConnectionWithBodyWithResponse request with any body
	CreateIntegrationConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIntegrationConnectionResponse, error)

	CreateIntegrationConnectionWithResponse(ctx context.Context, body CreateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIntegrationConnectionResponse, error)

	// DeleteIntegrationConnectionWithResponse request
	DeleteIntegrationConnectionWithResponse(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*DeleteIntegrationConnectionResponse, error)

	// GetIntegrationConnectionWithResponse request
	GetIntegrationConnectionWithResponse(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*GetIntegrationConnectionResponse, error)

	// UpdateIntegrationConnectionWithBodyWithResponse request with any body
	UpdateIntegrationConnectionWithBodyWithResponse(ctx context.Context, connectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIntegrationConnectionResponse, error)

	UpdateIntegrationConnectionWithResponse(ctx context.Context, connectionName string, body UpdateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIntegrationConnectionResponse, error)

	// ListIntegrationConnectionModelsWithResponse request
	ListIntegrationConnectionModelsWithResponse(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*ListIntegrationConnectionModelsResponse, error)

	// GetIntegrationConnectionModelWithResponse request
	GetIntegrationConnectionModelWithResponse(ctx context.Context, connectionName string, modelId string, reqEditors ...RequestEditorFn) (*GetIntegrationConnectionModelResponse, error)

	// GetIntegrationWithResponse request
	GetIntegrationWithResponse(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*GetIntegrationResponse, error)

	// ListIntegrationModelsWithResponse request
	ListIntegrationModelsWithResponse(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*ListIntegrationModelsResponse, error)

	// GetIntegrationModelWithResponse request
	GetIntegrationModelWithResponse(ctx context.Context, integrationName string, modelId string, reqEditors ...RequestEditorFn) (*GetIntegrationModelResponse, error)

	// ListLocationsWithResponse request
	ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error)

	// GetMetricsWithResponse request
	GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error)

	// ListModelsWithResponse request
	ListModelsWithResponse(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*ListModelsResponse, error)

	// CreateModelWithBodyWithResponse request with any body
	CreateModelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModelResponse, error)

	CreateModelWithResponse(ctx context.Context, body CreateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModelResponse, error)

	// DeleteModelWithResponse request
	DeleteModelWithResponse(ctx context.Context, modelName string, params *DeleteModelParams, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error)

	// GetModelWithResponse request
	GetModelWithResponse(ctx context.Context, modelName string, params *GetModelParams, reqEditors ...RequestEditorFn) (*GetModelResponse, error)

	// UpdateModelWithBodyWithResponse request with any body
	UpdateModelWithBodyWithResponse(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateModelResponse, error)

	UpdateModelWithResponse(ctx context.Context, modelName string, body UpdateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateModelResponse, error)

	// GetModelEnvironmentLogsWithResponse request
	GetModelEnvironmentLogsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelEnvironmentLogsResponse, error)

	// GetModelMetricsWithResponse request
	GetModelMetricsWithResponse(ctx context.Context, modelName string, params *GetModelMetricsParams, reqEditors ...RequestEditorFn) (*GetModelMetricsResponse, error)

	// ReleaseModelWithResponse request
	ReleaseModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ReleaseModelResponse, error)

	// GetModelTraceIdsWithResponse request
	GetModelTraceIdsWithResponse(ctx context.Context, modelName string, params *GetModelTraceIdsParams, reqEditors ...RequestEditorFn) (*GetModelTraceIdsResponse, error)

	// ListPoliciesWithResponse request
	ListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPoliciesResponse, error)

	// CreatePolicyWithBodyWithResponse request with any body
	CreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error)

	CreatePolicyWithResponse(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error)

	// DeletePolicyWithResponse request
	DeletePolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error)

	// GetPolicyWithResponse request
	GetPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error)

	// UpdatePolicyWithBodyWithResponse request with any body
	UpdatePolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolicyResponse, error)

	UpdatePolicyWithResponse(ctx context.Context, policyName string, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePolicyResponse, error)

	// ListPrivateClustersWithResponse request
	ListPrivateClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPrivateClustersResponse, error)

	// CreatePrivateClusterWithResponse request
	CreatePrivateClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePrivateClusterResponse, error)

	// DeletePrivateClusterWithResponse request
	DeletePrivateClusterWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*DeletePrivateClusterResponse, error)

	// GetPrivateClusterWithResponse request
	GetPrivateClusterWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*GetPrivateClusterResponse, error)

	// UpdatePrivateClusterWithResponse request
	UpdatePrivateClusterWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*UpdatePrivateClusterResponse, error)

	// GetPrivateClusterHealthWithResponse request
	GetPrivateClusterHealthWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*GetPrivateClusterHealthResponse, error)

	// UpdatePrivateClusterHealthWithResponse request
	UpdatePrivateClusterHealthWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*UpdatePrivateClusterHealthResponse, error)

	// ListAllPendingInvitationsWithResponse request
	ListAllPendingInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllPendingInvitationsResponse, error)

	// GetWorkspaceServiceAccountsWithResponse request
	GetWorkspaceServiceAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkspaceServiceAccountsResponse, error)

	// CreateWorkspaceServiceAccountWithBodyWithResponse request with any body
	CreateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error)

	CreateWorkspaceServiceAccountWithResponse(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error)

	// DeleteWorkspaceServiceAccountWithResponse request
	DeleteWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceServiceAccountResponse, error)

	// UpdateWorkspaceServiceAccountWithBodyWithResponse request with any body
	UpdateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error)

	UpdateWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error)

	// ListApiKeysForServiceAccountWithResponse request
	ListApiKeysForServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*ListApiKeysForServiceAccountResponse, error)

	// CreateApiKeyForServiceAccountWithBodyWithResponse request with any body
	CreateApiKeyForServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error)

	CreateApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error)

	// DeleteApiKeyForServiceAccountWithResponse request
	DeleteApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*DeleteApiKeyForServiceAccountResponse, error)

	// ListStoreAgentsWithResponse request
	ListStoreAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreAgentsResponse, error)

	// GetStoreAgentWithResponse request
	GetStoreAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetStoreAgentResponse, error)

	// ListStoreFunctionsWithResponse request
	ListStoreFunctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreFunctionsResponse, error)

	// GetStoreFunctionWithResponse request
	GetStoreFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetStoreFunctionResponse, error)

	// GetTraceIdsWithResponse request
	GetTraceIdsWithResponse(ctx context.Context, params *GetTraceIdsParams, reqEditors ...RequestEditorFn) (*GetTraceIdsResponse, error)

	// GetTraceWithResponse request
	GetTraceWithResponse(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*GetTraceResponse, error)

	// GetTraceLogsWithResponse request
	GetTraceLogsWithResponse(ctx context.Context, traceId string, params *GetTraceLogsParams, reqEditors ...RequestEditorFn) (*GetTraceLogsResponse, error)

	// ListWorkspaceUsersWithResponse request
	ListWorkspaceUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error)

	// InviteWorkspaceUserWithBodyWithResponse request with any body
	InviteWorkspaceUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error)

	InviteWorkspaceUserWithResponse(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error)

	// RemoveWorkspaceUserWithResponse request
	RemoveWorkspaceUserWithResponse(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*RemoveWorkspaceUserResponse, error)

	// UpdateWorkspaceUserRoleWithBodyWithResponse request with any body
	UpdateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error)

	UpdateWorkspaceUserRoleWithResponse(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error)

	// ListWorkspacesWithResponse request
	ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error)

	// CreateWorspaceWithBodyWithResponse request with any body
	CreateWorspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error)

	CreateWorspaceWithResponse(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error)

	// DeleteWorkspaceWithResponse request
	DeleteWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspaceWithResponse request
	GetWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// UpdateWorkspaceWithBodyWithResponse request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// DeclineWorkspaceInvitationWithResponse request
	DeclineWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeclineWorkspaceInvitationResponse, error)

	// AcceptWorkspaceInvitationWithResponse request
	AcceptWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*AcceptWorkspaceInvitationResponse, error)

	// LeaveWorkspaceWithResponse request
	LeaveWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*LeaveWorkspaceResponse, error)

	// WorkspaceQuotasRequestWithResponse request
	WorkspaceQuotasRequestWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*WorkspaceQuotasRequestResponse, error)
}

type ListAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r ListAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r UpdateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Agent
}

// Status returns HTTPResponse.Status
func (r ListAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r CreateAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r DeleteAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r GetAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r UpdateAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAgentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AgentHistory
}

// Status returns HTTPResponse.Status
func (r ListAgentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentHistory
}

// Status returns HTTPResponse.Status
func (r DeleteAgentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentHistory
}

// Status returns HTTPResponse.Status
func (r GetAgentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentHistory
}

// Status returns HTTPResponse.Status
func (r PutAgentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentEnvironmentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceLog
}

// Status returns HTTPResponse.Status
func (r GetAgentEnvironmentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentEnvironmentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceEnvironmentMetrics
}

// Status returns HTTPResponse.Status
func (r GetAgentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAgentReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentRelease
}

// Status returns HTTPResponse.Status
func (r CreateAgentReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAgentReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentTraceIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TraceIdsResponse
}

// Status returns HTTPResponse.Status
func (r GetAgentTraceIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentTraceIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Configuration
}

// Status returns HTTPResponse.Status
func (r GetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Environment
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentMetrics
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Function
}

// Status returns HTTPResponse.Status
func (r ListFunctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Function
}

// Status returns HTTPResponse.Status
func (r CreateFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Function
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Function
}

// Status returns HTTPResponse.Status
func (r GetFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Function
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionEnvironmentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceLog
}

// Status returns HTTPResponse.Status
func (r GetFunctionEnvironmentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionEnvironmentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceEnvironmentMetrics
}

// Status returns HTTPResponse.Status
func (r GetFunctionMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionRelease
}

// Status returns HTTPResponse.Status
func (r CreateFunctionReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionTraceIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TraceIdsResponse
}

// Status returns HTTPResponse.Status
func (r GetFunctionTraceIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionTraceIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAgentsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AgentHistory
}

// Status returns HTTPResponse.Status
func (r ListAgentsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AgentHistory
}

// Status returns HTTPResponse.Status
func (r GetAgentsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIntegrationConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IntegrationConnection
}

// Status returns HTTPResponse.Status
func (r ListIntegrationConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIntegrationConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIntegrationConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationConnection
}

// Status returns HTTPResponse.Status
func (r CreateIntegrationConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIntegrationConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIntegrationConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationConnection
}

// Status returns HTTPResponse.Status
func (r DeleteIntegrationConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIntegrationConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationConnection
}

// Status returns HTTPResponse.Status
func (r GetIntegrationConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIntegrationConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationConnection
}

// Status returns HTTPResponse.Status
func (r UpdateIntegrationConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIntegrationConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIntegrationConnectionModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIntegrationConnectionModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIntegrationConnectionModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationConnectionModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIntegrationConnectionModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationConnectionModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIntegrationModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListIntegrationModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIntegrationModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIntegrationModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LocationResponse
}

// Status returns HTTPResponse.Status
func (r ListLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metrics
}

// Status returns HTTPResponse.Status
func (r GetMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Model
}

// Status returns HTTPResponse.Status
func (r ListModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r CreateModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r DeleteModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r GetModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r UpdateModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelEnvironmentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceLog
}

// Status returns HTTPResponse.Status
func (r GetModelEnvironmentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelEnvironmentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceEnvironmentMetrics
}

// Status returns HTTPResponse.Status
func (r GetModelMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleaseModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelRelease
}

// Status returns HTTPResponse.Status
func (r ReleaseModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleaseModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelTraceIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TraceIdsResponse
}

// Status returns HTTPResponse.Status
func (r GetModelTraceIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelTraceIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Policy
}

// Status returns HTTPResponse.Status
func (r ListPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r CreatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r DeletePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r GetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r UpdatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPrivateClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrivateCluster
}

// Status returns HTTPResponse.Status
func (r ListPrivateClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPrivateClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePrivateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateCluster
}

// Status returns HTTPResponse.Status
func (r CreatePrivateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePrivateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePrivateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateCluster
}

// Status returns HTTPResponse.Status
func (r DeletePrivateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePrivateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrivateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateCluster
}

// Status returns HTTPResponse.Status
func (r GetPrivateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrivateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePrivateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateCluster
}

// Status returns HTTPResponse.Status
func (r UpdatePrivateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePrivateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrivateClusterHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPrivateClusterHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrivateClusterHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePrivateClusterHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePrivateClusterHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePrivateClusterHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllPendingInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PendingInvitationRender
}

// Status returns HTTPResponse.Status
func (r ListAllPendingInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllPendingInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceServiceAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceServiceAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceServiceAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// ClientSecret Service account client secret (only returned on creation)
		ClientSecret *string `json:"client_secret,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiKeysForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApiKey
}

// Status returns HTTPResponse.Status
func (r ListApiKeysForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiKeysForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiKeyForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
}

// Status returns HTTPResponse.Status
func (r CreateApiKeyForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiKeyForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStoreAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StoreAgent
}

// Status returns HTTPResponse.Status
func (r ListStoreAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStoreAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoreAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoreAgent
}

// Status returns HTTPResponse.Status
func (r GetStoreAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoreAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStoreFunctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StoreFunction
}

// Status returns HTTPResponse.Status
func (r ListStoreFunctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStoreFunctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoreFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoreFunction
}

// Status returns HTTPResponse.Status
func (r GetStoreFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoreFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTraceIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTraceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTraceLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkspaceUser
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteWorkspaceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitation
}

// Status returns HTTPResponse.Status
func (r InviteWorkspaceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteWorkspaceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveWorkspaceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveWorkspaceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveWorkspaceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceUser
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Workspace
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r CreateWorspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeclineWorkspaceInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitation
}

// Status returns HTTPResponse.Status
func (r DeclineWorkspaceInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeclineWorkspaceInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptWorkspaceInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitationAccept
}

// Status returns HTTPResponse.Status
func (r AcceptWorkspaceInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptWorkspaceInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LeaveWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r LeaveWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LeaveWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkspaceQuotasRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Quotas
}

// Status returns HTTPResponse.Status
func (r WorkspaceQuotasRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkspaceQuotasRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAccountsWithResponse request returning *ListAccountsResponse
func (c *ClientWithResponses) ListAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAccountsResponse, error) {
	rsp, err := c.ListAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAccountsResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// DeleteAccountWithResponse request returning *DeleteAccountResponse
func (c *ClientWithResponses) DeleteAccountWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// UpdateAccountWithBodyWithResponse request with arbitrary body returning *UpdateAccountResponse
func (c *ClientWithResponses) UpdateAccountWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error) {
	rsp, err := c.UpdateAccountWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountWithResponse(ctx context.Context, accountId string, body UpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error) {
	rsp, err := c.UpdateAccount(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountResponse(rsp)
}

// ListAgentsWithResponse request returning *ListAgentsResponse
func (c *ClientWithResponses) ListAgentsWithResponse(ctx context.Context, params *ListAgentsParams, reqEditors ...RequestEditorFn) (*ListAgentsResponse, error) {
	rsp, err := c.ListAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentsResponse(rsp)
}

// CreateAgentWithBodyWithResponse request with arbitrary body returning *CreateAgentResponse
func (c *ClientWithResponses) CreateAgentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error) {
	rsp, err := c.CreateAgentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentResponse(rsp)
}

func (c *ClientWithResponses) CreateAgentWithResponse(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error) {
	rsp, err := c.CreateAgent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentResponse(rsp)
}

// DeleteAgentWithResponse request returning *DeleteAgentResponse
func (c *ClientWithResponses) DeleteAgentWithResponse(ctx context.Context, agentName string, params *DeleteAgentParams, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error) {
	rsp, err := c.DeleteAgent(ctx, agentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentResponse(rsp)
}

// GetAgentWithResponse request returning *GetAgentResponse
func (c *ClientWithResponses) GetAgentWithResponse(ctx context.Context, agentName string, params *GetAgentParams, reqEditors ...RequestEditorFn) (*GetAgentResponse, error) {
	rsp, err := c.GetAgent(ctx, agentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentResponse(rsp)
}

// UpdateAgentWithBodyWithResponse request with arbitrary body returning *UpdateAgentResponse
func (c *ClientWithResponses) UpdateAgentWithBodyWithResponse(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error) {
	rsp, err := c.UpdateAgentWithBody(ctx, agentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentResponse(rsp)
}

func (c *ClientWithResponses) UpdateAgentWithResponse(ctx context.Context, agentName string, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error) {
	rsp, err := c.UpdateAgent(ctx, agentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentResponse(rsp)
}

// ListAgentHistoryWithResponse request returning *ListAgentHistoryResponse
func (c *ClientWithResponses) ListAgentHistoryWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*ListAgentHistoryResponse, error) {
	rsp, err := c.ListAgentHistory(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentHistoryResponse(rsp)
}

// DeleteAgentHistoryWithResponse request returning *DeleteAgentHistoryResponse
func (c *ClientWithResponses) DeleteAgentHistoryWithResponse(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*DeleteAgentHistoryResponse, error) {
	rsp, err := c.DeleteAgentHistory(ctx, agentName, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentHistoryResponse(rsp)
}

// GetAgentHistoryWithResponse request returning *GetAgentHistoryResponse
func (c *ClientWithResponses) GetAgentHistoryWithResponse(ctx context.Context, agentName string, requestId string, reqEditors ...RequestEditorFn) (*GetAgentHistoryResponse, error) {
	rsp, err := c.GetAgentHistory(ctx, agentName, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentHistoryResponse(rsp)
}

// PutAgentHistoryWithBodyWithResponse request with arbitrary body returning *PutAgentHistoryResponse
func (c *ClientWithResponses) PutAgentHistoryWithBodyWithResponse(ctx context.Context, agentName string, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentHistoryResponse, error) {
	rsp, err := c.PutAgentHistoryWithBody(ctx, agentName, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentHistoryResponse(rsp)
}

func (c *ClientWithResponses) PutAgentHistoryWithResponse(ctx context.Context, agentName string, requestId string, body PutAgentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentHistoryResponse, error) {
	rsp, err := c.PutAgentHistory(ctx, agentName, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentHistoryResponse(rsp)
}

// GetAgentEnvironmentLogsWithResponse request returning *GetAgentEnvironmentLogsResponse
func (c *ClientWithResponses) GetAgentEnvironmentLogsWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetAgentEnvironmentLogsResponse, error) {
	rsp, err := c.GetAgentEnvironmentLogs(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentEnvironmentLogsResponse(rsp)
}

// GetAgentMetricsWithResponse request returning *GetAgentMetricsResponse
func (c *ClientWithResponses) GetAgentMetricsWithResponse(ctx context.Context, agentName string, params *GetAgentMetricsParams, reqEditors ...RequestEditorFn) (*GetAgentMetricsResponse, error) {
	rsp, err := c.GetAgentMetrics(ctx, agentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentMetricsResponse(rsp)
}

// CreateAgentReleaseWithResponse request returning *CreateAgentReleaseResponse
func (c *ClientWithResponses) CreateAgentReleaseWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*CreateAgentReleaseResponse, error) {
	rsp, err := c.CreateAgentRelease(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentReleaseResponse(rsp)
}

// GetAgentTraceIdsWithResponse request returning *GetAgentTraceIdsResponse
func (c *ClientWithResponses) GetAgentTraceIdsWithResponse(ctx context.Context, agentName string, params *GetAgentTraceIdsParams, reqEditors ...RequestEditorFn) (*GetAgentTraceIdsResponse, error) {
	rsp, err := c.GetAgentTraceIds(ctx, agentName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentTraceIdsResponse(rsp)
}

// GetConfigurationWithResponse request returning *GetConfigurationResponse
func (c *ClientWithResponses) GetConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationResponse, error) {
	rsp, err := c.GetConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvironmentWithResponse(ctx context.Context, environmentName string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironment(ctx, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// GetEnvironmentMetricsWithResponse request returning *GetEnvironmentMetricsResponse
func (c *ClientWithResponses) GetEnvironmentMetricsWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentMetricsResponse, error) {
	rsp, err := c.GetEnvironmentMetrics(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentMetricsResponse(rsp)
}

// ListFunctionsWithResponse request returning *ListFunctionsResponse
func (c *ClientWithResponses) ListFunctionsWithResponse(ctx context.Context, params *ListFunctionsParams, reqEditors ...RequestEditorFn) (*ListFunctionsResponse, error) {
	rsp, err := c.ListFunctions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionsResponse(rsp)
}

// CreateFunctionWithBodyWithResponse request with arbitrary body returning *CreateFunctionResponse
func (c *ClientWithResponses) CreateFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error) {
	rsp, err := c.CreateFunctionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionResponse(rsp)
}

func (c *ClientWithResponses) CreateFunctionWithResponse(ctx context.Context, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error) {
	rsp, err := c.CreateFunction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionResponse(rsp)
}

// DeleteFunctionWithResponse request returning *DeleteFunctionResponse
func (c *ClientWithResponses) DeleteFunctionWithResponse(ctx context.Context, functionName string, params *DeleteFunctionParams, reqEditors ...RequestEditorFn) (*DeleteFunctionResponse, error) {
	rsp, err := c.DeleteFunction(ctx, functionName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionResponse(rsp)
}

// GetFunctionWithResponse request returning *GetFunctionResponse
func (c *ClientWithResponses) GetFunctionWithResponse(ctx context.Context, functionName string, params *GetFunctionParams, reqEditors ...RequestEditorFn) (*GetFunctionResponse, error) {
	rsp, err := c.GetFunction(ctx, functionName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionResponse(rsp)
}

// UpdateFunctionWithBodyWithResponse request with arbitrary body returning *UpdateFunctionResponse
func (c *ClientWithResponses) UpdateFunctionWithBodyWithResponse(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error) {
	rsp, err := c.UpdateFunctionWithBody(ctx, functionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionResponse(rsp)
}

func (c *ClientWithResponses) UpdateFunctionWithResponse(ctx context.Context, functionName string, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error) {
	rsp, err := c.UpdateFunction(ctx, functionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionResponse(rsp)
}

// GetFunctionEnvironmentLogsWithResponse request returning *GetFunctionEnvironmentLogsResponse
func (c *ClientWithResponses) GetFunctionEnvironmentLogsWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetFunctionEnvironmentLogsResponse, error) {
	rsp, err := c.GetFunctionEnvironmentLogs(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionEnvironmentLogsResponse(rsp)
}

// GetFunctionMetricsWithResponse request returning *GetFunctionMetricsResponse
func (c *ClientWithResponses) GetFunctionMetricsWithResponse(ctx context.Context, functionName string, params *GetFunctionMetricsParams, reqEditors ...RequestEditorFn) (*GetFunctionMetricsResponse, error) {
	rsp, err := c.GetFunctionMetrics(ctx, functionName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionMetricsResponse(rsp)
}

// CreateFunctionReleaseWithResponse request returning *CreateFunctionReleaseResponse
func (c *ClientWithResponses) CreateFunctionReleaseWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*CreateFunctionReleaseResponse, error) {
	rsp, err := c.CreateFunctionRelease(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionReleaseResponse(rsp)
}

// GetFunctionTraceIdsWithResponse request returning *GetFunctionTraceIdsResponse
func (c *ClientWithResponses) GetFunctionTraceIdsWithResponse(ctx context.Context, functionName string, params *GetFunctionTraceIdsParams, reqEditors ...RequestEditorFn) (*GetFunctionTraceIdsResponse, error) {
	rsp, err := c.GetFunctionTraceIds(ctx, functionName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionTraceIdsResponse(rsp)
}

// ListAgentsHistoryWithResponse request returning *ListAgentsHistoryResponse
func (c *ClientWithResponses) ListAgentsHistoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAgentsHistoryResponse, error) {
	rsp, err := c.ListAgentsHistory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentsHistoryResponse(rsp)
}

// GetAgentsHistoryWithResponse request returning *GetAgentsHistoryResponse
func (c *ClientWithResponses) GetAgentsHistoryWithResponse(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*GetAgentsHistoryResponse, error) {
	rsp, err := c.GetAgentsHistory(ctx, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsHistoryResponse(rsp)
}

// ListIntegrationConnectionsWithResponse request returning *ListIntegrationConnectionsResponse
func (c *ClientWithResponses) ListIntegrationConnectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListIntegrationConnectionsResponse, error) {
	rsp, err := c.ListIntegrationConnections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIntegrationConnectionsResponse(rsp)
}

// CreateIntegrationConnectionWithBodyWithResponse request with arbitrary body returning *CreateIntegrationConnectionResponse
func (c *ClientWithResponses) CreateIntegrationConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIntegrationConnectionResponse, error) {
	rsp, err := c.CreateIntegrationConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIntegrationConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateIntegrationConnectionWithResponse(ctx context.Context, body CreateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIntegrationConnectionResponse, error) {
	rsp, err := c.CreateIntegrationConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIntegrationConnectionResponse(rsp)
}

// DeleteIntegrationConnectionWithResponse request returning *DeleteIntegrationConnectionResponse
func (c *ClientWithResponses) DeleteIntegrationConnectionWithResponse(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*DeleteIntegrationConnectionResponse, error) {
	rsp, err := c.DeleteIntegrationConnection(ctx, connectionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIntegrationConnectionResponse(rsp)
}

// GetIntegrationConnectionWithResponse request returning *GetIntegrationConnectionResponse
func (c *ClientWithResponses) GetIntegrationConnectionWithResponse(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*GetIntegrationConnectionResponse, error) {
	rsp, err := c.GetIntegrationConnection(ctx, connectionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationConnectionResponse(rsp)
}

// UpdateIntegrationConnectionWithBodyWithResponse request with arbitrary body returning *UpdateIntegrationConnectionResponse
func (c *ClientWithResponses) UpdateIntegrationConnectionWithBodyWithResponse(ctx context.Context, connectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIntegrationConnectionResponse, error) {
	rsp, err := c.UpdateIntegrationConnectionWithBody(ctx, connectionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIntegrationConnectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateIntegrationConnectionWithResponse(ctx context.Context, connectionName string, body UpdateIntegrationConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIntegrationConnectionResponse, error) {
	rsp, err := c.UpdateIntegrationConnection(ctx, connectionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIntegrationConnectionResponse(rsp)
}

// ListIntegrationConnectionModelsWithResponse request returning *ListIntegrationConnectionModelsResponse
func (c *ClientWithResponses) ListIntegrationConnectionModelsWithResponse(ctx context.Context, connectionName string, reqEditors ...RequestEditorFn) (*ListIntegrationConnectionModelsResponse, error) {
	rsp, err := c.ListIntegrationConnectionModels(ctx, connectionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIntegrationConnectionModelsResponse(rsp)
}

// GetIntegrationConnectionModelWithResponse request returning *GetIntegrationConnectionModelResponse
func (c *ClientWithResponses) GetIntegrationConnectionModelWithResponse(ctx context.Context, connectionName string, modelId string, reqEditors ...RequestEditorFn) (*GetIntegrationConnectionModelResponse, error) {
	rsp, err := c.GetIntegrationConnectionModel(ctx, connectionName, modelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationConnectionModelResponse(rsp)
}

// GetIntegrationWithResponse request returning *GetIntegrationResponse
func (c *ClientWithResponses) GetIntegrationWithResponse(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*GetIntegrationResponse, error) {
	rsp, err := c.GetIntegration(ctx, integrationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationResponse(rsp)
}

// ListIntegrationModelsWithResponse request returning *ListIntegrationModelsResponse
func (c *ClientWithResponses) ListIntegrationModelsWithResponse(ctx context.Context, integrationName string, reqEditors ...RequestEditorFn) (*ListIntegrationModelsResponse, error) {
	rsp, err := c.ListIntegrationModels(ctx, integrationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIntegrationModelsResponse(rsp)
}

// GetIntegrationModelWithResponse request returning *GetIntegrationModelResponse
func (c *ClientWithResponses) GetIntegrationModelWithResponse(ctx context.Context, integrationName string, modelId string, reqEditors ...RequestEditorFn) (*GetIntegrationModelResponse, error) {
	rsp, err := c.GetIntegrationModel(ctx, integrationName, modelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationModelResponse(rsp)
}

// ListLocationsWithResponse request returning *ListLocationsResponse
func (c *ClientWithResponses) ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error) {
	rsp, err := c.ListLocations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLocationsResponse(rsp)
}

// GetMetricsWithResponse request returning *GetMetricsResponse
func (c *ClientWithResponses) GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error) {
	rsp, err := c.GetMetrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsResponse(rsp)
}

// ListModelsWithResponse request returning *ListModelsResponse
func (c *ClientWithResponses) ListModelsWithResponse(ctx context.Context, params *ListModelsParams, reqEditors ...RequestEditorFn) (*ListModelsResponse, error) {
	rsp, err := c.ListModels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsResponse(rsp)
}

// CreateModelWithBodyWithResponse request with arbitrary body returning *CreateModelResponse
func (c *ClientWithResponses) CreateModelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModelResponse, error) {
	rsp, err := c.CreateModelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModelResponse(rsp)
}

func (c *ClientWithResponses) CreateModelWithResponse(ctx context.Context, body CreateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModelResponse, error) {
	rsp, err := c.CreateModel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModelResponse(rsp)
}

// DeleteModelWithResponse request returning *DeleteModelResponse
func (c *ClientWithResponses) DeleteModelWithResponse(ctx context.Context, modelName string, params *DeleteModelParams, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error) {
	rsp, err := c.DeleteModel(ctx, modelName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelResponse(rsp)
}

// GetModelWithResponse request returning *GetModelResponse
func (c *ClientWithResponses) GetModelWithResponse(ctx context.Context, modelName string, params *GetModelParams, reqEditors ...RequestEditorFn) (*GetModelResponse, error) {
	rsp, err := c.GetModel(ctx, modelName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelResponse(rsp)
}

// UpdateModelWithBodyWithResponse request with arbitrary body returning *UpdateModelResponse
func (c *ClientWithResponses) UpdateModelWithBodyWithResponse(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateModelResponse, error) {
	rsp, err := c.UpdateModelWithBody(ctx, modelName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateModelResponse(rsp)
}

func (c *ClientWithResponses) UpdateModelWithResponse(ctx context.Context, modelName string, body UpdateModelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateModelResponse, error) {
	rsp, err := c.UpdateModel(ctx, modelName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateModelResponse(rsp)
}

// GetModelEnvironmentLogsWithResponse request returning *GetModelEnvironmentLogsResponse
func (c *ClientWithResponses) GetModelEnvironmentLogsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelEnvironmentLogsResponse, error) {
	rsp, err := c.GetModelEnvironmentLogs(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelEnvironmentLogsResponse(rsp)
}

// GetModelMetricsWithResponse request returning *GetModelMetricsResponse
func (c *ClientWithResponses) GetModelMetricsWithResponse(ctx context.Context, modelName string, params *GetModelMetricsParams, reqEditors ...RequestEditorFn) (*GetModelMetricsResponse, error) {
	rsp, err := c.GetModelMetrics(ctx, modelName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelMetricsResponse(rsp)
}

// ReleaseModelWithResponse request returning *ReleaseModelResponse
func (c *ClientWithResponses) ReleaseModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ReleaseModelResponse, error) {
	rsp, err := c.ReleaseModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseModelResponse(rsp)
}

// GetModelTraceIdsWithResponse request returning *GetModelTraceIdsResponse
func (c *ClientWithResponses) GetModelTraceIdsWithResponse(ctx context.Context, modelName string, params *GetModelTraceIdsParams, reqEditors ...RequestEditorFn) (*GetModelTraceIdsResponse, error) {
	rsp, err := c.GetModelTraceIds(ctx, modelName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelTraceIdsResponse(rsp)
}

// ListPoliciesWithResponse request returning *ListPoliciesResponse
func (c *ClientWithResponses) ListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPoliciesResponse, error) {
	rsp, err := c.ListPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPoliciesResponse(rsp)
}

// CreatePolicyWithBodyWithResponse request with arbitrary body returning *CreatePolicyResponse
func (c *ClientWithResponses) CreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error) {
	rsp, err := c.CreatePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolicyResponse(rsp)
}

func (c *ClientWithResponses) CreatePolicyWithResponse(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error) {
	rsp, err := c.CreatePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolicyResponse(rsp)
}

// DeletePolicyWithResponse request returning *DeletePolicyResponse
func (c *ClientWithResponses) DeletePolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error) {
	rsp, err := c.DeletePolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyResponse(rsp)
}

// GetPolicyWithResponse request returning *GetPolicyResponse
func (c *ClientWithResponses) GetPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error) {
	rsp, err := c.GetPolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyResponse(rsp)
}

// UpdatePolicyWithBodyWithResponse request with arbitrary body returning *UpdatePolicyResponse
func (c *ClientWithResponses) UpdatePolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolicyResponse, error) {
	rsp, err := c.UpdatePolicyWithBody(ctx, policyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdatePolicyWithResponse(ctx context.Context, policyName string, body UpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePolicyResponse, error) {
	rsp, err := c.UpdatePolicy(ctx, policyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePolicyResponse(rsp)
}

// ListPrivateClustersWithResponse request returning *ListPrivateClustersResponse
func (c *ClientWithResponses) ListPrivateClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPrivateClustersResponse, error) {
	rsp, err := c.ListPrivateClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPrivateClustersResponse(rsp)
}

// CreatePrivateClusterWithResponse request returning *CreatePrivateClusterResponse
func (c *ClientWithResponses) CreatePrivateClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePrivateClusterResponse, error) {
	rsp, err := c.CreatePrivateCluster(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePrivateClusterResponse(rsp)
}

// DeletePrivateClusterWithResponse request returning *DeletePrivateClusterResponse
func (c *ClientWithResponses) DeletePrivateClusterWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*DeletePrivateClusterResponse, error) {
	rsp, err := c.DeletePrivateCluster(ctx, privateClusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePrivateClusterResponse(rsp)
}

// GetPrivateClusterWithResponse request returning *GetPrivateClusterResponse
func (c *ClientWithResponses) GetPrivateClusterWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*GetPrivateClusterResponse, error) {
	rsp, err := c.GetPrivateCluster(ctx, privateClusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrivateClusterResponse(rsp)
}

// UpdatePrivateClusterWithResponse request returning *UpdatePrivateClusterResponse
func (c *ClientWithResponses) UpdatePrivateClusterWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*UpdatePrivateClusterResponse, error) {
	rsp, err := c.UpdatePrivateCluster(ctx, privateClusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrivateClusterResponse(rsp)
}

// GetPrivateClusterHealthWithResponse request returning *GetPrivateClusterHealthResponse
func (c *ClientWithResponses) GetPrivateClusterHealthWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*GetPrivateClusterHealthResponse, error) {
	rsp, err := c.GetPrivateClusterHealth(ctx, privateClusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrivateClusterHealthResponse(rsp)
}

// UpdatePrivateClusterHealthWithResponse request returning *UpdatePrivateClusterHealthResponse
func (c *ClientWithResponses) UpdatePrivateClusterHealthWithResponse(ctx context.Context, privateClusterName string, reqEditors ...RequestEditorFn) (*UpdatePrivateClusterHealthResponse, error) {
	rsp, err := c.UpdatePrivateClusterHealth(ctx, privateClusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrivateClusterHealthResponse(rsp)
}

// ListAllPendingInvitationsWithResponse request returning *ListAllPendingInvitationsResponse
func (c *ClientWithResponses) ListAllPendingInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllPendingInvitationsResponse, error) {
	rsp, err := c.ListAllPendingInvitations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllPendingInvitationsResponse(rsp)
}

// GetWorkspaceServiceAccountsWithResponse request returning *GetWorkspaceServiceAccountsResponse
func (c *ClientWithResponses) GetWorkspaceServiceAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkspaceServiceAccountsResponse, error) {
	rsp, err := c.GetWorkspaceServiceAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceServiceAccountsResponse(rsp)
}

// CreateWorkspaceServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceServiceAccountResponse
func (c *ClientWithResponses) CreateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.CreateWorkspaceServiceAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceServiceAccountWithResponse(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.CreateWorkspaceServiceAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceServiceAccountResponse(rsp)
}

// DeleteWorkspaceServiceAccountWithResponse request returning *DeleteWorkspaceServiceAccountResponse
func (c *ClientWithResponses) DeleteWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceServiceAccountResponse, error) {
	rsp, err := c.DeleteWorkspaceServiceAccount(ctx, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceServiceAccountResponse(rsp)
}

// UpdateWorkspaceServiceAccountWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceServiceAccountResponse
func (c *ClientWithResponses) UpdateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.UpdateWorkspaceServiceAccountWithBody(ctx, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.UpdateWorkspaceServiceAccount(ctx, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceServiceAccountResponse(rsp)
}

// ListApiKeysForServiceAccountWithResponse request returning *ListApiKeysForServiceAccountResponse
func (c *ClientWithResponses) ListApiKeysForServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*ListApiKeysForServiceAccountResponse, error) {
	rsp, err := c.ListApiKeysForServiceAccount(ctx, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiKeysForServiceAccountResponse(rsp)
}

// CreateApiKeyForServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateApiKeyForServiceAccountResponse
func (c *ClientWithResponses) CreateApiKeyForServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error) {
	rsp, err := c.CreateApiKeyForServiceAccountWithBody(ctx, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyForServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error) {
	rsp, err := c.CreateApiKeyForServiceAccount(ctx, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyForServiceAccountResponse(rsp)
}

// DeleteApiKeyForServiceAccountWithResponse request returning *DeleteApiKeyForServiceAccountResponse
func (c *ClientWithResponses) DeleteApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*DeleteApiKeyForServiceAccountResponse, error) {
	rsp, err := c.DeleteApiKeyForServiceAccount(ctx, clientId, apiKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyForServiceAccountResponse(rsp)
}

// ListStoreAgentsWithResponse request returning *ListStoreAgentsResponse
func (c *ClientWithResponses) ListStoreAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreAgentsResponse, error) {
	rsp, err := c.ListStoreAgents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStoreAgentsResponse(rsp)
}

// GetStoreAgentWithResponse request returning *GetStoreAgentResponse
func (c *ClientWithResponses) GetStoreAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetStoreAgentResponse, error) {
	rsp, err := c.GetStoreAgent(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoreAgentResponse(rsp)
}

// ListStoreFunctionsWithResponse request returning *ListStoreFunctionsResponse
func (c *ClientWithResponses) ListStoreFunctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreFunctionsResponse, error) {
	rsp, err := c.ListStoreFunctions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStoreFunctionsResponse(rsp)
}

// GetStoreFunctionWithResponse request returning *GetStoreFunctionResponse
func (c *ClientWithResponses) GetStoreFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetStoreFunctionResponse, error) {
	rsp, err := c.GetStoreFunction(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoreFunctionResponse(rsp)
}

// GetTraceIdsWithResponse request returning *GetTraceIdsResponse
func (c *ClientWithResponses) GetTraceIdsWithResponse(ctx context.Context, params *GetTraceIdsParams, reqEditors ...RequestEditorFn) (*GetTraceIdsResponse, error) {
	rsp, err := c.GetTraceIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceIdsResponse(rsp)
}

// GetTraceWithResponse request returning *GetTraceResponse
func (c *ClientWithResponses) GetTraceWithResponse(ctx context.Context, traceId string, reqEditors ...RequestEditorFn) (*GetTraceResponse, error) {
	rsp, err := c.GetTrace(ctx, traceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceResponse(rsp)
}

// GetTraceLogsWithResponse request returning *GetTraceLogsResponse
func (c *ClientWithResponses) GetTraceLogsWithResponse(ctx context.Context, traceId string, params *GetTraceLogsParams, reqEditors ...RequestEditorFn) (*GetTraceLogsResponse, error) {
	rsp, err := c.GetTraceLogs(ctx, traceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceLogsResponse(rsp)
}

// ListWorkspaceUsersWithResponse request returning *ListWorkspaceUsersResponse
func (c *ClientWithResponses) ListWorkspaceUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error) {
	rsp, err := c.ListWorkspaceUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceUsersResponse(rsp)
}

// InviteWorkspaceUserWithBodyWithResponse request with arbitrary body returning *InviteWorkspaceUserResponse
func (c *ClientWithResponses) InviteWorkspaceUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error) {
	rsp, err := c.InviteWorkspaceUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteWorkspaceUserResponse(rsp)
}

func (c *ClientWithResponses) InviteWorkspaceUserWithResponse(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error) {
	rsp, err := c.InviteWorkspaceUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteWorkspaceUserResponse(rsp)
}

// RemoveWorkspaceUserWithResponse request returning *RemoveWorkspaceUserResponse
func (c *ClientWithResponses) RemoveWorkspaceUserWithResponse(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*RemoveWorkspaceUserResponse, error) {
	rsp, err := c.RemoveWorkspaceUser(ctx, subOrEmail, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveWorkspaceUserResponse(rsp)
}

// UpdateWorkspaceUserRoleWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceUserRoleResponse
func (c *ClientWithResponses) UpdateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error) {
	rsp, err := c.UpdateWorkspaceUserRoleWithBody(ctx, subOrEmail, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceUserRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceUserRoleWithResponse(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error) {
	rsp, err := c.UpdateWorkspaceUserRole(ctx, subOrEmail, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceUserRoleResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// CreateWorspaceWithBodyWithResponse request with arbitrary body returning *CreateWorspaceResponse
func (c *ClientWithResponses) CreateWorspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error) {
	rsp, err := c.CreateWorspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorspaceWithResponse(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error) {
	rsp, err := c.CreateWorspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorspaceResponse(rsp)
}

// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, workspaceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, workspaceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// DeclineWorkspaceInvitationWithResponse request returning *DeclineWorkspaceInvitationResponse
func (c *ClientWithResponses) DeclineWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeclineWorkspaceInvitationResponse, error) {
	rsp, err := c.DeclineWorkspaceInvitation(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeclineWorkspaceInvitationResponse(rsp)
}

// AcceptWorkspaceInvitationWithResponse request returning *AcceptWorkspaceInvitationResponse
func (c *ClientWithResponses) AcceptWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*AcceptWorkspaceInvitationResponse, error) {
	rsp, err := c.AcceptWorkspaceInvitation(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptWorkspaceInvitationResponse(rsp)
}

// LeaveWorkspaceWithResponse request returning *LeaveWorkspaceResponse
func (c *ClientWithResponses) LeaveWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*LeaveWorkspaceResponse, error) {
	rsp, err := c.LeaveWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLeaveWorkspaceResponse(rsp)
}

// WorkspaceQuotasRequestWithResponse request returning *WorkspaceQuotasRequestResponse
func (c *ClientWithResponses) WorkspaceQuotasRequestWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*WorkspaceQuotasRequestResponse, error) {
	rsp, err := c.WorkspaceQuotasRequest(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkspaceQuotasRequestResponse(rsp)
}

// ParseListAccountsResponse parses an HTTP response from a ListAccountsWithResponse call
func ParseListAccountsResponse(rsp *http.Response) (*ListAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func ParseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAccountResponse parses an HTTP response from a UpdateAccountWithResponse call
func ParseUpdateAccountResponse(rsp *http.Response) (*UpdateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAgentsResponse parses an HTTP response from a ListAgentsWithResponse call
func ParseListAgentsResponse(rsp *http.Response) (*ListAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAgentResponse parses an HTTP response from a CreateAgentWithResponse call
func ParseCreateAgentResponse(rsp *http.Response) (*CreateAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAgentResponse parses an HTTP response from a DeleteAgentWithResponse call
func ParseDeleteAgentResponse(rsp *http.Response) (*DeleteAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentResponse parses an HTTP response from a GetAgentWithResponse call
func ParseGetAgentResponse(rsp *http.Response) (*GetAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAgentResponse parses an HTTP response from a UpdateAgentWithResponse call
func ParseUpdateAgentResponse(rsp *http.Response) (*UpdateAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAgentHistoryResponse parses an HTTP response from a ListAgentHistoryWithResponse call
func ParseListAgentHistoryResponse(rsp *http.Response) (*ListAgentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AgentHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAgentHistoryResponse parses an HTTP response from a DeleteAgentHistoryWithResponse call
func ParseDeleteAgentHistoryResponse(rsp *http.Response) (*DeleteAgentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentHistoryResponse parses an HTTP response from a GetAgentHistoryWithResponse call
func ParseGetAgentHistoryResponse(rsp *http.Response) (*GetAgentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentHistoryResponse parses an HTTP response from a PutAgentHistoryWithResponse call
func ParsePutAgentHistoryResponse(rsp *http.Response) (*PutAgentHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentEnvironmentLogsResponse parses an HTTP response from a GetAgentEnvironmentLogsWithResponse call
func ParseGetAgentEnvironmentLogsResponse(rsp *http.Response) (*GetAgentEnvironmentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentEnvironmentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentMetricsResponse parses an HTTP response from a GetAgentMetricsWithResponse call
func ParseGetAgentMetricsResponse(rsp *http.Response) (*GetAgentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceEnvironmentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAgentReleaseResponse parses an HTTP response from a CreateAgentReleaseWithResponse call
func ParseCreateAgentReleaseResponse(rsp *http.Response) (*CreateAgentReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAgentReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentRelease
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentTraceIdsResponse parses an HTTP response from a GetAgentTraceIdsWithResponse call
func ParseGetAgentTraceIdsResponse(rsp *http.Response) (*GetAgentTraceIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentTraceIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceIdsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigurationResponse parses an HTTP response from a GetConfigurationWithResponse call
func ParseGetConfigurationResponse(rsp *http.Response) (*GetConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentMetricsResponse parses an HTTP response from a GetEnvironmentMetricsWithResponse call
func ParseGetEnvironmentMetricsResponse(rsp *http.Response) (*GetEnvironmentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFunctionsResponse parses an HTTP response from a ListFunctionsWithResponse call
func ParseListFunctionsResponse(rsp *http.Response) (*ListFunctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFunctionResponse parses an HTTP response from a CreateFunctionWithResponse call
func ParseCreateFunctionResponse(rsp *http.Response) (*CreateFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFunctionResponse parses an HTTP response from a DeleteFunctionWithResponse call
func ParseDeleteFunctionResponse(rsp *http.Response) (*DeleteFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionResponse parses an HTTP response from a GetFunctionWithResponse call
func ParseGetFunctionResponse(rsp *http.Response) (*GetFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateFunctionResponse parses an HTTP response from a UpdateFunctionWithResponse call
func ParseUpdateFunctionResponse(rsp *http.Response) (*UpdateFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionEnvironmentLogsResponse parses an HTTP response from a GetFunctionEnvironmentLogsWithResponse call
func ParseGetFunctionEnvironmentLogsResponse(rsp *http.Response) (*GetFunctionEnvironmentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionEnvironmentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionMetricsResponse parses an HTTP response from a GetFunctionMetricsWithResponse call
func ParseGetFunctionMetricsResponse(rsp *http.Response) (*GetFunctionMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceEnvironmentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFunctionReleaseResponse parses an HTTP response from a CreateFunctionReleaseWithResponse call
func ParseCreateFunctionReleaseResponse(rsp *http.Response) (*CreateFunctionReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionRelease
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionTraceIdsResponse parses an HTTP response from a GetFunctionTraceIdsWithResponse call
func ParseGetFunctionTraceIdsResponse(rsp *http.Response) (*GetFunctionTraceIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionTraceIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceIdsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAgentsHistoryResponse parses an HTTP response from a ListAgentsHistoryWithResponse call
func ParseListAgentsHistoryResponse(rsp *http.Response) (*ListAgentsHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AgentHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsHistoryResponse parses an HTTP response from a GetAgentsHistoryWithResponse call
func ParseGetAgentsHistoryResponse(rsp *http.Response) (*GetAgentsHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AgentHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListIntegrationConnectionsResponse parses an HTTP response from a ListIntegrationConnectionsWithResponse call
func ParseListIntegrationConnectionsResponse(rsp *http.Response) (*ListIntegrationConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIntegrationConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IntegrationConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIntegrationConnectionResponse parses an HTTP response from a CreateIntegrationConnectionWithResponse call
func ParseCreateIntegrationConnectionResponse(rsp *http.Response) (*CreateIntegrationConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIntegrationConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIntegrationConnectionResponse parses an HTTP response from a DeleteIntegrationConnectionWithResponse call
func ParseDeleteIntegrationConnectionResponse(rsp *http.Response) (*DeleteIntegrationConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIntegrationConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIntegrationConnectionResponse parses an HTTP response from a GetIntegrationConnectionWithResponse call
func ParseGetIntegrationConnectionResponse(rsp *http.Response) (*GetIntegrationConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIntegrationConnectionResponse parses an HTTP response from a UpdateIntegrationConnectionWithResponse call
func ParseUpdateIntegrationConnectionResponse(rsp *http.Response) (*UpdateIntegrationConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIntegrationConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListIntegrationConnectionModelsResponse parses an HTTP response from a ListIntegrationConnectionModelsWithResponse call
func ParseListIntegrationConnectionModelsResponse(rsp *http.Response) (*ListIntegrationConnectionModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIntegrationConnectionModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIntegrationConnectionModelResponse parses an HTTP response from a GetIntegrationConnectionModelWithResponse call
func ParseGetIntegrationConnectionModelResponse(rsp *http.Response) (*GetIntegrationConnectionModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationConnectionModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIntegrationResponse parses an HTTP response from a GetIntegrationWithResponse call
func ParseGetIntegrationResponse(rsp *http.Response) (*GetIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListIntegrationModelsResponse parses an HTTP response from a ListIntegrationModelsWithResponse call
func ParseListIntegrationModelsResponse(rsp *http.Response) (*ListIntegrationModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIntegrationModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIntegrationModelResponse parses an HTTP response from a GetIntegrationModelWithResponse call
func ParseGetIntegrationModelResponse(rsp *http.Response) (*GetIntegrationModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListLocationsResponse parses an HTTP response from a ListLocationsWithResponse call
func ParseListLocationsResponse(rsp *http.Response) (*ListLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LocationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMetricsResponse parses an HTTP response from a GetMetricsWithResponse call
func ParseGetMetricsResponse(rsp *http.Response) (*GetMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelsResponse parses an HTTP response from a ListModelsWithResponse call
func ParseListModelsResponse(rsp *http.Response) (*ListModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateModelResponse parses an HTTP response from a CreateModelWithResponse call
func ParseCreateModelResponse(rsp *http.Response) (*CreateModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelResponse parses an HTTP response from a DeleteModelWithResponse call
func ParseDeleteModelResponse(rsp *http.Response) (*DeleteModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelResponse parses an HTTP response from a GetModelWithResponse call
func ParseGetModelResponse(rsp *http.Response) (*GetModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateModelResponse parses an HTTP response from a UpdateModelWithResponse call
func ParseUpdateModelResponse(rsp *http.Response) (*UpdateModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelEnvironmentLogsResponse parses an HTTP response from a GetModelEnvironmentLogsWithResponse call
func ParseGetModelEnvironmentLogsResponse(rsp *http.Response) (*GetModelEnvironmentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelEnvironmentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelMetricsResponse parses an HTTP response from a GetModelMetricsWithResponse call
func ParseGetModelMetricsResponse(rsp *http.Response) (*GetModelMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceEnvironmentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReleaseModelResponse parses an HTTP response from a ReleaseModelWithResponse call
func ParseReleaseModelResponse(rsp *http.Response) (*ReleaseModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleaseModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelRelease
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelTraceIdsResponse parses an HTTP response from a GetModelTraceIdsWithResponse call
func ParseGetModelTraceIdsResponse(rsp *http.Response) (*GetModelTraceIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelTraceIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceIdsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPoliciesResponse parses an HTTP response from a ListPoliciesWithResponse call
func ParseListPoliciesResponse(rsp *http.Response) (*ListPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePolicyResponse parses an HTTP response from a CreatePolicyWithResponse call
func ParseCreatePolicyResponse(rsp *http.Response) (*CreatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePolicyResponse parses an HTTP response from a DeletePolicyWithResponse call
func ParseDeletePolicyResponse(rsp *http.Response) (*DeletePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicyResponse parses an HTTP response from a GetPolicyWithResponse call
func ParseGetPolicyResponse(rsp *http.Response) (*GetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePolicyResponse parses an HTTP response from a UpdatePolicyWithResponse call
func ParseUpdatePolicyResponse(rsp *http.Response) (*UpdatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPrivateClustersResponse parses an HTTP response from a ListPrivateClustersWithResponse call
func ParseListPrivateClustersResponse(rsp *http.Response) (*ListPrivateClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPrivateClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrivateCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePrivateClusterResponse parses an HTTP response from a CreatePrivateClusterWithResponse call
func ParseCreatePrivateClusterResponse(rsp *http.Response) (*CreatePrivateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePrivateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePrivateClusterResponse parses an HTTP response from a DeletePrivateClusterWithResponse call
func ParseDeletePrivateClusterResponse(rsp *http.Response) (*DeletePrivateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePrivateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPrivateClusterResponse parses an HTTP response from a GetPrivateClusterWithResponse call
func ParseGetPrivateClusterResponse(rsp *http.Response) (*GetPrivateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrivateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePrivateClusterResponse parses an HTTP response from a UpdatePrivateClusterWithResponse call
func ParseUpdatePrivateClusterResponse(rsp *http.Response) (*UpdatePrivateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePrivateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPrivateClusterHealthResponse parses an HTTP response from a GetPrivateClusterHealthWithResponse call
func ParseGetPrivateClusterHealthResponse(rsp *http.Response) (*GetPrivateClusterHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrivateClusterHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdatePrivateClusterHealthResponse parses an HTTP response from a UpdatePrivateClusterHealthWithResponse call
func ParseUpdatePrivateClusterHealthResponse(rsp *http.Response) (*UpdatePrivateClusterHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePrivateClusterHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAllPendingInvitationsResponse parses an HTTP response from a ListAllPendingInvitationsWithResponse call
func ParseListAllPendingInvitationsResponse(rsp *http.Response) (*ListAllPendingInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllPendingInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PendingInvitationRender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceServiceAccountsResponse parses an HTTP response from a GetWorkspaceServiceAccountsWithResponse call
func ParseGetWorkspaceServiceAccountsResponse(rsp *http.Response) (*GetWorkspaceServiceAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceServiceAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceServiceAccountResponse parses an HTTP response from a CreateWorkspaceServiceAccountWithResponse call
func ParseCreateWorkspaceServiceAccountResponse(rsp *http.Response) (*CreateWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// ClientSecret Service account client secret (only returned on creation)
			ClientSecret *string `json:"client_secret,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceServiceAccountResponse parses an HTTP response from a DeleteWorkspaceServiceAccountWithResponse call
func ParseDeleteWorkspaceServiceAccountResponse(rsp *http.Response) (*DeleteWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceServiceAccountResponse parses an HTTP response from a UpdateWorkspaceServiceAccountWithResponse call
func ParseUpdateWorkspaceServiceAccountResponse(rsp *http.Response) (*UpdateWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApiKeysForServiceAccountResponse parses an HTTP response from a ListApiKeysForServiceAccountWithResponse call
func ParseListApiKeysForServiceAccountResponse(rsp *http.Response) (*ListApiKeysForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiKeysForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiKeyForServiceAccountResponse parses an HTTP response from a CreateApiKeyForServiceAccountWithResponse call
func ParseCreateApiKeyForServiceAccountResponse(rsp *http.Response) (*CreateApiKeyForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiKeyForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeyForServiceAccountResponse parses an HTTP response from a DeleteApiKeyForServiceAccountWithResponse call
func ParseDeleteApiKeyForServiceAccountResponse(rsp *http.Response) (*DeleteApiKeyForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListStoreAgentsResponse parses an HTTP response from a ListStoreAgentsWithResponse call
func ParseListStoreAgentsResponse(rsp *http.Response) (*ListStoreAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStoreAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StoreAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStoreAgentResponse parses an HTTP response from a GetStoreAgentWithResponse call
func ParseGetStoreAgentResponse(rsp *http.Response) (*GetStoreAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoreAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoreAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListStoreFunctionsResponse parses an HTTP response from a ListStoreFunctionsWithResponse call
func ParseListStoreFunctionsResponse(rsp *http.Response) (*ListStoreFunctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStoreFunctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StoreFunction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStoreFunctionResponse parses an HTTP response from a GetStoreFunctionWithResponse call
func ParseGetStoreFunctionResponse(rsp *http.Response) (*GetStoreFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoreFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoreFunction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTraceIdsResponse parses an HTTP response from a GetTraceIdsWithResponse call
func ParseGetTraceIdsResponse(rsp *http.Response) (*GetTraceIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTraceResponse parses an HTTP response from a GetTraceWithResponse call
func ParseGetTraceResponse(rsp *http.Response) (*GetTraceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTraceLogsResponse parses an HTTP response from a GetTraceLogsWithResponse call
func ParseGetTraceLogsResponse(rsp *http.Response) (*GetTraceLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWorkspaceUsersResponse parses an HTTP response from a ListWorkspaceUsersWithResponse call
func ParseListWorkspaceUsersResponse(rsp *http.Response) (*ListWorkspaceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkspaceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInviteWorkspaceUserResponse parses an HTTP response from a InviteWorkspaceUserWithResponse call
func ParseInviteWorkspaceUserResponse(rsp *http.Response) (*InviteWorkspaceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InviteWorkspaceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveWorkspaceUserResponse parses an HTTP response from a RemoveWorkspaceUserWithResponse call
func ParseRemoveWorkspaceUserResponse(rsp *http.Response) (*RemoveWorkspaceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveWorkspaceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkspaceUserRoleResponse parses an HTTP response from a UpdateWorkspaceUserRoleWithResponse call
func ParseUpdateWorkspaceUserRoleResponse(rsp *http.Response) (*UpdateWorkspaceUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorspaceResponse parses an HTTP response from a CreateWorspaceWithResponse call
func ParseCreateWorspaceResponse(rsp *http.Response) (*CreateWorspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeclineWorkspaceInvitationResponse parses an HTTP response from a DeclineWorkspaceInvitationWithResponse call
func ParseDeclineWorkspaceInvitationResponse(rsp *http.Response) (*DeclineWorkspaceInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeclineWorkspaceInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptWorkspaceInvitationResponse parses an HTTP response from a AcceptWorkspaceInvitationWithResponse call
func ParseAcceptWorkspaceInvitationResponse(rsp *http.Response) (*AcceptWorkspaceInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptWorkspaceInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitationAccept
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLeaveWorkspaceResponse parses an HTTP response from a LeaveWorkspaceWithResponse call
func ParseLeaveWorkspaceResponse(rsp *http.Response) (*LeaveWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LeaveWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkspaceQuotasRequestResponse parses an HTTP response from a WorkspaceQuotasRequestWithResponse call
func ParseWorkspaceQuotasRequestResponse(rsp *http.Response) (*WorkspaceQuotasRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkspaceQuotasRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Quotas
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9X3PbNvboV8Ho3pk2M1o7e3d/D+uZfXCdNPWt03gd9+ah28nAJCRhTRIsCMrRevzd",
	"7+AfCZIHIChLspP6KY4IHADn/zk4AO5nCctLVpBCVLOT+1mVrEiO1Z+nScLqQsg/cZZ9WMxOfruf/W9O",
	"FrOT2f86brsdmz7H74nAKRZ49jAPNzSQP5YkUW1LzkrCBSVq3NyCObl/mM8q2ejk/uHh4ff5LCVVwmkp",
	"KCtmJ80E5zOxKcnsZMZu/kMSMXuYz9wRTu7hfurjvDc4TlNOqmrY6QeaZbRYItsAGBSnOS2Arqf69/mM",
	"CpJXelmmM+Ycb2TfpOacFMlm2PvMfmk6VYLTYil7sbuC8GGXD+pnoH0lsKiBGX7UvwM9BP7ymabDHtf4",
	"Czp/M+zxABFjSTQb9dCifu4TgKwtK4Y46Ixx8la3fJi7HBPs9bZYU86KnBTC4VXLYmGWlZM1DOtFo2qE",
	"Kg8yvag5W2Fa+KAl8iNKWLGgy5pj9a2Ps06/Ppg37f8QWyCxIggryBIsrgjasBrd4UIgwRBbE85pSlSz",
	"lCxwnQnECgKxBinwTUYA3vi0ImJFuDOUXgStkO3TgLthLCO4kPAKnBOA0VYEyS/duQtmYAo2FdFVENOO",
	"lI7zgyYcIM3q60+0Eoxv4vXnNc3Jj5RkaQVoRRwQIoUgmEQAed4WKRLU16GREKhj89E/YiO+vb769ynY",
	"NfhTPSEkc/JHTSoBqqcr/Q1UUUp+uQC1IBde1IR15xyR5QnidVHQYjlHVZ0kpKrmaIFph98dzcrY7RDa",
	"L3V+Q7hk9lwanIokrEgrRCXLs1vF9ywvMyK0iCp0t9BpIciScAn+jvHbqsSJR6Saz45QpaTM2EaR94Zk",
	"rFhWsHgBlrjff2V43yeJHdp6mHoIrlluz2RM5nLOGWA238qfUU6qCi/BfrCG+sXRTou6SLSm5RqpEJgS",
	"c5wTQTjATZftt+fKuFV986NZ5hCo/YLqiqTSxNxSgegCYfXHHa7UhyeQB/3LQBQ2JZlLAydHiCCe17Rc",
	"kYzgivh4mevPc40WwQxzI2xEb8FZrqbhKGDZDBdMmtIBy8v2gN/H6ZIWHRgK8N2KJivX8ld2Qh5KgF6E",
	"oIVyP/pznATdi0DrqseZSun/ecIH3HGp4my48iKDXpRVSe1vAOIsA43aNysl1QWtFApylpJsOOp7+bPX",
	"1nJSsopaHyM03lXbUikExsl5CmkExgmi6QSdL31nuqAJ7uLEIW5JfybbO0GhpirM8TtMzcC9eZcU3RIw",
	"nCJfSspJ9Rnyxt8Y5xvVhaAZUk31D9/TAhm99AqCCvknZhKIpnMpQpwITsmaSL2mJFZK0+nl+UQjtGDc",
	"9vQtsapvhp1/rQhHVa1ohmhKCkEX1BNB1jefYVX60fRXX2MY6IIVy79kdE1SO2G1AKwMkAy1fyA4zygc",
	"30sn8L3EGhTfy4/KZKgG0V6ngQe4mmed8GsYogejs4QVghawW3zWfgunB1hdSBYBQdhPQQglp2ssyAXT",
	"ogq5HroFymwTlOMCL0mK7qhYoRtNDSSXhgXjoeEgLd+E7NASOPH4dtYbgwOKkLPmc3t0x8qf8aC5dzif",
	"iwVLhOkDy0MIQ1UIRdHs3CIc5GhjQOGR+mp9wNEtvwOT/aD+wFk3bVE1+sksuQ/2lowaMjnlrrSBmPSm",
	"Jt6qD9LBS2ml/mz8FjAnscjwmvFxe26aSW0vXU49tzNWFCTOITgHe1nvoGTpNcnLDAsyBuiybWqzVSXL",
	"aGJQHO6q2zWjan1wltWVjVWC2lP6KpedPspJkfYyH533lWkmBRcX6Q37AlgY/QFJZwmkVkX4mvCMVJXm",
	"kVFu6rcHmeltbE6EFcYXbiPXCt3RLEM3BOU4Jeh7crQ8QilZk4yV8vsclZyltSL3qzkixYLxRNq+vM4E",
	"LTOCLPUQlgMk5AhQkXHZz6kpT2dpmpVGkPPemccWGwb9mP5RiSjA3XA7NSgbXZHyH4Z+uf7QKDR3tn3y",
	"0GJBOCkS8i5jNzgbDUocz2YM47ACdxca1uPbaQZoUloBAq6YMn/SF1thnt5hThBeY5op1Sux54jKYHqw",
	"p6uH0jlhLU/i76/ijbLprqaluydlPUfLsn4VZ6V/bE3CMJdQRS81yoQbtAL2ezwD87XsrNj5jm2uNJml",
	"KfsrttPPVAQg3lLx6D2VhQNsjtaEbxDNS8YFLkSjJ5rNizvGb7VbvWE1NxOIDPWuV0Ql0+TXXY0USkn+",
	"TAVqv8/VEBaWHOGGoARnms/VQLhAdm8vistV2sESo0mAzqKiCtvNm39riOxPwTWkO1QWrhlwX4m4uAFC",
	"+NxZOi4oRw1xnJ9HWLpZWoe3cYEuLt5DOLyFJN+KUF92WxUdraEdBQNF3QG5ahYPCpe7zoGE7UW8dpUY",
	"bBX1WG6wmwaVvpJdjweiLxPaX4jaXlpynP9QJ7cEYICmAbrRLYYhbg1nKmrP/oJvE6ptXKitjLFtnGF7",
	"SEyb+X8UGEoXtOurVINBmcuacDCtcqo/ILO5itI2qzVYRvk/r4Es0v+8juv8D6jzP2I7/wPq/I+IzhA2",
	"weh7OIDTDDntDhWPgbP0R2b+5sGFJU3bqCQQVO2UUij90+hxJ0MCKQX3c3CmcGLtcfmDhEPawh3VtBlM",
	"PJoEY8ruTbvtTWG6xGrBCyxIkXjT5OazkyXvEnip4tVGk4yxZ1/nPswNhEZFRfXWrR/ms5X95ZLwM0mx",
	"6eMr3Te1u5kARE+bPL8iVckKyNu0LWzoRzMq9LZGE2t7twcCuwPWUbGpeYj6eotg49sg2MTAWPhi259s",
	"SGtaOKEtLfpgHxnaNpCClRahZYQrHsYhQLSfnt3a2U5mSqsyw5tfwGhQbxGbJl7VkOEbklWxFulCt/ZG",
	"oOFt6UDl0aem6ig6bfc+kKrrzVeX7xrjc9lB4WCSfVWoAMBDgMrT/N4XZm5S9FBjtMZZTUDn0bgt10zg",
	"bIvuguakEjgvvX3bFrHMPp745KRiNU8AlaYitZHepk2/asLfoW2mnIRBUhVwgDlNcGZ9QjNslrUTR9pA",
	"ZZvw1qkqzhiZnWkD4DJM27a+KW6aA1fYBe+YukeMgkrCUdLxkZzVlFUUeAlDF0VMXU9ZTVlG1DiBFYHc",
	"DxfjXLCl4ifdEHFSclIRaaGXCGsGmCOxwgIluJAxOy0qgQtBsdClcM2ejpO3qRCudN9gKvyZ5m4VpsYS",
	"t9paTMnaQluJ3nKFRDdAdyvC9XZuH52IVuZ/KgvWxewNrsivPINzRPIjqnlmXQYN2Xg8ZXcCk0rkzxdI",
	"8JrMIUByuo179YhK+dH5eVHvTaZqUvozqRo/h0qjGmrsKYcaAd2LwO2zp4ADpMVnLJfmupDwgSC0UF+V",
	"nrwkvKJSOyVkGJBwIjXWDxuYxepKqmCpdfmaJgRhfZoK3a0YMl0V/qwahohSl+m2Q5iuI0NAlLkkRUqL",
	"5XmxpqIJMA7sypMc08xTgKe/QQWEcsYwtmzlHlgeyjIowXd2gdSXvXvuBt+INgiXmrMdI4ZEp0lCSiAy",
	"BmBj3XS+C4x3EBGidoOWSJa7IkUKGrNRXO2Oj07BDFczrhSvUS4MVgvAiz5v+j+eN7cY3qGUA+wNEZiO",
	"B8YDmJ/6AKaQ/9wvz+YTutnshuQLnNNs8xl2GFRX3cIbzC/pmhSh/qqBt3uw3HhLtd2np19XDTf1Q5mU",
	"VsWNZVOKkf4eFRmzuE8AZ3qnaZqAnAL0vKCVyiTWDctU1pd1NU0gEpY9P5tYLRCdyWYg6Ii9mH4B41BV",
	"shQJ02LcLeqULvmT7qrZJjqzrpsDxw5rVVEqQ0BWCM6yCq3YHcK9YETVAuIiVQ4OSU0dks1HSrdGcKqT",
	"Ha8Otr2k1+TfT9LfL7zJWYNCJ6saU83V6zVCgbHe8bXW3dV4OaJpoIIyNVCma8cUle84LuXvVSbdVLZA",
	"FxOz4D2kelntPf5yzW6Jf6JNg8iJ9sEONn84LuoMcyoANn/nfAQ9hbIGfQz5M5S/ZLUAe3zQv4MZU4kw",
	"BfHDmvAPHgBXUCsIXCVICe0XkBJOuMLJPJ3jG3bwM+CViWCuA+ztttHUtTWVNv6ZI6VATArKJkrniIjk",
	"CCLQEG4VM/g03uosbZI4dHp6RcJnHZRGCG9dT6/qz1xFES/QOg/nyu5431YmVXa3R6Np2Ksetx8eVLpC",
	"HZ01qc5GAzNutggj1fAgyXfggDyw+3o9zKF9V6Gmg5v+EoTntNDZxyRjFanEIKsnmDb3qNm7aLPYN1iC",
	"Ytphkt7Td9V2e71yzuajkxAFEowKOkmfchFBZxxGvnXMf/F4CSuCM7HahK8kAbBh+knuLRhIWbrw9eUE",
	"pxt1iLMuWrSA8pThSvykhjpbkeT2msavvC7oHzUJ7O8KKuo0Gpxt/5T0z1ixnDZp2+EpZ71V7n2OqEB5",
	"XQmpKzUpfdc5eZOi/WTo9/Yg5itthtldURksePcjJl0K0sfi1DtBBgC0QtI7pR3DoQhwBIVv/6qZwMEg",
	"+A/d4mE+u+och+/fB9N86zsDsJFrO3jrzGpo18jp9+vVRZwRNJfV2BPm0lWVqsFXenDVq3FUlzapHX5T",
	"yvVS7el0DtRGXE8rigiSqdqCTsOoi8NDjF/vEGKg0GJUxPLDRu+1jTGcinrQjTSTamvOw20cAB0NdKyC",
	"wgI8LVK4RsA3WVykE0oArBM99TAgRhUtllm7NeVmfr4nNkhzfp1Dpw9e7fQUoXY8fjGYqSb3FfZiwlCv",
	"brFpS7Wd8nK1dUGNu10YXU/jcm/EnCFhemSFDjjtfRToxOPnUfU509cjZCx8FXHy/do2dFhFdW4YZbS3",
	"ahnWmnrqF2wJ1gcZHbBr4fdegnHGCtEpD16CmzBkTeBE3kfzBQQQV2Ao/cbmc3AiIELb2wH6M1OrAi6Q",
	"wN1TWj1Phy8reI6YL2tdcCUYKnGl/tW3XDY0sncVjFzFkucYOuyjY2/10YaDXfhhuKRYe6bulqisMaf4",
	"JiOVDmqE3WVpRzlCH1eszlLpXWOUmT2fn+sbwgsiSIXeFuv/h/UJ6JE7Y2gOcp2c0xuW3Mr4V7ZoJLuz",
	"1AEbanfhknFfroVx0YZqqgTHWFbXs3O40nNplgqWsnrZCcisyyK7HKEPRbYxN9Qt+kygcpxvgiuRIT8t",
	"SFVdcnbjQVDTBpWyUZcqDjUUiF6M4bo+tsbWM4gtdRySwDuiVWLSalFOjFB4JqCizmI5iWpKyXlo5rmG",
	"b0WapLahVAxPQRrlI3AHSOC2Juu1Nb1C2kW6UZcsvSJS6VJWXBJOmUcT5LSgeZ0jnKtoXbKh9PxVqK5U",
	"JK5UDWlGE6wvCeEkx9JRTQRdE3T64/XbKzmzBGfkL4L95b+EM5SShFbmYG+OUzAuzfGXX+r8SoP2ME6O",
	"v6jZFY7F1u0hToKlL1gZj+6wSFY6SZPjW6LWQYtls4LqCJ3pFMC/Z0lZ/3uGGEf/nuUkZ3xj/8fLyv6Z",
	"sMLekf3vGbhsWowv2xAlbtl2gq/lDP6q7nnT5YHq2mRAbWR3eFPZuzSlZsYCZUQSmhVtjvwVjE9F6Dfs",
	"rnhDMrzxG1p0R4uU3ZmpqKSSMmdYslNaJ0TGOQ2u0A1ZME4aRkrZXdHhIlyWGSXpEbpe0SYrU1dkUWf6",
	"NDL5gvMyI+qeultCSpUBx7QgvEKYs9pWXre2+iYjbdArGMJrRlPVIEuROvuKSlLgTGyk+i3IXesuJiwn",
	"iBbgrpVawK/le03DyQTWe1XmNh5bqHi3In37qRFVobrU9aZS7jwUE3KpnxQ5fGaIqrIul24qC2CIZ+yb",
	"vitEpWKUwJScre0l3GozVWF4IEHwfe18CR1hvFa/6zMkDa9bGW0C+Rj9OriBK6xg50hIxlJW9ZZszAwq",
	"weRqj9B5oY+7m6L6DasVDzYXIspp6i7q4Lvmsd9uyeb3gXb2nd48PeueQ+2f4HQS9PqIzYjF6J3DCSJL",
	"ME6a6+8Pv7UVopI+02/uZ+9dYBh/r0DvMrahDxm8/8Gdw8jdqsHdog6ckeItj1PrgtBNgsfo/J0z71my",
	"YnTu0bW1TqeZj+/OYug/PKLd+pTfk+WJHqNXVPAKyDCb8wrvPWelTpvzoib/b3WQl/VGi7AiOKu7usdz",
	"WA/eGKctQFXSHI/nqpBRqnQQGXNrek+sQeDon//8J/qOSetJv4vfnYIm75s0K5s6hy21gL790XdjP+Uk",
	"jZth03rKUX0IUEDhe66yBYDEl5Z5MRI1jsF/E5dk9k7dkTdAHslsZtxteE4pvCmL0yoSAuWxvwFQU42x",
	"e2/ac7THTT7waU3yAriYaUud2YJ6jGFub7Ty2WbwoqdeZ3372fRbkzy3O4XdgWbU7TyCxdilR6G7pXog",
	"SvdVid3eyebzTRbtNYRhSfw5mm4vF/R9hRf0efpGc+w0uvugjOmxKEFsoflfZAg7OACooJcTck8AWPE+",
	"imPUwLKIiWdFTz3J4RQLfdBBJ0BssqXZH7vDlU3FBI6JPga6ARGJle4WIlTgfUsKxOW4nuKH4EMe8GtU",
	"21Wo9Dc3gUp0JGxt/7AqhoP31V2rn6PO6Qy2W8eRNax32XZzt7MxfG6PG2wLoD09MAmCFyvuNrIHK7o6",
	"JVyupVqqxV0SbkoM/CVcOk+o1qT2001KFSK+C1+vPWYAfUhj+ggxsKOAigYfPn53cFB5IfjOimgQ7ir9",
	"MLaSOpBfOE7IeVr5bxRTLdD5m0rqNd0GgNM5DXnoh3Z0QSp0b2hbpmmrVmk6OYyIP5fp88dbCFNd8bEz",
	"nfOZrj+ds1x6UqUYrZP6V1OvyskS9GHaMe84FdKeLeFbyoau96fQ4frm468V5IC1w9YV4Hbp4/Vjz32q",
	"o6UrXCHbvHsE1DnfDvo7njPO3an5TzurD5/XhNMFjZnpd5WGpWZ8Q0iBmr7gYyChw9S9OT7iWHUPUviA",
	"NXyQvgfCd6YePJ3d6xt6DuoBqqWsSFJzKjYfJcNr3vmBYE74aS1W6sYd9b8fGc+xmJ3M/u+n69lcvzut",
	"8K2+tmOthCglr6s7v9RdLoIKueaZeR4Knemjtugyw+qh2rX0V9VSXh+9PvqrTmqSApd0djL729Hro79J",
	"5sZipeZ2bDSTPvUIpRSviKh5UTnFNDjLrEKrjmYKvM62SB2ojlmfWqCqhEOpbTXA/3n92p46sptCpdqf",
	"lL2P/1NpfaB1RXQK1r6DDQTnfQVhnndc1BlqJt2hmjIbLr1+s/q9OpHLn/0utU5V5znmG3umHLerFXhZ",
	"uZ1mv6sXaCDjf6Yc/0pGo6b1EJe6TfvQt3EPfmDpZhIeo9D30IngBK/JwyPJFz3sDqmk46k+nTQiLaIV",
	"sIbzj+8bE/6gyZQR6BrDN+p3l2DoRqu4IeF025Zwbv7it9C9nrjpQuUnKacza50dV6NPqbmD9b6W+v1p",
	"qGg+oZaa2QZp3KZSVv/++u/et+lRwQRasLpIo+luqNaju6aDg1VQQMN6L4Lc74j4U9P6URIrsd8j2zsi",
	"+kj3KlcomPlVpT3iaKfbPiPyvaj4EYbRSa0+z2g6hkVdqf3mdlYj9oD7srS3UIZ44W336rwFzQSxF7vq",
	"G4wUX/xRE3XszjBG962s/Uly/EPze3OcFCYCbpN0Iy2mG2LpH1y3CXSJTP5+L9KikXJgWWkH3Rnmw66Q",
	"2oABlKslQCsrx/fqX6n7eg4S6PQY0kTLjnu5aJTQPBNzuAeKhZ2YMYrNYY0mnZOpNHl++uzQpPB5JeNE",
	"iHcg7CYk4D5YgZvK7sYdAl2cF505Tvawb7GdzjxWb3noc/lhn+Mn0/Bgtt8OuE8X4LNZvuMJPC+pCVPt",
	"+N4IzCA94LV+OyJjPPV2Sa32KEBDONcsTbU63xouGrvwrHh47rsHQO25A8M0PL0TA3NZD4m9JyPTofOB",
	"bc2heGzcCH1XIdNYmiPuEjvWKGVs6Y+CrfQ6PuGFbP/E3s3+raJ7xH2vRtF57uKzJMUJJzj1aBYPBfO2",
	"9CRIxPdt+cnzUVBfb7QRuBxlpxxiyOswBhSKtLVFsWzD2+ctnjZUGcvv2Hc49q3W7Tg7pZ7B8kgWxrQy",
	"xx3ME7+c5QgXvVf1Y6krODbn5YM6wVbevCiF3TDSoJJpp8ykiTqiCYQtlfJxy+AEho9DznqHL/aGtd5Z",
	"jSHKukdPDR+ay8VRqSoeRhDYvUIlnI3utnXQ2Pug0ek+YzWxeqLzAlb/oni4pOKtO9ohPCFnwH15Qi4a",
	"/JQh3ZVbmnR+jiqzcHr4Si3eDhLNuw5iOmg9bAwzGHrHFAxaOtia9YjYF6vje+d/wP6Dt0DDvTNopEij",
	"S/JoY9hdD2ASezN/NvsW++aC4B5GFBeMF2REkfcdEX1x/kpR6tmLiETms2HpsVKNoH7W7V708yPYKJhW",
	"2pF+BpISsBTn7rWhW0n0FmmNb0Fp7zjX4JKzSTmMKxwg7wDwSudtY+/W149Nq612qJtBvpKim+YM/p68",
	"6gYf4WBn4WDdkrD9bawA58f2fPM+tHCLo8Oq4O64u6RF0Dl2T4sDpOiI0vG9/TOyIMch1bdek7M/8gW9",
	"2uYs8rA0oCtRvoTLNiR6lgrwaYjjMVfRZIn2Hxw5BZwHVy53WLfzomonskPQz41kipDKHd06tUt7xO7p",
	"/jjtm9hDtQiI2UaNJmvEfqql7Baxx54oOv+mbMT+91YbzhnbXm0UxTDSieaobbZa92hjIvz5A+y59ofa",
	"NWG32XltiB3efI0m/PgurMXCNhuxz0OV/Dk3ZBs2G9mTbbAEbcv2+ciWmg7OJvUeniU6dLelX4p33VM0",
	"vqNM32ZdMVA5NywxtrXXEKL7pb3xSG9eWHVq74zu8NPD1l445AiKfFvD2anAsDPZcWHnn5wz1MXmZoP/",
	"OGFFQQaZy5idfacnckFG7vKft13OnDkcgjrg0Psik4saf5qyg8Ckgw9LRLfJaBWAvqXfQLE7Dw4EX1UA",
	"jJr9hOMeMhw2Ng9MYse0D/poTks/yUPCe3zf/mdK+YADz+WYm03ni3pgRz+s1zQJVRr42ej5krGf6owi",
	"yfgG/q4R/I6Irxq774iIRW10lOD0TFyEAE5DV0p2uK+/D1pryC86+RHsZogDU2ZHqvY4b95CmOA/Oc8j",
	"eFlngutk3mOYIDX7FRWIO57Am3KFLLco2iHRj+/Vv6GwqiW/fjAtSHGpLM7fxKv992bf8jlQfR64DBcY",
	"ySDuz8hY987/Gm8tyDzuyLRYqDv1nL2dMYaZbWdNYcL1Jv+VEjAyzhqn3Y7V/6jOn67p/yQU3YEc7lSr",
	"R6nyyQp8r8T8plV4L/Roan4C3GKfcpwq3U0/1DyYpV9kqAQWtecu0YtmsENkwexo7bbBfhJgDSr8Mpw5",
	"C7fEaH/TlNim2raThvzOffG1AsWy3eveW2yz4z3ekTLWTulxiwoHzRatBsmPsGRxad844/WoAr0nzv1r",
	"hb4nYdK49kvSwAKaHyJOjZknsz2JYWum9pF0MBg7bJLBGXRnZAmmePvWpqFMK3jG7YjP3xrfY+TcV5SL",
	"8Q3UxO6DpMFqWC9J53E+Yyh42z/Rvh0i+ayfnzzR3nYHnYDzu/Ms8hhr6HYv6jiCLeDqWKOOGTdPRk1V",
	"zP2aWFjEZSPjdmmCOu+Oj4r9I6pp98Gv30QdrVp9TBHtGPm3OvYXq/C3qLbdOcXn34CV2X91reansdJa",
	"TfZhXe0Yk21TTrsXUwXGDO/xrbRU3cJSkwYbVpUiwRAumFgRPmR8Uxrb2rN92pcd1+FqFhgpwjVj+tEz",
	"gSvGa23VMrcptD2sFmlLbE3y4E9ZYKv5Z6S6VvMNVFrb4ZaSZTShZGruxnaLzN5c2lEO4RSowfZWPmlX",
	"7s+llO1iLcqbn2LyKarxxpdQMavbjwtvUXdYH94ddYcECmZVSotGgESuXBzf65YTciu6w1hyxaHj14XW",
	"YGYjhNbR5MYY4t4R8dVizZNqCOMr2go3YAAz3PLvbm+j8eop3eJFT8WyRvAw7qie4nSNBUmyurJvv3tv",
	"EbnUbc9s24MY486Y2xvl+ezvr/865Ma6wLVYMU7/a59M+9uw0Y+M39A0JYX3UbX2/dHoZ9V6iA/fJGIa",
	"o6RFfUPPHgHHrhXpIXSf7N4j3YFJNQ39YWPfRX8Q+4BQHd+XHVRE3ioyoFS8Oh/MF9Lrgzk9mw2Vr4pz",
	"wv7MBM7xX17yp5FZj3rtYXF7JevzonrwhxdXgFr2mYlj4IKTF6UPskPYc9qD0j9eEZzpR6rjZP0n3X77",
	"0rUd4jUoMis70a9KYkA/CRKZhg5fgw1+Kr6ABSeGNbT8sAXNyHH7gv/kpCIpUloskQMhMr94mmWXuvO5",
	"M/pB4pv+sFekSB8b6AAmtGAQesZLW5umgXwlANctbm1/1YSuCF/ThHze8l180715Ez6CxO+I+GS/ftTd",
	"d/5+fsnlmMKkwpOMkkJ8pulwVR+780e6qXlZqCvg85kOS9LP2JfxVfdf0JxUAuclBKHTZ2wu7lcAltZa",
	"Y0Cs69Tvra0tvJYLXAlbFxFYTisV7OY/JNnbtfkNL3ldxjbi7/Ojw/sDTo9J3/fgRbC37uvh8Edk0Los",
	"/VwYqZOy+02D+n3AF7vP7O1JwDWciiQcUoEeWLo5+p4V2QZxpSZJiliBEqMTXr0oky2Uyc6VR7ASzKtC",
	"whoEMqHH95oxBg9o+vaYeiP6Npn8OiXoB585HA8d9TRzPWi+6cU+f8siZdJtW4rU6FbVqLjops9NXL4x",
	"s/+1mvgXHfEsdIRJT+zH7B7jkn6+JZup0ezp5TmS3eyld2OKRmUrSvoz2VQ/Mg64+nu/Yk4NvrfL5RR0",
	"f66hg66pOv4JdPDoi2lmQbHkN293KizB9N+FzidfSspJ9ZkC6uat/KZ1Vkk4ZWlz4tUsJV7pqHTpaO9D",
	"KP4Yht8pg99x6o0LXJbYi4o6vteziI0WJnOpeag/wKX7OIcfQq3xD7dG7RNoj0Eh82lJ1eRp6nkh1hB1",
	"mo5STCMYJ8OrcYeW56NseLo82AuZ7XiPMzjDihq15Oa93Yby8lcrSQ5S3Pd/Q5t3znz3qJFcrGx9F56D",
	"AGC/2yLiSV+jb6kQ98qVwov71NWBGHQ3z00FeRR8S2rIraEnjII823kBZZ9su92bJF7ODbw1sgUL7+th",
	"AEmg8TM0/uMz0AEVGcZkDKdK3wetSKj3tWy+Rf/Y4zGe7hnN6VYdK4G5uKb5lpNOR7s+Ns04Gtp++Hn8",
	"bpX8hnBo06k9jfPQstTxvdCM8zDKXB7O6rK5gXbQ5OwBsKYuxYLxNvrakEIefCJ6Rwj0sXuJi+0EfFzC",
	"vgKaKbooktVVtzg9JrWi+kQWgDSZ21+rQ1W2d4Y8wEa2N6fS4Am6p6kFENi8VtUrKlEuYSHBuiiXskdy",
	"TIFLfnTPLip2lsWQQ8o/9K2V0gCoX7bKSL6VXa2fYFepaluGvsBez5D064WmVQYBoTYt1jijqaYQMrja",
	"4UEHhwUNvnpMqHmgQeooFzb64Pi+qm8+cEWaYCbjiuRs3fKnOgzd5dDvGUecrNmtvZ3eohdRh+QrXKl1",
	"4yQhpSCpuRexabsh4hV01FyO3ufxoFP6sb5BjBuSOEwHO6YtFnZfPShni1p+UuUGcjmpnJ+zdI281Ms4",
	"zfLVBSjVlCJuh4H02MOj7vJXh7Z37mB6Zs5cA9ottAsoacBZpoIFw0jjtqW3LyixecUy8nzovwtFK7Ey",
	"xNv1iqCC3GmcCYZwVdFlYY2DWU24tkcB/v2J8789Oz3UtkpE1CrN7lhHXrx699zoXdWz5GxN073LT3Bj",
	"rG7WEeMLSC3s/DDNNWs7jrhjB3bFntINu3PXPMn9amsHY4oELVX3ca7WQeQTCekeKBY8GnjXIjRCTI7v",
	"m78nXAjQcaRDdwJ8coQ2OunlSjpgXDoTfjYnBPdJ7+CBvogYaUQPRlDTrVd/IeUei7e3dAWjiNhz/cbo",
	"WByMji9qf4dFRNvp/eOUJBkt9D1roE1/oxv0o1HpR4esvOnW4OXcjXq+bT0SlRlpv3aDWkOPdJKZ0CQc",
	"2An1c49oj+WX/zBdiwMzy6nKR0zlFd3rhVUoKzQqpjCMTQHFBWwOVbYJ2/RgfU7Tk94xo2UEr0nILb2Q",
	"DUZiDdXmxYPp8UGHfzKyEBG8sw23aBL2Q0z546O544+aCayPO9bgaaUiVfdz6leVBbPlwLpf/zmIIeM0",
	"C/+X6mCeZ/7mGUiv9mA+jH31unViDV19TDFSd5fmtDBjEL6GafQDwXlGBTpjheAsQ5cZLiQBap7NTmYr",
	"Icrq5PgYl/ToRrc8Slh+vH49G9bBWVDnxYJwUiRDMLwuXDCzh98f/n8AAAD//wJuZvGHNgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

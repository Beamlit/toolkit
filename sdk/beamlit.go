// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	"github.com/tmp-moon/toolkit/cli/register"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ApiKey defines model for ApiKey.
type ApiKey struct {
	// ApiKey Api key
	ApiKey *string `json:"api_key,omitempty"`

	// Comment Comment for the API key
	Comment *string `json:"comment,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// ExpiresIn Duration until expiration (in seconds)
	ExpiresIn *string `json:"expires_in,omitempty"`

	// Sub User subject identifier
	Sub *string `json:"sub,omitempty"`

	// SubType Subject type
	SubType *string `json:"sub_type,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// ArrayMetric Array of metrics
type ArrayMetric = []Metric

// DeploymentPolicies defines model for DeploymentPolicies.
type DeploymentPolicies = []string

// DeploymentServerlessConfig Configuration for the serverless model deployment
type DeploymentServerlessConfig struct {
	// LastPodRetentionPeriod The last pod retention period
	LastPodRetentionPeriod *string `json:"last_pod_retention_period,omitempty"`

	// MaxNumReplicas The maximum number of replicas
	MaxNumReplicas *int `json:"max_num_replicas,omitempty"`

	// Metric Metric to scale on, can be "cpu" or "memory" or "rps" or "concurrency"
	Metric *string `json:"metric,omitempty"`

	// MinNumReplicas The minimum number of replicas
	MinNumReplicas *int `json:"min_num_replicas,omitempty"`

	// ScaleDownDelay The scale down delay
	ScaleDownDelay *string `json:"scale_down_delay,omitempty"`

	// ScaleUpMinimum The scale up minimum
	ScaleUpMinimum *int `json:"scale_up_minimum,omitempty"`

	// StableWindow The stable window
	StableWindow *string `json:"stable_window,omitempty"`

	// Target Target value for the metric
	Target *string `json:"target,omitempty"`

	// TerminationGracePeriodSeconds The termination grace period seconds
	TerminationGracePeriodSeconds *int `json:"termination_grace_period_seconds,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName The display name of the environment
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name The name of the environment
	Name *string `json:"name,omitempty"`

	// Policies The policies attached to the environment
	Policies *[]interface{} `json:"policies,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the environment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// EnvironmentMetrics Metrics for the environment
type EnvironmentMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`
}

// Flavor A type of hardware available for deployments
type Flavor struct {
	// Name Flavor name (e.g. t4)
	Name *string `json:"name,omitempty"`

	// Type Flavor type (e.g. cpu, gpu)
	Type *string `json:"type,omitempty"`
}

// Flavors Types of hardware available for deployments
type Flavors = []Flavor

// Labels Labels
type Labels struct {
	String *string `json:"string,omitempty"`
}

// Location Location availability for policies
type Location struct {
	// Continent Location continent
	Continent *string `json:"continent,omitempty"`

	// Country Location country
	Country *string `json:"country,omitempty"`

	// Flavors Location flavors
	Flavors *[]Flavor `json:"flavors,omitempty"`

	// Location Location name
	Location *string `json:"location,omitempty"`

	// Name Location name
	Name *string `json:"name,omitempty"`

	// Status Location status
	Status *string `json:"status,omitempty"`
}

// Metric Metric
type Metric struct {
	// Timestamp Metric timestamp
	Timestamp *string `json:"timestamp,omitempty"`

	// Value Metric value
	Value *string `json:"value,omitempty"`
}

// Metrics Metrics for resources
type Metrics struct {
	// Models Metrics for models
	Models *interface{} `json:"models,omitempty"`
}

// Model defines model for Model.
type Model struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Model display name
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name Model name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the model belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// ModelDeployment defines model for ModelDeployment.
type ModelDeployment struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Enabled If false, the model deployment will not be active nor serve requests
	Enabled *bool `json:"enabled,omitempty"`

	// Environment The name of the environment in which the model deployment is deployed
	Environment *string `json:"environment,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// MetricPort The port to serve the metrics on
	MetricPort *int `json:"metric_port,omitempty"`

	// Model The name of the parent model
	Model *string `json:"model,omitempty"`

	// ModelProviderRef Reference to a model provider
	ModelProviderRef *ModelProviderRef `json:"model_provider_ref,omitempty"`

	// PodTemplate The pod template, should be a valid Kubernetes pod template
	PodTemplate *map[string]interface{} `json:"pod_template,omitempty"`
	Policies    *DeploymentPolicies     `json:"policies,omitempty"`

	// RuntimeConfiguration Runtime configuration for the model deployment
	RuntimeConfiguration *RuntimeConfiguration `json:"runtime_configuration,omitempty"`

	// RuntimeModel The slug name of the model origin
	RuntimeModel *string `json:"runtime_model,omitempty"`

	// RuntimeType The type of the model origin
	RuntimeType *string `json:"runtime_type,omitempty"`

	// ServerlessConfig Configuration for the serverless model deployment
	ServerlessConfig *DeploymentServerlessConfig `json:"serverless_config,omitempty"`

	// ServingPort The port to serve the model on
	ServingPort *int `json:"serving_port,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the model deployment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// ModelDeploymentLog Log for a model deployment
type ModelDeploymentLog struct {
	// Message Content of the log
	Message *string `json:"message,omitempty"`

	// Timestamp The timestamp of the log
	Timestamp *string `json:"timestamp,omitempty"`
}

// ModelDeploymentMetrics Metrics for a single model deployment
type ModelDeploymentMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`

	// InferencePerSecondPerRegion Historical requests per second (RPS) per location, for the model deployment
	InferencePerSecondPerRegion *struct {
		// Region Array of metrics
		Region *ArrayMetric `json:"region,omitempty"`
	} `json:"inference_per_second_per_region,omitempty"`

	// QueryPerSecondGlobal RPS value (in last 24 hours) for the model deployment globally
	QueryPerSecondGlobal *float32 `json:"query_per_second_global,omitempty"`

	// QueryPerSecondPerCodeGlobal Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerCodeGlobal *QPS `json:"query_per_second_per_code_global,omitempty"`

	// QueryPerSecondPerRegion Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerRegion *QPS `json:"query_per_second_per_region,omitempty"`

	// QueryPerSecondPerRegionPerCode RPS value (in last 24 hours) per response status code per location, for the model deployment
	QueryPerSecondPerRegionPerCode *struct {
		// Region Query per second per element, can be per response status code (e.g. 200, 400) or per location
		Region *QPS `json:"region,omitempty"`
	} `json:"query_per_second_per_region_per_code,omitempty"`
}

// ModelMetrics Metrics for a single model
type ModelMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`

	// QueryPerSecondPerRegion Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerRegion *QPS `json:"query_per_second_per_region,omitempty"`
}

// ModelProvider defines model for ModelProvider.
type ModelProvider struct {
	// Comment Model provider comment
	Comment *string `json:"comment,omitempty"`

	// Config Model provider config
	Config *ProviderConfig `json:"config,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name Model provider name
	Name *string `json:"name,omitempty"`

	// Type Model provider type
	Type *string `json:"type,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// ModelProviderRef Reference to a model provider
type ModelProviderRef struct {
	// Kind The kind of the model provider, can be Provider
	Kind *string `json:"kind,omitempty"`

	// Name The name of the model provider
	Name *string `json:"name,omitempty"`
}

// ModelRelease Model release, used to deploy a model from one environment to another
type ModelRelease struct {
	// From Origin environment from which the model is released
	From *string `json:"from,omitempty"`

	// To Destination environment to which the model is released
	To *string `json:"to,omitempty"`
}

// PendingInvitation defines model for PendingInvitation.
type PendingInvitation struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Email User email
	Email *string `json:"email,omitempty"`

	// InvitedBy User sub
	InvitedBy *string `json:"invited_by,omitempty"`

	// Role ACL role
	Role *string `json:"role,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// PendingInvitationAccept Pending invitation accept
type PendingInvitationAccept struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// Workspace Workspace
	Workspace *Workspace `json:"workspace,omitempty"`
}

// PendingInvitationRender Pending invitation in workspace
type PendingInvitationRender struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// InvitedAt Invitation date
	InvitedAt *string `json:"invited_at,omitempty"`

	// InvitedBy Invited by
	InvitedBy *PendingInvitationRenderInvitedBy `json:"invited_by,omitempty"`

	// Role ACL role
	Role *string `json:"role,omitempty"`

	// UserNumber Number of users in the workspace
	UserNumber *float32 `json:"user_number,omitempty"`

	// Workspace Workspace
	Workspace *PendingInvitationRenderWorkspace `json:"workspace,omitempty"`
}

// PendingInvitationRenderInvitedBy Invited by
type PendingInvitationRenderInvitedBy struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// FamilyName User family name
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName User given name
	GivenName *string `json:"given_name,omitempty"`

	// Sub User sub
	Sub *string `json:"sub,omitempty"`
}

// PendingInvitationRenderWorkspace Workspace
type PendingInvitationRenderWorkspace struct {
	// DisplayName Workspace display name
	DisplayName *string `json:"display_name,omitempty"`

	// Name Workspace name
	Name *string `json:"name,omitempty"`
}

// Policy defines model for Policy.
type Policy struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Policy display name
	DisplayName *string `json:"display_name,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors *Flavors `json:"flavors,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Locations PolicyLocations is a local type that wraps a slice of Location
	Locations *PolicyLocations `json:"locations,omitempty"`

	// Name Policy name
	Name *string `json:"name,omitempty"`

	// Type Policy type, can be location or flavor
	Type *string `json:"type,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the policy belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// PolicyLocation Policy location
type PolicyLocation struct {
	// Name Policy location name
	Name *string `json:"name,omitempty"`

	// Type Policy location type
	Type *string `json:"type,omitempty"`
}

// PolicyLocations PolicyLocations is a local type that wraps a slice of Location
type PolicyLocations = []PolicyLocation

// ProviderConfig Model provider config
type ProviderConfig struct {
	// AccessToken The access token to use for the provider
	AccessToken *string `json:"access_token,omitempty"`

	// Filename The file name to use for the model
	Filename *string `json:"filename,omitempty"`

	// PresignedUrl The presigned URLs to upload the model to
	PresignedUrl *[]interface{} `json:"presigned_url,omitempty"`

	// RuntimeConfiguration Runtime configuration for the model deployment
	RuntimeConfiguration *RuntimeConfiguration `json:"runtime_configuration,omitempty"`
}

// ProviderModel Model obtained from an external provider, such as HuggingFace, OpenAI, etc...
type ProviderModel struct {
	// CreatedAt Provider model created at
	CreatedAt *string `json:"created_at,omitempty"`

	// Downloads Provider model downloads
	Downloads *int `json:"downloads,omitempty"`

	// Id Provider model ID
	Id *string `json:"id,omitempty"`

	// LibraryName Provider model library name
	LibraryName *string `json:"library_name,omitempty"`

	// Likes Provider model likes
	Likes *int `json:"likes,omitempty"`

	// Name Provider model name
	Name *string `json:"name,omitempty"`

	// PipelineTag Provider model pipeline tag
	PipelineTag *string `json:"pipeline_tag,omitempty"`

	// Private Provider model private
	Private *bool `json:"private,omitempty"`

	// Tags Provider model tags
	Tags *[]string `json:"tags,omitempty"`

	// TrendingScore Provider model trending score
	TrendingScore *int `json:"trending_score,omitempty"`
}

// ProviderOrganization Organization that hosts models from an external provider (HuggingFace, OpenAI, etc...)
type ProviderOrganization struct {
	// AvatarUrl Provider organization avatar URL
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// DisplayName Provider organization display name
	DisplayName *string `json:"display_name,omitempty"`

	// Id Provider organization ID
	Id *string `json:"id,omitempty"`

	// Name Provider organization name
	Name *string `json:"name,omitempty"`
}

// QPS Query per second per element, can be per response status code (e.g. 200, 400) or per location
type QPS struct {
	// RegionCode QPS for location
	RegionCode *float32 `json:"region_code,omitempty"`
}

// RuntimeConfiguration Runtime configuration for the model deployment
type RuntimeConfiguration struct {
	// Args The arguments to pass to the model
	Args *[]interface{} `json:"args,omitempty"`

	// Envs The environment variables to set in the model, should be a valid Kubernetes environment config
	Envs *[]interface{} `json:"envs,omitempty"`

	// Image The image to use
	Image *string `json:"image,omitempty"`

	// ReadinessProbe The readiness probe
	ReadinessProbe *map[string]interface{} `json:"readiness_probe,omitempty"`

	// Resources The resources with k8s spec for the model
	Resources *map[string]interface{} `json:"resources,omitempty"`
}

// StandardFieldsDynamoDb Standard fields for Persistance
type StandardFieldsDynamoDb struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// StoreAgentTool defines model for StoreAgentTool.
type StoreAgentTool struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Description Store agent tool description
	Description *string `json:"description,omitempty"`

	// DisplayName Store agent tool display name
	DisplayName *string `json:"display_name,omitempty"`

	// Image Store agent tool image
	Image *string `json:"image,omitempty"`

	// Labels Store agent tool labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Store agent tool name
	Name *string `json:"name,omitempty"`

	// Parameters Store agent tool parameters
	Parameters *[]StoreAgentToolParameter `json:"parameters,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// StoreAgentToolParameter Store agent tool parameter
type StoreAgentToolParameter struct {
	// Description Store agent tool parameter description
	Description *string `json:"description,omitempty"`

	// Name Store agent tool parameter name
	Name *string `json:"name,omitempty"`

	// Required Store agent tool parameter required
	Required *bool `json:"required,omitempty"`

	// Type Store agent tool parameter type
	Type *string `json:"type,omitempty"`
}

// Tool defines model for Tool.
type Tool struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Description Tool description, very important for the agent tool to work with an LLM
	Description *string `json:"description,omitempty"`

	// DisplayName Tool display name
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name Tool name
	Name *string `json:"name,omitempty"`

	// Parameters Tool parameters, for your function to be callable with Agent
	Parameters *[]StoreAgentToolParameter `json:"parameters,omitempty"`

	// StoreId Create from a store registered tool
	StoreId *string `json:"store_id,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// ToolDeployment defines model for ToolDeployment.
type ToolDeployment struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Enabled Whether the tool deployment is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Environment The name of the environment
	Environment *string `json:"environment,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// PodTemplate The pod template, should be a valid Kubernetes pod template
	PodTemplate *map[string]interface{} `json:"pod_template,omitempty"`
	Policies    *DeploymentPolicies     `json:"policies,omitempty"`

	// RuntimeConfiguration Runtime configuration for the model deployment
	RuntimeConfiguration *RuntimeConfiguration `json:"runtime_configuration,omitempty"`

	// ServerlessConfig Configuration for the serverless model deployment
	ServerlessConfig *DeploymentServerlessConfig `json:"serverless_config,omitempty"`

	// Tool The name of the tool
	Tool *string `json:"tool,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the tool deployment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// Workspace defines model for Workspace.
type Workspace struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Workspace display name
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Workspace labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Workspace name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// WorkspaceUser Workspace user
type WorkspaceUser struct {
	// Accepted Whether the user has accepted the workspace invitation
	Accepted *bool `json:"accepted,omitempty"`

	// Email Workspace user email
	Email *string `json:"email,omitempty"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified *bool `json:"email_verified,omitempty"`

	// FamilyName Workspace user family name
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName Workspace user given name
	GivenName *string `json:"given_name,omitempty"`

	// Role Workspace user role
	Role *string `json:"role,omitempty"`

	// Sub Workspace user identifier
	Sub *string `json:"sub,omitempty"`
}

// CreateWorkspaceServiceAccountJSONBody defines parameters for CreateWorkspaceServiceAccount.
type CreateWorkspaceServiceAccountJSONBody struct {
	// Description Service account description
	Description *string `json:"description,omitempty"`

	// Name Service account name
	Name string `json:"name"`
}

// UpdateWorkspaceServiceAccountJSONBody defines parameters for UpdateWorkspaceServiceAccount.
type UpdateWorkspaceServiceAccountJSONBody struct {
	// Description Service account description
	Description *string `json:"description,omitempty"`

	// Name Service account name
	Name *string `json:"name,omitempty"`
}

// CreateApiKeyForServiceAccountJSONBody defines parameters for CreateApiKeyForServiceAccount.
type CreateApiKeyForServiceAccountJSONBody struct {
	// Comment Comment for the API key
	Comment *string `json:"comment,omitempty"`

	// ExpiresIn Expiration period for the API key
	ExpiresIn *string `json:"expires_in,omitempty"`
}

// InviteUserToWorkspaceJSONBody defines parameters for InviteUserToWorkspace.
type InviteUserToWorkspaceJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
}

// UpdateUserRoleInWorkspaceJSONBody defines parameters for UpdateUserRoleInWorkspace.
type UpdateUserRoleInWorkspaceJSONBody struct {
	// Role The new role to assign to the user
	Role string `json:"role"`
}

// PutEnvironmentJSONRequestBody defines body for PutEnvironment for application/json ContentType.
type PutEnvironmentJSONRequestBody = Environment

// PutModelDeploymentJSONRequestBody defines body for PutModelDeployment for application/json ContentType.
type PutModelDeploymentJSONRequestBody = ModelDeployment

// PutPolicyJSONRequestBody defines body for PutPolicy for application/json ContentType.
type PutPolicyJSONRequestBody = Policy

// PutToolJSONRequestBody defines body for PutTool for application/json ContentType.
type PutToolJSONRequestBody = Tool

// PutToolDeploymentJSONRequestBody defines body for PutToolDeployment for application/json ContentType.
type PutToolDeploymentJSONRequestBody = ToolDeployment

// CreateWorspaceJSONRequestBody defines body for CreateWorspace for application/json ContentType.
type CreateWorspaceJSONRequestBody = Workspace

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody = Workspace

// CreateWorkspaceServiceAccountJSONRequestBody defines body for CreateWorkspaceServiceAccount for application/json ContentType.
type CreateWorkspaceServiceAccountJSONRequestBody CreateWorkspaceServiceAccountJSONBody

// UpdateWorkspaceServiceAccountJSONRequestBody defines body for UpdateWorkspaceServiceAccount for application/json ContentType.
type UpdateWorkspaceServiceAccountJSONRequestBody UpdateWorkspaceServiceAccountJSONBody

// CreateApiKeyForServiceAccountJSONRequestBody defines body for CreateApiKeyForServiceAccount for application/json ContentType.
type CreateApiKeyForServiceAccountJSONRequestBody CreateApiKeyForServiceAccountJSONBody

// InviteUserToWorkspaceJSONRequestBody defines body for InviteUserToWorkspace for application/json ContentType.
type InviteUserToWorkspaceJSONRequestBody InviteUserToWorkspaceJSONBody

// UpdateUserRoleInWorkspaceJSONRequestBody defines body for UpdateUserRoleInWorkspace for application/json ContentType.
type UpdateUserRoleInWorkspaceJSONRequestBody UpdateUserRoleInWorkspaceJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {

	// ListEnvironments request
	ListEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEnvironmentWithBody request with any body
	PutEnvironmentWithBody(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEnvironment(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentMetrics request
	GetEnvironmentMetrics(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLocations request
	ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetrics request
	GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModelProviders request
	ListModelProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModelProvider request
	DeleteModelProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelProvider request
	GetModelProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModelProvider request
	PutModelProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModels request
	ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModel request
	DeleteModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModel request
	GetModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModel request
	PutModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModelDeployments request
	ListModelDeployments(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModelDeployment request
	DeleteModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelDeployment request
	GetModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModelDeploymentWithBody request with any body
	PutModelDeploymentWithBody(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutModelDeployment(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelDeploymentLogs request
	GetModelDeploymentLogs(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelDeploymentMetrics request
	GetModelDeploymentMetrics(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelMetrics request
	GetModelMetrics(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModelRelease request
	CreateModelRelease(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPolicies request
	ListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicy request
	DeletePolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicy request
	GetPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPolicyWithBody request with any body
	PutPolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPolicy(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllPendingInvitations request
	ListAllPendingInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModelsForProvider request
	ListModelsForProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelWithRepoForProvider request
	GetModelWithRepoForProvider(ctx context.Context, providerId string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationsForProvider request
	ListOrganizationsForProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStoreAgentTools request
	ListStoreAgentTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoreAgentTool request
	GetStoreAgentTool(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTools request
	ListTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTool request
	DeleteTool(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTool request
	GetTool(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutToolWithBody request with any body
	PutToolWithBody(ctx context.Context, toolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTool(ctx context.Context, toolName string, body PutToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListToolDeployments request
	ListToolDeployments(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteToolDeployment request
	DeleteToolDeployment(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToolDeployment request
	GetToolDeployment(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutToolDeploymentWithBody request with any body
	PutToolDeploymentWithBody(ctx context.Context, toolName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutToolDeployment(ctx context.Context, toolName string, environmentName string, body PutToolDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorspaceWithBody request with any body
	CreateWorspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorspace(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspace request
	DeleteWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceWithBody request with any body
	UpdateWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeclineInvitationToWorkspace request
	DeclineInvitationToWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptInvitationToWorkspace request
	AcceptInvitationToWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LeaveWorkspace request
	LeaveWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceServiceAccounts request
	GetWorkspaceServiceAccounts(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspaceServiceAccountWithBody request with any body
	CreateWorkspaceServiceAccountWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspaceServiceAccount(ctx context.Context, workspaceName string, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceServiceAccount request
	DeleteWorkspaceServiceAccount(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceServiceAccountWithBody request with any body
	UpdateWorkspaceServiceAccountWithBody(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceServiceAccount(ctx context.Context, workspaceName string, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApiKeysForServiceAccount request
	ListApiKeysForServiceAccount(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiKeyForServiceAccountWithBody request with any body
	CreateApiKeyForServiceAccountWithBody(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiKeyForServiceAccount(ctx context.Context, workspaceName string, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKeyForServiceAccount request
	DeleteApiKeyForServiceAccount(ctx context.Context, workspaceName string, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsersInWorkspace request
	ListUsersInWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteUserToWorkspaceWithBody request with any body
	InviteUserToWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InviteUserToWorkspace(ctx context.Context, workspaceName string, body InviteUserToWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromWorkspace request
	RemoveUserFromWorkspace(ctx context.Context, workspaceName string, subOrEmail string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserRoleInWorkspaceWithBody request with any body
	UpdateUserRoleInWorkspaceWithBody(ctx context.Context, workspaceName string, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserRoleInWorkspace(ctx context.Context, workspaceName string, subOrEmail string, body UpdateUserRoleInWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

// RegisterCliCommands registers CLI commands for the client
func (c *ClientWithResponses) RegisterCliCommands(reg register.Register, ctx context.Context) {

	// Register CLI commands for ListEnvironments
	reg.CliCommand(ctx, "ListEnvironments", c.ListEnvironments)

	// Register CLI commands for DeleteEnvironment
	reg.CliCommand(ctx, "DeleteEnvironment", c.DeleteEnvironment)

	// Register CLI commands for GetEnvironment
	reg.CliCommand(ctx, "GetEnvironment", c.GetEnvironment)

	// Register CLI commands for PutEnvironment
	reg.CliCommand(ctx, "PutEnvironment", c.PutEnvironment)

	// Register CLI commands for GetEnvironmentMetrics
	reg.CliCommand(ctx, "GetEnvironmentMetrics", c.GetEnvironmentMetrics)

	// Register CLI commands for ListLocations
	reg.CliCommand(ctx, "ListLocations", c.ListLocations)

	// Register CLI commands for GetMetrics
	reg.CliCommand(ctx, "GetMetrics", c.GetMetrics)

	// Register CLI commands for ListModelProviders
	reg.CliCommand(ctx, "ListModelProviders", c.ListModelProviders)

	// Register CLI commands for DeleteModelProvider
	reg.CliCommand(ctx, "DeleteModelProvider", c.DeleteModelProvider)

	// Register CLI commands for GetModelProvider
	reg.CliCommand(ctx, "GetModelProvider", c.GetModelProvider)

	// Register CLI commands for PutModelProvider
	reg.CliCommand(ctx, "PutModelProvider", c.PutModelProvider)

	// Register CLI commands for ListModels
	reg.CliCommand(ctx, "ListModels", c.ListModels)

	// Register CLI commands for DeleteModel
	reg.CliCommand(ctx, "DeleteModel", c.DeleteModel)

	// Register CLI commands for GetModel
	reg.CliCommand(ctx, "GetModel", c.GetModel)

	// Register CLI commands for PutModel
	reg.CliCommand(ctx, "PutModel", c.PutModel)

	// Register CLI commands for ListModelDeployments
	reg.CliCommand(ctx, "ListModelDeployments", c.ListModelDeployments)

	// Register CLI commands for DeleteModelDeployment
	reg.CliCommand(ctx, "DeleteModelDeployment", c.DeleteModelDeployment)

	// Register CLI commands for GetModelDeployment
	reg.CliCommand(ctx, "GetModelDeployment", c.GetModelDeployment)

	// Register CLI commands for PutModelDeployment
	reg.CliCommand(ctx, "PutModelDeployment", c.PutModelDeployment)

	// Register CLI commands for GetModelDeploymentLogs
	reg.CliCommand(ctx, "GetModelDeploymentLogs", c.GetModelDeploymentLogs)

	// Register CLI commands for GetModelDeploymentMetrics
	reg.CliCommand(ctx, "GetModelDeploymentMetrics", c.GetModelDeploymentMetrics)

	// Register CLI commands for GetModelMetrics
	reg.CliCommand(ctx, "GetModelMetrics", c.GetModelMetrics)

	// Register CLI commands for CreateModelRelease
	reg.CliCommand(ctx, "CreateModelRelease", c.CreateModelRelease)

	// Register CLI commands for ListPolicies
	reg.CliCommand(ctx, "ListPolicies", c.ListPolicies)

	// Register CLI commands for DeletePolicy
	reg.CliCommand(ctx, "DeletePolicy", c.DeletePolicy)

	// Register CLI commands for GetPolicy
	reg.CliCommand(ctx, "GetPolicy", c.GetPolicy)

	// Register CLI commands for PutPolicy
	reg.CliCommand(ctx, "PutPolicy", c.PutPolicy)

	// Register CLI commands for ListAllPendingInvitations
	reg.CliCommand(ctx, "ListAllPendingInvitations", c.ListAllPendingInvitations)

	// Register CLI commands for ListModelsForProvider
	reg.CliCommand(ctx, "ListModelsForProvider", c.ListModelsForProvider)

	// Register CLI commands for GetModelWithRepoForProvider
	reg.CliCommand(ctx, "GetModelWithRepoForProvider", c.GetModelWithRepoForProvider)

	// Register CLI commands for ListOrganizationsForProvider
	reg.CliCommand(ctx, "ListOrganizationsForProvider", c.ListOrganizationsForProvider)

	// Register CLI commands for ListStoreAgentTools
	reg.CliCommand(ctx, "ListStoreAgentTools", c.ListStoreAgentTools)

	// Register CLI commands for GetStoreAgentTool
	reg.CliCommand(ctx, "GetStoreAgentTool", c.GetStoreAgentTool)

	// Register CLI commands for ListTools
	reg.CliCommand(ctx, "ListTools", c.ListTools)

	// Register CLI commands for DeleteTool
	reg.CliCommand(ctx, "DeleteTool", c.DeleteTool)

	// Register CLI commands for GetTool
	reg.CliCommand(ctx, "GetTool", c.GetTool)

	// Register CLI commands for PutTool
	reg.CliCommand(ctx, "PutTool", c.PutTool)

	// Register CLI commands for ListToolDeployments
	reg.CliCommand(ctx, "ListToolDeployments", c.ListToolDeployments)

	// Register CLI commands for DeleteToolDeployment
	reg.CliCommand(ctx, "DeleteToolDeployment", c.DeleteToolDeployment)

	// Register CLI commands for GetToolDeployment
	reg.CliCommand(ctx, "GetToolDeployment", c.GetToolDeployment)

	// Register CLI commands for PutToolDeployment
	reg.CliCommand(ctx, "PutToolDeployment", c.PutToolDeployment)

	// Register CLI commands for ListWorkspaces
	reg.CliCommand(ctx, "ListWorkspaces", c.ListWorkspaces)

	// Register CLI commands for CreateWorspace
	reg.CliCommand(ctx, "CreateWorspace", c.CreateWorspace)

	// Register CLI commands for DeleteWorkspace
	reg.CliCommand(ctx, "DeleteWorkspace", c.DeleteWorkspace)

	// Register CLI commands for GetWorkspace
	reg.CliCommand(ctx, "GetWorkspace", c.GetWorkspace)

	// Register CLI commands for UpdateWorkspace
	reg.CliCommand(ctx, "UpdateWorkspace", c.UpdateWorkspace)

	// Register CLI commands for DeclineInvitationToWorkspace
	reg.CliCommand(ctx, "DeclineInvitationToWorkspace", c.DeclineInvitationToWorkspace)

	// Register CLI commands for AcceptInvitationToWorkspace
	reg.CliCommand(ctx, "AcceptInvitationToWorkspace", c.AcceptInvitationToWorkspace)

	// Register CLI commands for LeaveWorkspace
	reg.CliCommand(ctx, "LeaveWorkspace", c.LeaveWorkspace)

	// Register CLI commands for GetWorkspaceServiceAccounts
	reg.CliCommand(ctx, "GetWorkspaceServiceAccounts", c.GetWorkspaceServiceAccounts)

	// Register CLI commands for CreateWorkspaceServiceAccount
	reg.CliCommand(ctx, "CreateWorkspaceServiceAccount", c.CreateWorkspaceServiceAccount)

	// Register CLI commands for DeleteWorkspaceServiceAccount
	reg.CliCommand(ctx, "DeleteWorkspaceServiceAccount", c.DeleteWorkspaceServiceAccount)

	// Register CLI commands for UpdateWorkspaceServiceAccount
	reg.CliCommand(ctx, "UpdateWorkspaceServiceAccount", c.UpdateWorkspaceServiceAccount)

	// Register CLI commands for ListApiKeysForServiceAccount
	reg.CliCommand(ctx, "ListApiKeysForServiceAccount", c.ListApiKeysForServiceAccount)

	// Register CLI commands for CreateApiKeyForServiceAccount
	reg.CliCommand(ctx, "CreateApiKeyForServiceAccount", c.CreateApiKeyForServiceAccount)

	// Register CLI commands for DeleteApiKeyForServiceAccount
	reg.CliCommand(ctx, "DeleteApiKeyForServiceAccount", c.DeleteApiKeyForServiceAccount)

	// Register CLI commands for ListUsersInWorkspace
	reg.CliCommand(ctx, "ListUsersInWorkspace", c.ListUsersInWorkspace)

	// Register CLI commands for InviteUserToWorkspace
	reg.CliCommand(ctx, "InviteUserToWorkspace", c.InviteUserToWorkspace)

	// Register CLI commands for RemoveUserFromWorkspace
	reg.CliCommand(ctx, "RemoveUserFromWorkspace", c.RemoveUserFromWorkspace)

	// Register CLI commands for UpdateUserRoleInWorkspace
	reg.CliCommand(ctx, "UpdateUserRoleInWorkspace", c.UpdateUserRoleInWorkspace)

}

func (c *Client) ListEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnvironmentWithBody(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnvironmentRequestWithBody(c.Server, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnvironment(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnvironmentRequest(c.Server, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentMetrics(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentMetricsRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLocationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModelProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModelProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelProviderRequest(c.Server, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelProviderRequest(c.Server, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelProviderRequest(c.Server, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModelDeployments(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelDeploymentsRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelDeploymentRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelDeploymentRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelDeploymentWithBody(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelDeploymentRequestWithBody(c.Server, modelName, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelDeployment(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelDeploymentRequest(c.Server, modelName, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelDeploymentLogs(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelDeploymentLogsRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelDeploymentMetrics(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelDeploymentMetricsRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelMetrics(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelMetricsRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModelRelease(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModelReleaseRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyRequestWithBody(c.Server, policyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicy(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyRequest(c.Server, policyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllPendingInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllPendingInvitationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModelsForProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsForProviderRequest(c.Server, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelWithRepoForProvider(ctx context.Context, providerId string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelWithRepoForProviderRequest(c.Server, providerId, modelRepoId, modelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationsForProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsForProviderRequest(c.Server, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStoreAgentTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStoreAgentToolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoreAgentTool(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoreAgentToolRequest(c.Server, toolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListToolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTool(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteToolRequest(c.Server, toolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTool(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToolRequest(c.Server, toolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutToolWithBody(ctx context.Context, toolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutToolRequestWithBody(c.Server, toolName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTool(ctx context.Context, toolName string, body PutToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutToolRequest(c.Server, toolName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListToolDeployments(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListToolDeploymentsRequest(c.Server, toolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteToolDeployment(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteToolDeploymentRequest(c.Server, toolName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToolDeployment(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToolDeploymentRequest(c.Server, toolName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutToolDeploymentWithBody(ctx context.Context, toolName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutToolDeploymentRequestWithBody(c.Server, toolName, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutToolDeployment(ctx context.Context, toolName string, environmentName string, body PutToolDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutToolDeploymentRequest(c.Server, toolName, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorspace(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, workspaceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, workspaceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeclineInvitationToWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeclineInvitationToWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptInvitationToWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptInvitationToWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LeaveWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLeaveWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceServiceAccounts(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceServiceAccountsRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceServiceAccountWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceServiceAccountRequestWithBody(c.Server, workspaceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceServiceAccount(ctx context.Context, workspaceName string, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceServiceAccountRequest(c.Server, workspaceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceServiceAccount(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceServiceAccountRequest(c.Server, workspaceName, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceServiceAccountWithBody(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceServiceAccountRequestWithBody(c.Server, workspaceName, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceServiceAccount(ctx context.Context, workspaceName string, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceServiceAccountRequest(c.Server, workspaceName, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiKeysForServiceAccount(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiKeysForServiceAccountRequest(c.Server, workspaceName, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyForServiceAccountWithBody(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyForServiceAccountRequestWithBody(c.Server, workspaceName, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyForServiceAccount(ctx context.Context, workspaceName string, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyForServiceAccountRequest(c.Server, workspaceName, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKeyForServiceAccount(ctx context.Context, workspaceName string, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyForServiceAccountRequest(c.Server, workspaceName, clientId, apiKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsersInWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersInWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUserToWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserToWorkspaceRequestWithBody(c.Server, workspaceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUserToWorkspace(ctx context.Context, workspaceName string, body InviteUserToWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserToWorkspaceRequest(c.Server, workspaceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromWorkspace(ctx context.Context, workspaceName string, subOrEmail string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromWorkspaceRequest(c.Server, workspaceName, subOrEmail)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInWorkspaceWithBody(ctx context.Context, workspaceName string, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInWorkspaceRequestWithBody(c.Server, workspaceName, subOrEmail, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserRoleInWorkspace(ctx context.Context, workspaceName string, subOrEmail string, body UpdateUserRoleInWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRoleInWorkspaceRequest(c.Server, workspaceName, subOrEmail, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEnvironmentRequest calls the generic PutEnvironment builder with application/json body
func NewPutEnvironmentRequest(server string, environmentName string, body PutEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEnvironmentRequestWithBody(server, environmentName, "application/json", bodyReader)
}

// NewPutEnvironmentRequestWithBody generates requests for PutEnvironment with any type of body
func NewPutEnvironmentRequestWithBody(server string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentMetricsRequest generates requests for GetEnvironmentMetrics
func NewGetEnvironmentMetricsRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLocationsRequest generates requests for ListLocations
func NewListLocationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsRequest generates requests for GetMetrics
func NewGetMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModelProvidersRequest generates requests for ListModelProviders
func NewListModelProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelProviderRequest generates requests for DeleteModelProvider
func NewDeleteModelProviderRequest(server string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelProviderRequest generates requests for GetModelProvider
func NewGetModelProviderRequest(server string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModelProviderRequest generates requests for PutModelProvider
func NewPutModelProviderRequest(server string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModelsRequest generates requests for ListModels
func NewListModelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelRequest generates requests for DeleteModel
func NewDeleteModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelRequest generates requests for GetModel
func NewGetModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModelRequest generates requests for PutModel
func NewPutModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModelDeploymentsRequest generates requests for ListModelDeployments
func NewListModelDeploymentsRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelDeploymentRequest generates requests for DeleteModelDeployment
func NewDeleteModelDeploymentRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelDeploymentRequest generates requests for GetModelDeployment
func NewGetModelDeploymentRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModelDeploymentRequest calls the generic PutModelDeployment builder with application/json body
func NewPutModelDeploymentRequest(server string, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutModelDeploymentRequestWithBody(server, modelName, environmentName, "application/json", bodyReader)
}

// NewPutModelDeploymentRequestWithBody generates requests for PutModelDeployment with any type of body
func NewPutModelDeploymentRequestWithBody(server string, modelName string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetModelDeploymentLogsRequest generates requests for GetModelDeploymentLogs
func NewGetModelDeploymentLogsRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelDeploymentMetricsRequest generates requests for GetModelDeploymentMetrics
func NewGetModelDeploymentMetricsRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelMetricsRequest generates requests for GetModelMetrics
func NewGetModelMetricsRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModelReleaseRequest generates requests for CreateModelRelease
func NewCreateModelReleaseRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPoliciesRequest generates requests for ListPolicies
func NewListPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePolicyRequest generates requests for DeletePolicy
func NewDeletePolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyRequest generates requests for GetPolicy
func NewGetPolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPolicyRequest calls the generic PutPolicy builder with application/json body
func NewPutPolicyRequest(server string, policyName string, body PutPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPolicyRequestWithBody(server, policyName, "application/json", bodyReader)
}

// NewPutPolicyRequestWithBody generates requests for PutPolicy with any type of body
func NewPutPolicyRequestWithBody(server string, policyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAllPendingInvitationsRequest generates requests for ListAllPendingInvitations
func NewListAllPendingInvitationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModelsForProviderRequest generates requests for ListModelsForProvider
func NewListModelsForProviderRequest(server string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s/models", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelWithRepoForProviderRequest generates requests for GetModelWithRepoForProvider
func NewGetModelWithRepoForProviderRequest(server string, providerId string, modelRepoId string, modelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "modelRepoId", runtime.ParamLocationPath, modelRepoId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "modelId", runtime.ParamLocationPath, modelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s/models/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationsForProviderRequest generates requests for ListOrganizationsForProvider
func NewListOrganizationsForProviderRequest(server string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListStoreAgentToolsRequest generates requests for ListStoreAgentTools
func NewListStoreAgentToolsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/agent-tools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoreAgentToolRequest generates requests for GetStoreAgentTool
func NewGetStoreAgentToolRequest(server string, toolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/agent-tools/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListToolsRequest generates requests for ListTools
func NewListToolsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteToolRequest generates requests for DeleteTool
func NewDeleteToolRequest(server string, toolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetToolRequest generates requests for GetTool
func NewGetToolRequest(server string, toolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutToolRequest calls the generic PutTool builder with application/json body
func NewPutToolRequest(server string, toolName string, body PutToolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutToolRequestWithBody(server, toolName, "application/json", bodyReader)
}

// NewPutToolRequestWithBody generates requests for PutTool with any type of body
func NewPutToolRequestWithBody(server string, toolName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListToolDeploymentsRequest generates requests for ListToolDeployments
func NewListToolDeploymentsRequest(server string, toolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteToolDeploymentRequest generates requests for DeleteToolDeployment
func NewDeleteToolDeploymentRequest(server string, toolName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetToolDeploymentRequest generates requests for GetToolDeployment
func NewGetToolDeploymentRequest(server string, toolName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutToolDeploymentRequest calls the generic PutToolDeployment builder with application/json body
func NewPutToolDeploymentRequest(server string, toolName string, environmentName string, body PutToolDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutToolDeploymentRequestWithBody(server, toolName, environmentName, "application/json", bodyReader)
}

// NewPutToolDeploymentRequestWithBody generates requests for PutToolDeployment with any type of body
func NewPutToolDeploymentRequestWithBody(server string, toolName string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolName", runtime.ParamLocationPath, toolName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tools/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorspaceRequest calls the generic CreateWorspace builder with application/json body
func NewCreateWorspaceRequest(server string, body CreateWorspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorspaceRequestWithBody generates requests for CreateWorspace with any type of body
func NewCreateWorspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, workspaceName string, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, workspaceName, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, workspaceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeclineInvitationToWorkspaceRequest generates requests for DeclineInvitationToWorkspace
func NewDeclineInvitationToWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/decline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptInvitationToWorkspaceRequest generates requests for AcceptInvitationToWorkspace
func NewAcceptInvitationToWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLeaveWorkspaceRequest generates requests for LeaveWorkspace
func NewLeaveWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/leave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceServiceAccountsRequest generates requests for GetWorkspaceServiceAccounts
func NewGetWorkspaceServiceAccountsRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/service_accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkspaceServiceAccountRequest calls the generic CreateWorkspaceServiceAccount builder with application/json body
func NewCreateWorkspaceServiceAccountRequest(server string, workspaceName string, body CreateWorkspaceServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceServiceAccountRequestWithBody(server, workspaceName, "application/json", bodyReader)
}

// NewCreateWorkspaceServiceAccountRequestWithBody generates requests for CreateWorkspaceServiceAccount with any type of body
func NewCreateWorkspaceServiceAccountRequestWithBody(server string, workspaceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/service_accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceServiceAccountRequest generates requests for DeleteWorkspaceServiceAccount
func NewDeleteWorkspaceServiceAccountRequest(server string, workspaceName string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/service_accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceServiceAccountRequest calls the generic UpdateWorkspaceServiceAccount builder with application/json body
func NewUpdateWorkspaceServiceAccountRequest(server string, workspaceName string, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceServiceAccountRequestWithBody(server, workspaceName, clientId, "application/json", bodyReader)
}

// NewUpdateWorkspaceServiceAccountRequestWithBody generates requests for UpdateWorkspaceServiceAccount with any type of body
func NewUpdateWorkspaceServiceAccountRequestWithBody(server string, workspaceName string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/service_accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApiKeysForServiceAccountRequest generates requests for ListApiKeysForServiceAccount
func NewListApiKeysForServiceAccountRequest(server string, workspaceName string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/service_accounts/%s/api_keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiKeyForServiceAccountRequest calls the generic CreateApiKeyForServiceAccount builder with application/json body
func NewCreateApiKeyForServiceAccountRequest(server string, workspaceName string, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiKeyForServiceAccountRequestWithBody(server, workspaceName, clientId, "application/json", bodyReader)
}

// NewCreateApiKeyForServiceAccountRequestWithBody generates requests for CreateApiKeyForServiceAccount with any type of body
func NewCreateApiKeyForServiceAccountRequestWithBody(server string, workspaceName string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/service_accounts/%s/api_keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeyForServiceAccountRequest generates requests for DeleteApiKeyForServiceAccount
func NewDeleteApiKeyForServiceAccountRequest(server string, workspaceName string, clientId string, apiKeyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/service_accounts/%s/api_keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsersInWorkspaceRequest generates requests for ListUsersInWorkspace
func NewListUsersInWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInviteUserToWorkspaceRequest calls the generic InviteUserToWorkspace builder with application/json body
func NewInviteUserToWorkspaceRequest(server string, workspaceName string, body InviteUserToWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInviteUserToWorkspaceRequestWithBody(server, workspaceName, "application/json", bodyReader)
}

// NewInviteUserToWorkspaceRequestWithBody generates requests for InviteUserToWorkspace with any type of body
func NewInviteUserToWorkspaceRequestWithBody(server string, workspaceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserFromWorkspaceRequest generates requests for RemoveUserFromWorkspace
func NewRemoveUserFromWorkspaceRequest(server string, workspaceName string, subOrEmail string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subOrEmail", runtime.ParamLocationPath, subOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRoleInWorkspaceRequest calls the generic UpdateUserRoleInWorkspace builder with application/json body
func NewUpdateUserRoleInWorkspaceRequest(server string, workspaceName string, subOrEmail string, body UpdateUserRoleInWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRoleInWorkspaceRequestWithBody(server, workspaceName, subOrEmail, "application/json", bodyReader)
}

// NewUpdateUserRoleInWorkspaceRequestWithBody generates requests for UpdateUserRoleInWorkspace with any type of body
func NewUpdateUserRoleInWorkspaceRequestWithBody(server string, workspaceName string, subOrEmail string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subOrEmail", runtime.ParamLocationPath, subOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListEnvironmentsWithResponse request
	ListEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// PutEnvironmentWithBodyWithResponse request with any body
	PutEnvironmentWithBodyWithResponse(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error)

	PutEnvironmentWithResponse(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error)

	// GetEnvironmentMetricsWithResponse request
	GetEnvironmentMetricsWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentMetricsResponse, error)

	// ListLocationsWithResponse request
	ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error)

	// GetMetricsWithResponse request
	GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error)

	// ListModelProvidersWithResponse request
	ListModelProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelProvidersResponse, error)

	// DeleteModelProviderWithResponse request
	DeleteModelProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*DeleteModelProviderResponse, error)

	// GetModelProviderWithResponse request
	GetModelProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*GetModelProviderResponse, error)

	// PutModelProviderWithResponse request
	PutModelProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*PutModelProviderResponse, error)

	// ListModelsWithResponse request
	ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error)

	// DeleteModelWithResponse request
	DeleteModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error)

	// GetModelWithResponse request
	GetModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelResponse, error)

	// PutModelWithResponse request
	PutModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*PutModelResponse, error)

	// ListModelDeploymentsWithResponse request
	ListModelDeploymentsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ListModelDeploymentsResponse, error)

	// DeleteModelDeploymentWithResponse request
	DeleteModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteModelDeploymentResponse, error)

	// GetModelDeploymentWithResponse request
	GetModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentResponse, error)

	// PutModelDeploymentWithBodyWithResponse request with any body
	PutModelDeploymentWithBodyWithResponse(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error)

	PutModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error)

	// GetModelDeploymentLogsWithResponse request
	GetModelDeploymentLogsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentLogsResponse, error)

	// GetModelDeploymentMetricsWithResponse request
	GetModelDeploymentMetricsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentMetricsResponse, error)

	// GetModelMetricsWithResponse request
	GetModelMetricsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelMetricsResponse, error)

	// CreateModelReleaseWithResponse request
	CreateModelReleaseWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*CreateModelReleaseResponse, error)

	// ListPoliciesWithResponse request
	ListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPoliciesResponse, error)

	// DeletePolicyWithResponse request
	DeletePolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error)

	// GetPolicyWithResponse request
	GetPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error)

	// PutPolicyWithBodyWithResponse request with any body
	PutPolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error)

	PutPolicyWithResponse(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error)

	// ListAllPendingInvitationsWithResponse request
	ListAllPendingInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllPendingInvitationsResponse, error)

	// ListModelsForProviderWithResponse request
	ListModelsForProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*ListModelsForProviderResponse, error)

	// GetModelWithRepoForProviderWithResponse request
	GetModelWithRepoForProviderWithResponse(ctx context.Context, providerId string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*GetModelWithRepoForProviderResponse, error)

	// ListOrganizationsForProviderWithResponse request
	ListOrganizationsForProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*ListOrganizationsForProviderResponse, error)

	// ListStoreAgentToolsWithResponse request
	ListStoreAgentToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreAgentToolsResponse, error)

	// GetStoreAgentToolWithResponse request
	GetStoreAgentToolWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*GetStoreAgentToolResponse, error)

	// ListToolsWithResponse request
	ListToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListToolsResponse, error)

	// DeleteToolWithResponse request
	DeleteToolWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*DeleteToolResponse, error)

	// GetToolWithResponse request
	GetToolWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*GetToolResponse, error)

	// PutToolWithBodyWithResponse request with any body
	PutToolWithBodyWithResponse(ctx context.Context, toolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutToolResponse, error)

	PutToolWithResponse(ctx context.Context, toolName string, body PutToolJSONRequestBody, reqEditors ...RequestEditorFn) (*PutToolResponse, error)

	// ListToolDeploymentsWithResponse request
	ListToolDeploymentsWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*ListToolDeploymentsResponse, error)

	// DeleteToolDeploymentWithResponse request
	DeleteToolDeploymentWithResponse(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteToolDeploymentResponse, error)

	// GetToolDeploymentWithResponse request
	GetToolDeploymentWithResponse(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*GetToolDeploymentResponse, error)

	// PutToolDeploymentWithBodyWithResponse request with any body
	PutToolDeploymentWithBodyWithResponse(ctx context.Context, toolName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutToolDeploymentResponse, error)

	PutToolDeploymentWithResponse(ctx context.Context, toolName string, environmentName string, body PutToolDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutToolDeploymentResponse, error)

	// ListWorkspacesWithResponse request
	ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error)

	// CreateWorspaceWithBodyWithResponse request with any body
	CreateWorspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error)

	CreateWorspaceWithResponse(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error)

	// DeleteWorkspaceWithResponse request
	DeleteWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspaceWithResponse request
	GetWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// UpdateWorkspaceWithBodyWithResponse request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// DeclineInvitationToWorkspaceWithResponse request
	DeclineInvitationToWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeclineInvitationToWorkspaceResponse, error)

	// AcceptInvitationToWorkspaceWithResponse request
	AcceptInvitationToWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*AcceptInvitationToWorkspaceResponse, error)

	// LeaveWorkspaceWithResponse request
	LeaveWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*LeaveWorkspaceResponse, error)

	// GetWorkspaceServiceAccountsWithResponse request
	GetWorkspaceServiceAccountsWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceServiceAccountsResponse, error)

	// CreateWorkspaceServiceAccountWithBodyWithResponse request with any body
	CreateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error)

	CreateWorkspaceServiceAccountWithResponse(ctx context.Context, workspaceName string, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error)

	// DeleteWorkspaceServiceAccountWithResponse request
	DeleteWorkspaceServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceServiceAccountResponse, error)

	// UpdateWorkspaceServiceAccountWithBodyWithResponse request with any body
	UpdateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error)

	UpdateWorkspaceServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error)

	// ListApiKeysForServiceAccountWithResponse request
	ListApiKeysForServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*ListApiKeysForServiceAccountResponse, error)

	// CreateApiKeyForServiceAccountWithBodyWithResponse request with any body
	CreateApiKeyForServiceAccountWithBodyWithResponse(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error)

	CreateApiKeyForServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error)

	// DeleteApiKeyForServiceAccountWithResponse request
	DeleteApiKeyForServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*DeleteApiKeyForServiceAccountResponse, error)

	// ListUsersInWorkspaceWithResponse request
	ListUsersInWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*ListUsersInWorkspaceResponse, error)

	// InviteUserToWorkspaceWithBodyWithResponse request with any body
	InviteUserToWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserToWorkspaceResponse, error)

	InviteUserToWorkspaceWithResponse(ctx context.Context, workspaceName string, body InviteUserToWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserToWorkspaceResponse, error)

	// RemoveUserFromWorkspaceWithResponse request
	RemoveUserFromWorkspaceWithResponse(ctx context.Context, workspaceName string, subOrEmail string, reqEditors ...RequestEditorFn) (*RemoveUserFromWorkspaceResponse, error)

	// UpdateUserRoleInWorkspaceWithBodyWithResponse request with any body
	UpdateUserRoleInWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInWorkspaceResponse, error)

	UpdateUserRoleInWorkspaceWithResponse(ctx context.Context, workspaceName string, subOrEmail string, body UpdateUserRoleInWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInWorkspaceResponse, error)
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Environment
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r PutEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentMetrics
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Location
}

// Status returns HTTPResponse.Status
func (r ListLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metrics
}

// Status returns HTTPResponse.Status
func (r GetMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelProvider
}

// Status returns HTTPResponse.Status
func (r ListModelProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelProvider
}

// Status returns HTTPResponse.Status
func (r DeleteModelProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelProvider
}

// Status returns HTTPResponse.Status
func (r GetModelProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModelProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelProvider
}

// Status returns HTTPResponse.Status
func (r PutModelProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModelProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Model
}

// Status returns HTTPResponse.Status
func (r ListModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r DeleteModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r GetModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r PutModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelDeployment
}

// Status returns HTTPResponse.Status
func (r ListModelDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeployment
}

// Status returns HTTPResponse.Status
func (r DeleteModelDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeployment
}

// Status returns HTTPResponse.Status
func (r GetModelDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModelDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeployment
}

// Status returns HTTPResponse.Status
func (r PutModelDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModelDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelDeploymentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelDeploymentLog
}

// Status returns HTTPResponse.Status
func (r GetModelDeploymentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelDeploymentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelDeploymentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeploymentMetrics
}

// Status returns HTTPResponse.Status
func (r GetModelDeploymentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelDeploymentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelMetrics
}

// Status returns HTTPResponse.Status
func (r GetModelMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModelReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelRelease
}

// Status returns HTTPResponse.Status
func (r CreateModelReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModelReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Policy
}

// Status returns HTTPResponse.Status
func (r ListPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r DeletePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r GetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r PutPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllPendingInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PendingInvitationRender
}

// Status returns HTTPResponse.Status
func (r ListAllPendingInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllPendingInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsForProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProviderModel
}

// Status returns HTTPResponse.Status
func (r ListModelsForProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsForProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelWithRepoForProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderModel
}

// Status returns HTTPResponse.Status
func (r GetModelWithRepoForProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelWithRepoForProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsForProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProviderOrganization
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsForProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsForProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStoreAgentToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StoreAgentTool
}

// Status returns HTTPResponse.Status
func (r ListStoreAgentToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStoreAgentToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoreAgentToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoreAgentTool
}

// Status returns HTTPResponse.Status
func (r GetStoreAgentToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoreAgentToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tool
}

// Status returns HTTPResponse.Status
func (r ListToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tool
}

// Status returns HTTPResponse.Status
func (r DeleteToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tool
}

// Status returns HTTPResponse.Status
func (r GetToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tool
}

// Status returns HTTPResponse.Status
func (r PutToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListToolDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ToolDeployment
}

// Status returns HTTPResponse.Status
func (r ListToolDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListToolDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteToolDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolDeployment
}

// Status returns HTTPResponse.Status
func (r DeleteToolDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteToolDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToolDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolDeployment
}

// Status returns HTTPResponse.Status
func (r GetToolDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToolDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutToolDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolDeployment
}

// Status returns HTTPResponse.Status
func (r PutToolDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutToolDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Workspace
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r CreateWorspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeclineInvitationToWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitation
}

// Status returns HTTPResponse.Status
func (r DeclineInvitationToWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeclineInvitationToWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptInvitationToWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitationAccept
}

// Status returns HTTPResponse.Status
func (r AcceptInvitationToWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptInvitationToWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LeaveWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r LeaveWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LeaveWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceServiceAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceServiceAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceServiceAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// ClientSecret Service account client secret (only returned on creation)
		ClientSecret *string `json:"client_secret,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiKeysForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApiKey
}

// Status returns HTTPResponse.Status
func (r ListApiKeysForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiKeysForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiKeyForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
}

// Status returns HTTPResponse.Status
func (r CreateApiKeyForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiKeyForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersInWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkspaceUser
}

// Status returns HTTPResponse.Status
func (r ListUsersInWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersInWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteUserToWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitation
}

// Status returns HTTPResponse.Status
func (r InviteUserToWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteUserToWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserRoleInWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceUser
}

// Status returns HTTPResponse.Status
func (r UpdateUserRoleInWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserRoleInWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// PutEnvironmentWithBodyWithResponse request with arbitrary body returning *PutEnvironmentResponse
func (c *ClientWithResponses) PutEnvironmentWithBodyWithResponse(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error) {
	rsp, err := c.PutEnvironmentWithBody(ctx, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) PutEnvironmentWithResponse(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error) {
	rsp, err := c.PutEnvironment(ctx, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnvironmentResponse(rsp)
}

// GetEnvironmentMetricsWithResponse request returning *GetEnvironmentMetricsResponse
func (c *ClientWithResponses) GetEnvironmentMetricsWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentMetricsResponse, error) {
	rsp, err := c.GetEnvironmentMetrics(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentMetricsResponse(rsp)
}

// ListLocationsWithResponse request returning *ListLocationsResponse
func (c *ClientWithResponses) ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error) {
	rsp, err := c.ListLocations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLocationsResponse(rsp)
}

// GetMetricsWithResponse request returning *GetMetricsResponse
func (c *ClientWithResponses) GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error) {
	rsp, err := c.GetMetrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsResponse(rsp)
}

// ListModelProvidersWithResponse request returning *ListModelProvidersResponse
func (c *ClientWithResponses) ListModelProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelProvidersResponse, error) {
	rsp, err := c.ListModelProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelProvidersResponse(rsp)
}

// DeleteModelProviderWithResponse request returning *DeleteModelProviderResponse
func (c *ClientWithResponses) DeleteModelProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*DeleteModelProviderResponse, error) {
	rsp, err := c.DeleteModelProvider(ctx, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelProviderResponse(rsp)
}

// GetModelProviderWithResponse request returning *GetModelProviderResponse
func (c *ClientWithResponses) GetModelProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*GetModelProviderResponse, error) {
	rsp, err := c.GetModelProvider(ctx, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelProviderResponse(rsp)
}

// PutModelProviderWithResponse request returning *PutModelProviderResponse
func (c *ClientWithResponses) PutModelProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*PutModelProviderResponse, error) {
	rsp, err := c.PutModelProvider(ctx, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelProviderResponse(rsp)
}

// ListModelsWithResponse request returning *ListModelsResponse
func (c *ClientWithResponses) ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error) {
	rsp, err := c.ListModels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsResponse(rsp)
}

// DeleteModelWithResponse request returning *DeleteModelResponse
func (c *ClientWithResponses) DeleteModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error) {
	rsp, err := c.DeleteModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelResponse(rsp)
}

// GetModelWithResponse request returning *GetModelResponse
func (c *ClientWithResponses) GetModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelResponse, error) {
	rsp, err := c.GetModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelResponse(rsp)
}

// PutModelWithResponse request returning *PutModelResponse
func (c *ClientWithResponses) PutModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*PutModelResponse, error) {
	rsp, err := c.PutModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelResponse(rsp)
}

// ListModelDeploymentsWithResponse request returning *ListModelDeploymentsResponse
func (c *ClientWithResponses) ListModelDeploymentsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ListModelDeploymentsResponse, error) {
	rsp, err := c.ListModelDeployments(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelDeploymentsResponse(rsp)
}

// DeleteModelDeploymentWithResponse request returning *DeleteModelDeploymentResponse
func (c *ClientWithResponses) DeleteModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteModelDeploymentResponse, error) {
	rsp, err := c.DeleteModelDeployment(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelDeploymentResponse(rsp)
}

// GetModelDeploymentWithResponse request returning *GetModelDeploymentResponse
func (c *ClientWithResponses) GetModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentResponse, error) {
	rsp, err := c.GetModelDeployment(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelDeploymentResponse(rsp)
}

// PutModelDeploymentWithBodyWithResponse request with arbitrary body returning *PutModelDeploymentResponse
func (c *ClientWithResponses) PutModelDeploymentWithBodyWithResponse(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error) {
	rsp, err := c.PutModelDeploymentWithBody(ctx, modelName, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelDeploymentResponse(rsp)
}

func (c *ClientWithResponses) PutModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error) {
	rsp, err := c.PutModelDeployment(ctx, modelName, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelDeploymentResponse(rsp)
}

// GetModelDeploymentLogsWithResponse request returning *GetModelDeploymentLogsResponse
func (c *ClientWithResponses) GetModelDeploymentLogsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentLogsResponse, error) {
	rsp, err := c.GetModelDeploymentLogs(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelDeploymentLogsResponse(rsp)
}

// GetModelDeploymentMetricsWithResponse request returning *GetModelDeploymentMetricsResponse
func (c *ClientWithResponses) GetModelDeploymentMetricsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentMetricsResponse, error) {
	rsp, err := c.GetModelDeploymentMetrics(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelDeploymentMetricsResponse(rsp)
}

// GetModelMetricsWithResponse request returning *GetModelMetricsResponse
func (c *ClientWithResponses) GetModelMetricsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelMetricsResponse, error) {
	rsp, err := c.GetModelMetrics(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelMetricsResponse(rsp)
}

// CreateModelReleaseWithResponse request returning *CreateModelReleaseResponse
func (c *ClientWithResponses) CreateModelReleaseWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*CreateModelReleaseResponse, error) {
	rsp, err := c.CreateModelRelease(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModelReleaseResponse(rsp)
}

// ListPoliciesWithResponse request returning *ListPoliciesResponse
func (c *ClientWithResponses) ListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPoliciesResponse, error) {
	rsp, err := c.ListPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPoliciesResponse(rsp)
}

// DeletePolicyWithResponse request returning *DeletePolicyResponse
func (c *ClientWithResponses) DeletePolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error) {
	rsp, err := c.DeletePolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyResponse(rsp)
}

// GetPolicyWithResponse request returning *GetPolicyResponse
func (c *ClientWithResponses) GetPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error) {
	rsp, err := c.GetPolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyResponse(rsp)
}

// PutPolicyWithBodyWithResponse request with arbitrary body returning *PutPolicyResponse
func (c *ClientWithResponses) PutPolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error) {
	rsp, err := c.PutPolicyWithBody(ctx, policyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyResponse(rsp)
}

func (c *ClientWithResponses) PutPolicyWithResponse(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error) {
	rsp, err := c.PutPolicy(ctx, policyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyResponse(rsp)
}

// ListAllPendingInvitationsWithResponse request returning *ListAllPendingInvitationsResponse
func (c *ClientWithResponses) ListAllPendingInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllPendingInvitationsResponse, error) {
	rsp, err := c.ListAllPendingInvitations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllPendingInvitationsResponse(rsp)
}

// ListModelsForProviderWithResponse request returning *ListModelsForProviderResponse
func (c *ClientWithResponses) ListModelsForProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*ListModelsForProviderResponse, error) {
	rsp, err := c.ListModelsForProvider(ctx, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsForProviderResponse(rsp)
}

// GetModelWithRepoForProviderWithResponse request returning *GetModelWithRepoForProviderResponse
func (c *ClientWithResponses) GetModelWithRepoForProviderWithResponse(ctx context.Context, providerId string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*GetModelWithRepoForProviderResponse, error) {
	rsp, err := c.GetModelWithRepoForProvider(ctx, providerId, modelRepoId, modelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelWithRepoForProviderResponse(rsp)
}

// ListOrganizationsForProviderWithResponse request returning *ListOrganizationsForProviderResponse
func (c *ClientWithResponses) ListOrganizationsForProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*ListOrganizationsForProviderResponse, error) {
	rsp, err := c.ListOrganizationsForProvider(ctx, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsForProviderResponse(rsp)
}

// ListStoreAgentToolsWithResponse request returning *ListStoreAgentToolsResponse
func (c *ClientWithResponses) ListStoreAgentToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreAgentToolsResponse, error) {
	rsp, err := c.ListStoreAgentTools(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStoreAgentToolsResponse(rsp)
}

// GetStoreAgentToolWithResponse request returning *GetStoreAgentToolResponse
func (c *ClientWithResponses) GetStoreAgentToolWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*GetStoreAgentToolResponse, error) {
	rsp, err := c.GetStoreAgentTool(ctx, toolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoreAgentToolResponse(rsp)
}

// ListToolsWithResponse request returning *ListToolsResponse
func (c *ClientWithResponses) ListToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListToolsResponse, error) {
	rsp, err := c.ListTools(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListToolsResponse(rsp)
}

// DeleteToolWithResponse request returning *DeleteToolResponse
func (c *ClientWithResponses) DeleteToolWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*DeleteToolResponse, error) {
	rsp, err := c.DeleteTool(ctx, toolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteToolResponse(rsp)
}

// GetToolWithResponse request returning *GetToolResponse
func (c *ClientWithResponses) GetToolWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*GetToolResponse, error) {
	rsp, err := c.GetTool(ctx, toolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToolResponse(rsp)
}

// PutToolWithBodyWithResponse request with arbitrary body returning *PutToolResponse
func (c *ClientWithResponses) PutToolWithBodyWithResponse(ctx context.Context, toolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutToolResponse, error) {
	rsp, err := c.PutToolWithBody(ctx, toolName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutToolResponse(rsp)
}

func (c *ClientWithResponses) PutToolWithResponse(ctx context.Context, toolName string, body PutToolJSONRequestBody, reqEditors ...RequestEditorFn) (*PutToolResponse, error) {
	rsp, err := c.PutTool(ctx, toolName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutToolResponse(rsp)
}

// ListToolDeploymentsWithResponse request returning *ListToolDeploymentsResponse
func (c *ClientWithResponses) ListToolDeploymentsWithResponse(ctx context.Context, toolName string, reqEditors ...RequestEditorFn) (*ListToolDeploymentsResponse, error) {
	rsp, err := c.ListToolDeployments(ctx, toolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListToolDeploymentsResponse(rsp)
}

// DeleteToolDeploymentWithResponse request returning *DeleteToolDeploymentResponse
func (c *ClientWithResponses) DeleteToolDeploymentWithResponse(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteToolDeploymentResponse, error) {
	rsp, err := c.DeleteToolDeployment(ctx, toolName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteToolDeploymentResponse(rsp)
}

// GetToolDeploymentWithResponse request returning *GetToolDeploymentResponse
func (c *ClientWithResponses) GetToolDeploymentWithResponse(ctx context.Context, toolName string, environmentName string, reqEditors ...RequestEditorFn) (*GetToolDeploymentResponse, error) {
	rsp, err := c.GetToolDeployment(ctx, toolName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToolDeploymentResponse(rsp)
}

// PutToolDeploymentWithBodyWithResponse request with arbitrary body returning *PutToolDeploymentResponse
func (c *ClientWithResponses) PutToolDeploymentWithBodyWithResponse(ctx context.Context, toolName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutToolDeploymentResponse, error) {
	rsp, err := c.PutToolDeploymentWithBody(ctx, toolName, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutToolDeploymentResponse(rsp)
}

func (c *ClientWithResponses) PutToolDeploymentWithResponse(ctx context.Context, toolName string, environmentName string, body PutToolDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutToolDeploymentResponse, error) {
	rsp, err := c.PutToolDeployment(ctx, toolName, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutToolDeploymentResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// CreateWorspaceWithBodyWithResponse request with arbitrary body returning *CreateWorspaceResponse
func (c *ClientWithResponses) CreateWorspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error) {
	rsp, err := c.CreateWorspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorspaceWithResponse(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error) {
	rsp, err := c.CreateWorspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorspaceResponse(rsp)
}

// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, workspaceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, workspaceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// DeclineInvitationToWorkspaceWithResponse request returning *DeclineInvitationToWorkspaceResponse
func (c *ClientWithResponses) DeclineInvitationToWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeclineInvitationToWorkspaceResponse, error) {
	rsp, err := c.DeclineInvitationToWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeclineInvitationToWorkspaceResponse(rsp)
}

// AcceptInvitationToWorkspaceWithResponse request returning *AcceptInvitationToWorkspaceResponse
func (c *ClientWithResponses) AcceptInvitationToWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*AcceptInvitationToWorkspaceResponse, error) {
	rsp, err := c.AcceptInvitationToWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptInvitationToWorkspaceResponse(rsp)
}

// LeaveWorkspaceWithResponse request returning *LeaveWorkspaceResponse
func (c *ClientWithResponses) LeaveWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*LeaveWorkspaceResponse, error) {
	rsp, err := c.LeaveWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLeaveWorkspaceResponse(rsp)
}

// GetWorkspaceServiceAccountsWithResponse request returning *GetWorkspaceServiceAccountsResponse
func (c *ClientWithResponses) GetWorkspaceServiceAccountsWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceServiceAccountsResponse, error) {
	rsp, err := c.GetWorkspaceServiceAccounts(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceServiceAccountsResponse(rsp)
}

// CreateWorkspaceServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceServiceAccountResponse
func (c *ClientWithResponses) CreateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.CreateWorkspaceServiceAccountWithBody(ctx, workspaceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceServiceAccountWithResponse(ctx context.Context, workspaceName string, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.CreateWorkspaceServiceAccount(ctx, workspaceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceServiceAccountResponse(rsp)
}

// DeleteWorkspaceServiceAccountWithResponse request returning *DeleteWorkspaceServiceAccountResponse
func (c *ClientWithResponses) DeleteWorkspaceServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceServiceAccountResponse, error) {
	rsp, err := c.DeleteWorkspaceServiceAccount(ctx, workspaceName, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceServiceAccountResponse(rsp)
}

// UpdateWorkspaceServiceAccountWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceServiceAccountResponse
func (c *ClientWithResponses) UpdateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.UpdateWorkspaceServiceAccountWithBody(ctx, workspaceName, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.UpdateWorkspaceServiceAccount(ctx, workspaceName, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceServiceAccountResponse(rsp)
}

// ListApiKeysForServiceAccountWithResponse request returning *ListApiKeysForServiceAccountResponse
func (c *ClientWithResponses) ListApiKeysForServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, reqEditors ...RequestEditorFn) (*ListApiKeysForServiceAccountResponse, error) {
	rsp, err := c.ListApiKeysForServiceAccount(ctx, workspaceName, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiKeysForServiceAccountResponse(rsp)
}

// CreateApiKeyForServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateApiKeyForServiceAccountResponse
func (c *ClientWithResponses) CreateApiKeyForServiceAccountWithBodyWithResponse(ctx context.Context, workspaceName string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error) {
	rsp, err := c.CreateApiKeyForServiceAccountWithBody(ctx, workspaceName, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyForServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateApiKeyForServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error) {
	rsp, err := c.CreateApiKeyForServiceAccount(ctx, workspaceName, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyForServiceAccountResponse(rsp)
}

// DeleteApiKeyForServiceAccountWithResponse request returning *DeleteApiKeyForServiceAccountResponse
func (c *ClientWithResponses) DeleteApiKeyForServiceAccountWithResponse(ctx context.Context, workspaceName string, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*DeleteApiKeyForServiceAccountResponse, error) {
	rsp, err := c.DeleteApiKeyForServiceAccount(ctx, workspaceName, clientId, apiKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyForServiceAccountResponse(rsp)
}

// ListUsersInWorkspaceWithResponse request returning *ListUsersInWorkspaceResponse
func (c *ClientWithResponses) ListUsersInWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*ListUsersInWorkspaceResponse, error) {
	rsp, err := c.ListUsersInWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersInWorkspaceResponse(rsp)
}

// InviteUserToWorkspaceWithBodyWithResponse request with arbitrary body returning *InviteUserToWorkspaceResponse
func (c *ClientWithResponses) InviteUserToWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserToWorkspaceResponse, error) {
	rsp, err := c.InviteUserToWorkspaceWithBody(ctx, workspaceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserToWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) InviteUserToWorkspaceWithResponse(ctx context.Context, workspaceName string, body InviteUserToWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserToWorkspaceResponse, error) {
	rsp, err := c.InviteUserToWorkspace(ctx, workspaceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserToWorkspaceResponse(rsp)
}

// RemoveUserFromWorkspaceWithResponse request returning *RemoveUserFromWorkspaceResponse
func (c *ClientWithResponses) RemoveUserFromWorkspaceWithResponse(ctx context.Context, workspaceName string, subOrEmail string, reqEditors ...RequestEditorFn) (*RemoveUserFromWorkspaceResponse, error) {
	rsp, err := c.RemoveUserFromWorkspace(ctx, workspaceName, subOrEmail, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromWorkspaceResponse(rsp)
}

// UpdateUserRoleInWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateUserRoleInWorkspaceResponse
func (c *ClientWithResponses) UpdateUserRoleInWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserRoleInWorkspaceResponse, error) {
	rsp, err := c.UpdateUserRoleInWorkspaceWithBody(ctx, workspaceName, subOrEmail, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserRoleInWorkspaceWithResponse(ctx context.Context, workspaceName string, subOrEmail string, body UpdateUserRoleInWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserRoleInWorkspaceResponse, error) {
	rsp, err := c.UpdateUserRoleInWorkspace(ctx, workspaceName, subOrEmail, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserRoleInWorkspaceResponse(rsp)
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutEnvironmentResponse parses an HTTP response from a PutEnvironmentWithResponse call
func ParsePutEnvironmentResponse(rsp *http.Response) (*PutEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentMetricsResponse parses an HTTP response from a GetEnvironmentMetricsWithResponse call
func ParseGetEnvironmentMetricsResponse(rsp *http.Response) (*GetEnvironmentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLocationsResponse parses an HTTP response from a ListLocationsWithResponse call
func ParseListLocationsResponse(rsp *http.Response) (*ListLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMetricsResponse parses an HTTP response from a GetMetricsWithResponse call
func ParseGetMetricsResponse(rsp *http.Response) (*GetMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelProvidersResponse parses an HTTP response from a ListModelProvidersWithResponse call
func ParseListModelProvidersResponse(rsp *http.Response) (*ListModelProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelProviderResponse parses an HTTP response from a DeleteModelProviderWithResponse call
func ParseDeleteModelProviderResponse(rsp *http.Response) (*DeleteModelProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelProviderResponse parses an HTTP response from a GetModelProviderWithResponse call
func ParseGetModelProviderResponse(rsp *http.Response) (*GetModelProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutModelProviderResponse parses an HTTP response from a PutModelProviderWithResponse call
func ParsePutModelProviderResponse(rsp *http.Response) (*PutModelProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModelProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelsResponse parses an HTTP response from a ListModelsWithResponse call
func ParseListModelsResponse(rsp *http.Response) (*ListModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelResponse parses an HTTP response from a DeleteModelWithResponse call
func ParseDeleteModelResponse(rsp *http.Response) (*DeleteModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelResponse parses an HTTP response from a GetModelWithResponse call
func ParseGetModelResponse(rsp *http.Response) (*GetModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutModelResponse parses an HTTP response from a PutModelWithResponse call
func ParsePutModelResponse(rsp *http.Response) (*PutModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelDeploymentsResponse parses an HTTP response from a ListModelDeploymentsWithResponse call
func ParseListModelDeploymentsResponse(rsp *http.Response) (*ListModelDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelDeploymentResponse parses an HTTP response from a DeleteModelDeploymentWithResponse call
func ParseDeleteModelDeploymentResponse(rsp *http.Response) (*DeleteModelDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelDeploymentResponse parses an HTTP response from a GetModelDeploymentWithResponse call
func ParseGetModelDeploymentResponse(rsp *http.Response) (*GetModelDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutModelDeploymentResponse parses an HTTP response from a PutModelDeploymentWithResponse call
func ParsePutModelDeploymentResponse(rsp *http.Response) (*PutModelDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModelDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelDeploymentLogsResponse parses an HTTP response from a GetModelDeploymentLogsWithResponse call
func ParseGetModelDeploymentLogsResponse(rsp *http.Response) (*GetModelDeploymentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelDeploymentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelDeploymentLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelDeploymentMetricsResponse parses an HTTP response from a GetModelDeploymentMetricsWithResponse call
func ParseGetModelDeploymentMetricsResponse(rsp *http.Response) (*GetModelDeploymentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelDeploymentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeploymentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelMetricsResponse parses an HTTP response from a GetModelMetricsWithResponse call
func ParseGetModelMetricsResponse(rsp *http.Response) (*GetModelMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateModelReleaseResponse parses an HTTP response from a CreateModelReleaseWithResponse call
func ParseCreateModelReleaseResponse(rsp *http.Response) (*CreateModelReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModelReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelRelease
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPoliciesResponse parses an HTTP response from a ListPoliciesWithResponse call
func ParseListPoliciesResponse(rsp *http.Response) (*ListPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePolicyResponse parses an HTTP response from a DeletePolicyWithResponse call
func ParseDeletePolicyResponse(rsp *http.Response) (*DeletePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicyResponse parses an HTTP response from a GetPolicyWithResponse call
func ParseGetPolicyResponse(rsp *http.Response) (*GetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPolicyResponse parses an HTTP response from a PutPolicyWithResponse call
func ParsePutPolicyResponse(rsp *http.Response) (*PutPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAllPendingInvitationsResponse parses an HTTP response from a ListAllPendingInvitationsWithResponse call
func ParseListAllPendingInvitationsResponse(rsp *http.Response) (*ListAllPendingInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllPendingInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PendingInvitationRender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelsForProviderResponse parses an HTTP response from a ListModelsForProviderWithResponse call
func ParseListModelsForProviderResponse(rsp *http.Response) (*ListModelsForProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsForProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProviderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelWithRepoForProviderResponse parses an HTTP response from a GetModelWithRepoForProviderWithResponse call
func ParseGetModelWithRepoForProviderResponse(rsp *http.Response) (*GetModelWithRepoForProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelWithRepoForProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationsForProviderResponse parses an HTTP response from a ListOrganizationsForProviderWithResponse call
func ParseListOrganizationsForProviderResponse(rsp *http.Response) (*ListOrganizationsForProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsForProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProviderOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListStoreAgentToolsResponse parses an HTTP response from a ListStoreAgentToolsWithResponse call
func ParseListStoreAgentToolsResponse(rsp *http.Response) (*ListStoreAgentToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStoreAgentToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StoreAgentTool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStoreAgentToolResponse parses an HTTP response from a GetStoreAgentToolWithResponse call
func ParseGetStoreAgentToolResponse(rsp *http.Response) (*GetStoreAgentToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoreAgentToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoreAgentTool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListToolsResponse parses an HTTP response from a ListToolsWithResponse call
func ParseListToolsResponse(rsp *http.Response) (*ListToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteToolResponse parses an HTTP response from a DeleteToolWithResponse call
func ParseDeleteToolResponse(rsp *http.Response) (*DeleteToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetToolResponse parses an HTTP response from a GetToolWithResponse call
func ParseGetToolResponse(rsp *http.Response) (*GetToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutToolResponse parses an HTTP response from a PutToolWithResponse call
func ParsePutToolResponse(rsp *http.Response) (*PutToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListToolDeploymentsResponse parses an HTTP response from a ListToolDeploymentsWithResponse call
func ParseListToolDeploymentsResponse(rsp *http.Response) (*ListToolDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListToolDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ToolDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteToolDeploymentResponse parses an HTTP response from a DeleteToolDeploymentWithResponse call
func ParseDeleteToolDeploymentResponse(rsp *http.Response) (*DeleteToolDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteToolDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetToolDeploymentResponse parses an HTTP response from a GetToolDeploymentWithResponse call
func ParseGetToolDeploymentResponse(rsp *http.Response) (*GetToolDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToolDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutToolDeploymentResponse parses an HTTP response from a PutToolDeploymentWithResponse call
func ParsePutToolDeploymentResponse(rsp *http.Response) (*PutToolDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutToolDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorspaceResponse parses an HTTP response from a CreateWorspaceWithResponse call
func ParseCreateWorspaceResponse(rsp *http.Response) (*CreateWorspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeclineInvitationToWorkspaceResponse parses an HTTP response from a DeclineInvitationToWorkspaceWithResponse call
func ParseDeclineInvitationToWorkspaceResponse(rsp *http.Response) (*DeclineInvitationToWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeclineInvitationToWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptInvitationToWorkspaceResponse parses an HTTP response from a AcceptInvitationToWorkspaceWithResponse call
func ParseAcceptInvitationToWorkspaceResponse(rsp *http.Response) (*AcceptInvitationToWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptInvitationToWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitationAccept
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLeaveWorkspaceResponse parses an HTTP response from a LeaveWorkspaceWithResponse call
func ParseLeaveWorkspaceResponse(rsp *http.Response) (*LeaveWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LeaveWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceServiceAccountsResponse parses an HTTP response from a GetWorkspaceServiceAccountsWithResponse call
func ParseGetWorkspaceServiceAccountsResponse(rsp *http.Response) (*GetWorkspaceServiceAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceServiceAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceServiceAccountResponse parses an HTTP response from a CreateWorkspaceServiceAccountWithResponse call
func ParseCreateWorkspaceServiceAccountResponse(rsp *http.Response) (*CreateWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// ClientSecret Service account client secret (only returned on creation)
			ClientSecret *string `json:"client_secret,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceServiceAccountResponse parses an HTTP response from a DeleteWorkspaceServiceAccountWithResponse call
func ParseDeleteWorkspaceServiceAccountResponse(rsp *http.Response) (*DeleteWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceServiceAccountResponse parses an HTTP response from a UpdateWorkspaceServiceAccountWithResponse call
func ParseUpdateWorkspaceServiceAccountResponse(rsp *http.Response) (*UpdateWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApiKeysForServiceAccountResponse parses an HTTP response from a ListApiKeysForServiceAccountWithResponse call
func ParseListApiKeysForServiceAccountResponse(rsp *http.Response) (*ListApiKeysForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiKeysForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiKeyForServiceAccountResponse parses an HTTP response from a CreateApiKeyForServiceAccountWithResponse call
func ParseCreateApiKeyForServiceAccountResponse(rsp *http.Response) (*CreateApiKeyForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiKeyForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeyForServiceAccountResponse parses an HTTP response from a DeleteApiKeyForServiceAccountWithResponse call
func ParseDeleteApiKeyForServiceAccountResponse(rsp *http.Response) (*DeleteApiKeyForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListUsersInWorkspaceResponse parses an HTTP response from a ListUsersInWorkspaceWithResponse call
func ParseListUsersInWorkspaceResponse(rsp *http.Response) (*ListUsersInWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersInWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkspaceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInviteUserToWorkspaceResponse parses an HTTP response from a InviteUserToWorkspaceWithResponse call
func ParseInviteUserToWorkspaceResponse(rsp *http.Response) (*InviteUserToWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InviteUserToWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromWorkspaceResponse parses an HTTP response from a RemoveUserFromWorkspaceWithResponse call
func ParseRemoveUserFromWorkspaceResponse(rsp *http.Response) (*RemoveUserFromWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUserRoleInWorkspaceResponse parses an HTTP response from a UpdateUserRoleInWorkspaceWithResponse call
func ParseUpdateUserRoleInWorkspaceResponse(rsp *http.Response) (*UpdateUserRoleInWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserRoleInWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9XXPbtpZ/BcPdmU1mdC1vbx92/ObGzb3eOq1rJ5OHNqOByCMJDQmwAChH6/F/38EH",
	"vwGSkknZSfyUWAQOgHMOzjeA+yBkScooUCmCs/tAhBtIsP7veUp+gZ36H47j31bB2R/3wX9yWAVnwX/M",
	"y15z22V+KzGNMI/eEogjcbGjOGEXy+Bhdh+knKXAJQENGKdk8dlAjkCEnKSSMBqcqRGR+jAL5C6F4CwQ",
	"khO6Dh5mapYJUNnu88Z8QCvGkdwAOr++9MGALynhIBaEtsFcZByr/6KMShIj3dT88IpQJCBkNBKvXVBF",
	"tmyD+yCAI5Et/4JQIhIBlWRFgHv6L8yPTSC3tr/+2ur58PBp1uhwxej6HzHZQpSjQaMFhyEIQega/QQ4",
	"iYksgTE9gprGOed49w4kJ6GDMOojYiuU6AYimAVEQqKp2cUSFt5DMR5WgNTfF5DGbKcod81iElrOKIDW",
	"h9dNdojiBFwY9MO+Bb4FHoMQbxhdkbWLfdTvOfFzJhJFP5SwCGIUFSCDWYObYyzkImXRgoNUdGZ0kQIn",
	"LGoP9n4DSDVHKYtQ0RzZ5o6VJfjLgmbJgkMakxALN8gEfyFJliCaJUvgikxF+wImoRLWwDVQD5ENsZBk",
	"SIQ4BsToDIWYoiWgP4Mwzf4MEOPozyCBhPFd/hdPRf7fkNEw4xxouPszcC6H0CHLIXSf5ejJLiJ2RxcR",
	"xHjnBmqWpFoh08q1EzWkLF3YGXRBytJ8nu5JSbyMYXFHaMTuPHB0E2SbuNga8zU4JN57/Tva4jiDgmMt",
	"UV1ggCeEav5erDkOwbLnwgo19+wqvZDuZbk0F4WOVT84pMrPdEs4o7noHlmRRESkMd4ttGBwLsO20KJD",
	"cZJCFVTm5MBXjJcQ90q2K9PqYRb4B99j0LQiBNuA8q8IS4nDDURqk7ah5tLTIRLvGP8sUhx6Zlp8bkJF",
	"S4gZXQsk2SANVKE3YhTdbUi4qQhPge5IHCuJkuAI0Cs4WZ+gCLYQs1R9n6GUsygLFbTXMwR0xXioFFeS",
	"xZKkcQ0ViNEQToJurntnFZZH2oliA9VRWeczQlegxJreOnbfLNYxW+K4j0+qatW5Q97GeMu4Q+Vqta/Y",
	"Z4N5dIc5ILzFJNZCQ026gtXWhN08aYYybGlQL3987Veonu56WqZ7mGYztE4zBxD/Ul08vktBDF7qIMvD",
	"otWxFa6K/d0wnszvTVTaBZ3dD1nhFQuxAdeCbr/kKyMxkcY6K7Z+c+SQUUmo0+gtoJVtnDZzRiXfdXY3",
	"LRydVz5iFZ3zFo+mSNyPNZ/p52b03m5CYpl1rc02GMTW7zrtqRZZJUlASJykfgusaOGYulb73q7m6x7T",
	"7pGMHATLeOjgTm0X9/S2bdzDq29HtwneGWu+YhVMZwKYsXxj7KWRjROypy6+YmsS4hgZnCsjmoNQLgdd",
	"I2xAzpDcYJlb+YQKiakkWEKECC2VbkU3CoTbPpEIfAQuXbEJSA1UaQiHn3W5QiscC5hVkFfO1tgglCnj",
	"BuFQki0gyrhx+hCHvzMQ1SUtGYsBUx1BqJuzg00+hU1jCzknRIT9C6Ix2NH4AouUcemzJ7nUfp5ecek+",
	"CMSo22XMN2v3ilPM1XJMa5f/pz4sUs62JAK+0IvpCSCoHte2ww2sjK0cLSQkaYwl+NYXobzFDIkNy+JI",
	"E1vJRxKhX7IlcAoSRK2pi4urhnnXRB3xjIdZwDOqhPkirEYZ+kDdmE61yEQVWAcxRJytaxQxrMY4WRPq",
	"okgO023xaUfQWqFDoJVhE7vi4VhrRWosOELX+zGymaKbjQ+QuZVduqf4PadWoIYaf4XEzXe6kgkYiRRC",
	"siKh20H0StMrtnZZL2sT7+sPWiUgBF6DMx4mtfNmKB6ztdNB8Nswmmfyz51gHvqXOchGwUgQuo6hf9Vj",
	"+XEzN6RUy7S105L9NxGSca2Pcw2DUuA2nIJe3VzfvtY/5MbwrAzt9C2rHPNRnujfGfCdGzP1tdxc39ro",
	"0ytCTUDzhx/RhmVcvPbOGhloccXZMAE+59DqvyGLYCB1fr++9YIZhp1+CMWc9kSIIioHkTIqwPoVSIGZ",
	"ltp6PW0qe/fcATttwu31WEJ6l5mbEhNYo94MlfEDcqsH5e2cDvsQpZmvoVSUY/orxTy7sy09nd0pq04N",
	"/LHQvu6RHSq2PmjQR/QbY2829i5YplV2RK45KyDrRP5MqCevo77U7aQcSJFFuW5NtC+Q0TSwE8+Ce1Xq",
	"DcSAhZdu3HyeoUyY4LKRPwU+VpwliNG6T6PwRZncONCk2rfH+k0bjjUYGnDTMyIin5DTHZLMkb4FIfN0",
	"RWOOe0F3IfAaaETo+pJuiSwM+LFd2QST2JNGNt8ciCBqRhAtljt/Atpp9LPYwQnnb66Q/jL5trUIRaTA",
	"qPaPizGG0OA8DCF1CFsHbGyazsZAeQ0RXZQv0DKQp26AWrW0L65GZCTsQGg5RRTVfGQfH3aqLveyLw2A",
	"n3aHcWcmgC+sMdnq+GuRRVbNhMKerPp6LnN0MJU96zmM+CUW3ESACC134xB8hRMS+2Kkuqtp4TUC1mQL",
	"tKu/buCPv3fVzBwolZuo90uqFg67Y8alhOuLG/f190hI1+p0xcvRw+O20KZvnZXcUH/GRxxioeZ+UW8X",
	"M+OrormXCoNqiDyd1MfCisunhhi3KbBHh/dTM8yeAaabLAYbv2dUchYLtGF3CDciyzrTjmlkgmSRTd0W",
	"q+CghtAZ92p9W5MV/ZlNi6MiiTcsF93odRhdit6eCrne1XhrzYoGCoNYDxSbUKhG+B3HqfpdxMRE967K",
	"1Q9KhjaQ6kiKNry8fq9SN2si35T+LST7DNTNiaYF0i2UuZyJsqgo7XBYViQGv9OivhrPpQHSmxtIOQiy",
	"phAtMu6JbhdN0IebK6EhpzHDUcW411unow5mxIC8k7sswt65Q/SGZmwpMVGr0M4Ppgi+SOAUVz1GkYUb",
	"hAX6d7ZeE7p+i0OYod9SoOeXMwQyPDk5adcLcMA+Ky6fmEWTbYqwMwwRsTuq8Cp64ZQtXeF2EvUCuLxw",
	"JrzIkmPuVVJ1ELaxP5lLPoMYAOUzuFcxaBK+wVOSQkwoLCRe9wLJGyPV2LlFyNaZ82rCse1cGUyJ1/3I",
	"0I0qkqy34lZyY40tRMh4/wTz5sg0H1ZKmMP4ja8xJf/n0UbVr0ZWb5iQNmUt/FsOverYaq/bcnWLJeZu",
	"UVUsllXnYnooyeXcct1mmRNin5XWuf1qkNy7cJ+5DLdsf7++bQP9PQO+q+ZD1H8hBlMTaA0vbyDdWDQ/",
	"nJ7O0I+np6+VYVaNrXsi6J5Y/u/Xt1pZVXo3/EPXqpwqoh1rNK1Q6Cw67438Y772FIhivs5MdYZkKMVa",
	"n9fUbYdKBLr1QK0G0raYE7yMQZh0q8z9aJvU7MyxV+EUdkrHjEjiTE2qKelP1qZwhrYAR4QqkyflbOkB",
	"UjRCppGDnmXdkweC/YzuiNygz/8jdCLXZ+V0ZV88nlv7MIhth1a6oR7qGrggJsW8lzWgK6OxNG6B5si7",
	"DRh65itDd1jkZoIz5pJGjwZvYQyTG7eScThfA5XvGZukcKy6hjb2GQeE1yamzNQ2LT/vLc/b0PpEuXtH",
	"tOCYdp0lRD0Q4rwKtkWAgUvxWkKY4wQk8CGzqDQe6FDV2eM67982VhyOdHP4oJf9Svh7rKUddtqL4wo4",
	"fbw3kFAlPB/JOPydEe4qsOsAVnRyWp/uc25+aMMd+6eQCu8bkmCGtsqOIUnKuMSVQ4mVtUmmgz9GcWCK",
	"rq7e7S9A3g8RGiMdZDl0U7+vb2RT4bBjGUerjIbGPmfKYghxHNujUHKD9B4bfdfPAqGaLlw28Rut5axr",
	"gHQ7pExEIYHrbCiLp8+J5diytVfqz4uqJejk96eprv24AbkBw9hWF1bjjXm/Metnx2Dv77VsdOSiTGnl",
	"bDftDtg07bB4k7n2jI+/b3SvY9NBtFru6Kh5l+EpJp8hV0LY14I7QFh97ErVFx8/CJd9VA6XCYdNZJL1",
	"fWJHdUUbLFDevJ7TrWTL3WLInTOtT82fPdUfFlvgZEWGzPS/hIGlZ7wEoKjo65pdZ3K2McdHpGkbkLoT",
	"tu6kfAOELz/vzPY2+nbdkeAsYxQQZpzI3a3aiYZ3fgLMgZ9ncqP+Wuq/3jKeKB81+N+P74OZud5C41t/",
	"LcfaSJkqXtelvcyc05JqzYG9MwG9MUk2dB1jqpa5Vc63XsrpyenJf6uFshQoTklwFvzz5PTkn4q5sdzo",
	"uc2rZ2jUD/Zot+J9zaiXUXAWXBEhf6421JEIHfHSnX44Pc1PBuZKP9VH4xWE+V/CaAkjnGr3KXTJsOoZ",
	"bYe71Nz8ItMZo1UWo2LyNYpooVmlxR9VvS/OYiJk8ElJFZElCeY7u3CE47h21CjIw9V1AMEnNVoNofP7",
	"yl+/4gQeDMPFYHR9HcsX+vef6wd+K5bsH60aEq9VQtRnReQgF69BYyZB1Y+SPINZhT5NRv/0SHoPJvME",
	"ZLXYbhDW4Lp+pLyUV27qztyb418g6zT7alGlltfA079A7oukZ8Oyaeag1nXWopY+9vATi3bTEao+74ev",
	"mEdMcLTJJtZXZRx90N/345l+sTlPynMAAzbhu+I6oO9KfubLnoDuC0uAITIiP7Q5iO61iiqv8VEWxhzD",
	"8vDXv4yD2GLN3TZH0axy7YSORZW3AFi8lkg0SB2wW8otMhlnjsyOPRyY1A4E1epoLZZyrFgc1Q79drNf",
	"7bjGcXiwfixoIkZs4KCbHeuHPKrs10SlE8Hz+/y/l9EAM7i+/h5BfnlRHPUuezhkeDmDZyO+G3Sehq6d",
	"NnCdrkpqk6iTuH47+IVoIxLNJ+f2J5fPEH4h14jkMkUJwaz1YaDFvDddCxk7QHcdUWdNqquGqKiWZqoj",
	"a36v/x0YjXlnK2am5c2RcTRA3Ldt8wJVPeL9a0NGpxjtRMNg37GoZmtLw4LXxgpefJU0cIvAmuDroIR7",
	"786r9zz1CsCL2qVQRxKFlTz4pAZ8BRNDTPjGBVnPivH7aX1ITL1Jjam3T5XwUxF6gJCv5qh3tRDNgbL/",
	"G0Nhp2o4BHlPt3FmzzHQ7uKZ8YPtTnY5XsD9aNzacDCqn/pcjKyqafdn7EOE8jxm6+4AZOvmsL3i9d/W",
	"Djq6QXLF1kezSRaKFc444Mhw6Dj8NSTG7b617YXLJpaBYwf+WwyVpwL256mhXPMceGVyik1CpzZtXNZV",
	"+WDLUMrx8qqop3XMmXDwjdG1tTutpqZePs6o1LNYLqwNt0lhW9Vu9SyOsNbLo2vhyxy6pXK1Gtnrvl+X",
	"99BPryXt/SYTacZ8vd1OeuXi/Rx7xU91vM3vzQ0dA71gu7gJ+TJH38jo6nR180tKWvGjCtL8bu1XixOP",
	"7zoMG4MFaJqjx5XoKXhvLH+xQozx3cQqHY7nHU5E/c6A6hAe0GKEsxWJYV5WpXdL4vM4bt1udSSx7LmW",
	"7mA5PQt+PP2xXfxNGUpbF9uJPqpUmvZIdgfskjrVXwsCOWonhif93jL+jWR3h3FJ7ZabqXT4HsUyeTFS",
	"9b6ifCs2ErmdpLZ28A2kTP1o/rJVNJ1ezEciN6rX82GEmeuNpaHmukHA48Yr19c32jMqYGhw9jE4WRkT",
	"EUhMYoSXLJOlnf9Ilq7ez9ItxKp35nyvsqx2q9DTirQa4YazgT64PNcnzf8hGetRXPWT08exLhpXeDwK",
	"y220icYtAlWVr7/58DS/V/8Uvp1P0DdmP6EUauLpILwoudJEicNUzTGzh69iz/Y6NnqOx/1T0f0Mezw2",
	"fTxz+kWAXmf39m/yrvnb8K6LX7tjEVPz6v4c2oecziCEh4tzHPnjD18fHjyBh14MPNk+9scbCuSPH20o",
	"8X68WMP4tO4MM/RQ3CUXBtds1W8ROZ58nb5iS+FieMFW46oJ8bx2Vh+JDynVat0wM+l2Gb9uo0Xffr0x",
	"uCBjmDr5prDXpW0OwNtTbZVnWZ7lYJZpFOHTFWcdiUuL0qzWl4GVWYfxs5K/xUHHboX6sWx2DF1aeWlk",
	"GjVaLrtbgd5V153jr/KjFgodGf2PjOfHSKfYHdUXWY66MRoDj0qQztKBuxKhTnLUeXp+X/x/oP1Qe01l",
	"qLSvnhZ2yN/aHJ5NUHhKEnYaLeV9Vssd+rUumhpby2envFBpDCp5jKOPjrPvTZHnMgmMXzeYNPRopHmR",
	"u4PYodNbH7xpuwXwPIIwJtSU4Tn15oVpUObq37PvZ7e332R0kLnydF1J8XiHLGqjveS0oUZLUOufq6/z",
	"2ft9H6F7538xQv10Ny8fvpC9+gzkHsQvLpj01aaUFxMyXiUsZRKtWEb3YRv79GSDa8ykR2aaGPAWusy2",
	"K9XgxR5o0LjGGzGs5AC+OIQTDHma3pP68dGUF8C3JIQFDkOWdQV8q/bgrel0nvf5Ftih8JgbL2HEBKh0",
	"Xv1tsYAs6pBp6nkPp+tFDe106Z1MEhASJ6nzUvfOC/8bcznslv8GEN99rl3Pd1xhIYt4iX85rkv4J45A",
	"9NnhSNSXf3gswrVJvnY7fZ/HJ47HizWv4A8D6lP7wt/RnYeJZISBIyDkIAfDMs3RK0bjHeIgM04hQoya",
	"B3gIo69f5NEB8uhIjp8NuHml0EhqfX5vuGXQrW4HirCjqPlWjuZNZUc5RsqXfVRb4sWE+Ja3bCvA2tiy",
	"aLnLCVm7HOyA6N53vQG/MUPlazVKXqTOs5A6rQjxIVLncKthjlOy+Ay7nsNnKfkFduIt4y3JNX062ww+",
	"lSdp19+RyE4JUgjSRfcDrbjvSaB3Oc2GdG62GUMNhCxxPxv2xnwo3to7v75URHQ+3PMlJRzEgjik2M/q",
	"mxGFKXDCon6Ax9AIQ3bLuLvjjhOvj2M3yD77YwR5Nb/HeqWDPJ8uPmzTYWK0WTvzALR9N2KlNci5RZZW",
	"gY5Rcl7Yv4S2gw0z0Xc1/QfV4pJ+WwmU/WrM9INuT1xnpgmFCO3PmvjUlU4M6rU8y8zpGLqyeN9ulb9+",
	"5nnLbogp/LN+us6uXb/VJpnJXbZX9/DUKX//LQQOcU+oedfTPM5nceVL/909Kv1n8dXgasOKBqnLnZ3H",
	"CLlgvUnm9yJb/sY1+Tr15g0kbKs3xFvOkue1JVra4TZbImbfZqwypXvgEgNjiNX6TBTC6uljrhEZNeoG",
	"OGzZ56H1BpoVDmEwM3aTwQxp7VORnCUV35NxO7PGY5l7R7oUHm5YDM9NNz4h64whw90vbup3duFOP7Wp",
	"JAUWgqx1/UhlNd0ZNg340xO7Lg2boi3IP+QPitqATlTbal6RfmlFuu5pT8hPvfU6gz3Fw6iDbJY+XyNK",
	"CFUDPfx/AAAA///JI5AMt7cAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	"github.com/tmp-moon/toolkit/cli/register"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Agent defines model for Agent.
type Agent struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Agent display name
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name Agent name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// AgentDeployment defines model for AgentDeployment.
type AgentDeployment struct {
	// Agent The name of the agent
	Agent *string `json:"agent,omitempty"`

	// Configuration Deployment configurations key value and also a boolean secret to specify if it should be stored in secret manager
	Configuration *DeploymentConfigurations `json:"configuration,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Enabled Whether the agent deployment is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Environment The name of the environment
	Environment *string `json:"environment,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors *Flavors `json:"flavors,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Llm LLM to use for agent, it should be compatible with function calling
	Llm *string `json:"llm,omitempty"`

	// PodTemplate The pod template, should be a valid Kubernetes pod template
	PodTemplate *map[string]interface{} `json:"pod_template,omitempty"`
	Policies    *DeploymentPolicies     `json:"policies,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`

	// ServerlessConfig Configuration for a serverless deployment
	ServerlessConfig *DeploymentServerlessConfig `json:"serverless_config,omitempty"`

	// StoreId Create from a store registered function
	StoreId *string `json:"store_id,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the agent deployment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// AgentRelease Agent release, used to deploy a agent from one environment to another
type AgentRelease struct {
	// From Origin environment from which the agent is released
	From *string `json:"from,omitempty"`

	// To Destination environment to which the agent is released
	To *string `json:"to,omitempty"`
}

// ApiKey defines model for ApiKey.
type ApiKey struct {
	// ApiKey Api key
	ApiKey *string `json:"api_key,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// ExpiresIn Duration until expiration (in seconds)
	ExpiresIn *string `json:"expires_in,omitempty"`

	// Id Api key id, to retrieve it from the API
	Id *string `json:"id,omitempty"`

	// Name Name for the API key
	Name *string `json:"name,omitempty"`

	// Sub User subject identifier
	Sub *string `json:"sub,omitempty"`

	// SubType Subject type
	SubType *string `json:"sub_type,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// ArrayMetric Array of metrics
type ArrayMetric = []Metric

// AuthenticationProviderModel Model obtained from an external authentication provider, such as HuggingFace, OpenAI, etc...
type AuthenticationProviderModel struct {
	// CreatedAt Provider model created at
	CreatedAt *string `json:"created_at,omitempty"`

	// Downloads Provider model downloads
	Downloads *int `json:"downloads,omitempty"`

	// Id Provider model ID
	Id *string `json:"id,omitempty"`

	// LibraryName Provider model library name
	LibraryName *string `json:"library_name,omitempty"`

	// Likes Provider model likes
	Likes *int `json:"likes,omitempty"`

	// Name Provider model name
	Name *string `json:"name,omitempty"`

	// PipelineTag Provider model pipeline tag
	PipelineTag *string `json:"pipeline_tag,omitempty"`

	// Private Provider model private
	Private *bool `json:"private,omitempty"`

	// Tags Provider model tags
	Tags *[]string `json:"tags,omitempty"`

	// TrendingScore Provider model trending score
	TrendingScore *int `json:"trending_score,omitempty"`
}

// AuthenticationProviderOrganization Organization that hosts models from an external authentication provider (HuggingFace, OpenAI, etc...)
type AuthenticationProviderOrganization struct {
	// AvatarUrl Provider organization avatar URL
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// DisplayName Provider organization display name
	DisplayName *string `json:"display_name,omitempty"`

	// Id Provider organization ID
	Id *string `json:"id,omitempty"`

	// Name Provider organization name
	Name *string `json:"name,omitempty"`
}

// Configuration Configuration
type Configuration struct {
	// Continents Continents
	Continents *[]interface{} `json:"continents,omitempty"`

	// Countries Countries
	Countries *[]interface{} `json:"countries,omitempty"`
}

// DeploymentConfigurations Deployment configurations key value and also a boolean secret to specify if it should be stored in secret manager
type DeploymentConfigurations map[string]string

// DeploymentPolicies defines model for DeploymentPolicies.
type DeploymentPolicies = []string

// DeploymentServerlessConfig Configuration for a serverless deployment
type DeploymentServerlessConfig struct {
	// LastPodRetentionPeriod The minimum amount of time that the last replica will remain active AFTER a scale-to-zero decision is made
	LastPodRetentionPeriod *string `json:"last_pod_retention_period,omitempty"`

	// MaxNumReplicas The maximum number of replicas for the deployment.
	MaxNumReplicas *int `json:"max_num_replicas,omitempty"`

	// Metric Metric watched to make scaling decisions. Can be "cpu" or "memory" or "rps" or "concurrency"
	Metric *string `json:"metric,omitempty"`

	// MinNumReplicas The minimum number of replicas for the deployment. Can be 0 or 1 (in which case the deployment is always running in at least one location).
	MinNumReplicas *int `json:"min_num_replicas,omitempty"`

	// ScaleDownDelay The time window which must pass at reduced concurrency before a scale-down decision is applied. This can be useful, for example, to keep containers around for a configurable duration to avoid a cold start penalty if new requests come in.
	ScaleDownDelay *string `json:"scale_down_delay,omitempty"`

	// ScaleUpMinimum The minimum number of replicas that will be created when the deployment scales up from zero.
	ScaleUpMinimum *int `json:"scale_up_minimum,omitempty"`

	// StableWindow The sliding time window over which metrics are averaged to provide the input for scaling decisions
	StableWindow *string `json:"stable_window,omitempty"`

	// Target Target value for the watched metric
	Target *string `json:"target,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName The display name of the environment
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name The name of the environment
	Name *string `json:"name,omitempty"`

	// Policies The policies attached to the environment
	Policies *[]interface{} `json:"policies,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the environment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// EnvironmentMetrics Metrics for the environment
type EnvironmentMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`
}

// Flavor A type of hardware available for deployments
type Flavor struct {
	// Name Flavor name (e.g. t4)
	Name *string `json:"name,omitempty"`

	// Type Flavor type (e.g. cpu, gpu)
	Type *string `json:"type,omitempty"`
}

// Flavors Types of hardware available for deployments
type Flavors = []Flavor

// Function defines model for Function.
type Function struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Function display name
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name Function name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// FunctionDeployment defines model for FunctionDeployment.
type FunctionDeployment struct {
	// Configuration Deployment configurations key value and also a boolean secret to specify if it should be stored in secret manager
	Configuration *DeploymentConfigurations `json:"configuration,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Description Function description, very important for the agent function to work with an LLM
	Description *string `json:"description,omitempty"`

	// Enabled Whether the function deployment is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Environment The name of the environment
	Environment *string `json:"environment,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors *Flavors `json:"flavors,omitempty"`

	// Function The name of the function
	Function *string `json:"function,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Parameters Function parameters, for your function to be callable with Agent
	Parameters *[]StoreFunctionParameter `json:"parameters,omitempty"`

	// PodTemplate The pod template, should be a valid Kubernetes pod template
	PodTemplate *map[string]interface{} `json:"pod_template,omitempty"`
	Policies    *DeploymentPolicies     `json:"policies,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`

	// ServerlessConfig Configuration for a serverless deployment
	ServerlessConfig *DeploymentServerlessConfig `json:"serverless_config,omitempty"`

	// StoreId Create from a store registered function
	StoreId *string `json:"store_id,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the function deployment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// FunctionRelease Function release, used to deploy a function from one environment to another
type FunctionRelease struct {
	// From Origin environment from which the function is released
	From *string `json:"from,omitempty"`

	// To Destination environment to which the function is released
	To *string `json:"to,omitempty"`
}

// Labels Labels
type Labels map[string]string

// Location Location availability for policies
type Location struct {
	// Continent Location continent
	Continent *string `json:"continent,omitempty"`

	// Country Location country
	Country *string `json:"country,omitempty"`

	// Flavors Location flavors
	Flavors *[]Flavor `json:"flavors,omitempty"`

	// Location Location name
	Location *string `json:"location,omitempty"`

	// Name Location name
	Name *string `json:"name,omitempty"`

	// Status Location status
	Status *string `json:"status,omitempty"`
}

// Metric Metric
type Metric struct {
	// Timestamp Metric timestamp
	Timestamp *string `json:"timestamp,omitempty"`

	// Value Metric value
	Value *string `json:"value,omitempty"`
}

// Metrics Metrics for resources
type Metrics struct {
	// Models Metrics for models
	Models *interface{} `json:"models,omitempty"`
}

// Model defines model for Model.
type Model struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Model display name
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name Model name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the model belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// ModelDeployment defines model for ModelDeployment.
type ModelDeployment struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Enabled If false, the model deployment will not be active nor serve requests
	Enabled *bool `json:"enabled,omitempty"`

	// Environment The name of the environment in which the model deployment is deployed
	Environment *string `json:"environment,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors *Flavors `json:"flavors,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// MetricPort The port to serve the metrics on
	MetricPort *int `json:"metric_port,omitempty"`

	// Model The name of the parent model
	Model *string `json:"model,omitempty"`

	// ModelProviderRef Reference to a model provider
	ModelProviderRef *ModelProviderRef `json:"model_provider_ref,omitempty"`

	// PodTemplate The pod template for the deployment. Should be a Kubernetes PodTemplateSpec
	PodTemplate *map[string]interface{} `json:"pod_template,omitempty"`
	Policies    *DeploymentPolicies     `json:"policies,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`

	// ServerlessConfig Configuration for a serverless deployment
	ServerlessConfig *DeploymentServerlessConfig `json:"serverless_config,omitempty"`

	// ServingPort The port to serve the model on
	ServingPort *int `json:"serving_port,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the model deployment belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// ModelDeploymentLog Log for a model deployment
type ModelDeploymentLog struct {
	// Message Content of the log
	Message *string `json:"message,omitempty"`

	// Timestamp The timestamp of the log
	Timestamp *string `json:"timestamp,omitempty"`
}

// ModelDeploymentMetrics Metrics for a single model deployment
type ModelDeploymentMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`

	// InferencePerSecondPerRegion Historical requests per second (RPS) per location, for the model deployment
	InferencePerSecondPerRegion *struct {
		// Region Array of metrics
		Region *ArrayMetric `json:"region,omitempty"`
	} `json:"inference_per_second_per_region,omitempty"`

	// QueryPerSecondGlobal RPS value (in last 24 hours) for the model deployment globally
	QueryPerSecondGlobal *float32 `json:"query_per_second_global,omitempty"`

	// QueryPerSecondPerCodeGlobal Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerCodeGlobal *QPS `json:"query_per_second_per_code_global,omitempty"`

	// QueryPerSecondPerRegion Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerRegion *QPS `json:"query_per_second_per_region,omitempty"`

	// QueryPerSecondPerRegionPerCode RPS value (in last 24 hours) per response status code per location, for the model deployment
	QueryPerSecondPerRegionPerCode *struct {
		// Region Query per second per element, can be per response status code (e.g. 200, 400) or per location
		Region *QPS `json:"region,omitempty"`
	} `json:"query_per_second_per_region_per_code,omitempty"`
}

// ModelMetrics Metrics for a single model
type ModelMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`

	// QueryPerSecondPerRegion Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerRegion *QPS `json:"query_per_second_per_region,omitempty"`
}

// ModelProvider defines model for ModelProvider.
type ModelProvider struct {
	// Comment Model provider description
	Comment *string `json:"comment,omitempty"`

	// Config Model provider config
	Config *ProviderConfig `json:"config,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Name Model provider name
	Name *string `json:"name,omitempty"`

	// Type Model provider type
	Type *string `json:"type,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// ModelProviderRef Reference to a model provider
type ModelProviderRef struct {
	// Kind The kind of the model provider, can be Provider
	Kind *string `json:"kind,omitempty"`

	// Name The name of the model provider
	Name *string `json:"name,omitempty"`
}

// ModelRelease Model release, used to deploy a model from one environment to another
type ModelRelease struct {
	// From Origin environment from which the model is released
	From *string `json:"from,omitempty"`

	// To Destination environment to which the model is released
	To *string `json:"to,omitempty"`
}

// PendingInvitation defines model for PendingInvitation.
type PendingInvitation struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Email User email
	Email *string `json:"email,omitempty"`

	// InvitedBy User sub
	InvitedBy *string `json:"invited_by,omitempty"`

	// Role ACL role
	Role *string `json:"role,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace Workspace name
	Workspace *string `json:"workspace,omitempty"`
}

// PendingInvitationAccept Pending invitation accept
type PendingInvitationAccept struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// Workspace Workspace
	Workspace *Workspace `json:"workspace,omitempty"`
}

// PendingInvitationRender Pending invitation in workspace
type PendingInvitationRender struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// InvitedAt Invitation date
	InvitedAt *string `json:"invited_at,omitempty"`

	// InvitedBy Invited by
	InvitedBy *PendingInvitationRenderInvitedBy `json:"invited_by,omitempty"`

	// Role ACL role
	Role *string `json:"role,omitempty"`

	// UserNumber Number of users in the workspace
	UserNumber *float32 `json:"user_number,omitempty"`

	// Workspace Workspace
	Workspace *PendingInvitationRenderWorkspace `json:"workspace,omitempty"`
}

// PendingInvitationRenderInvitedBy Invited by
type PendingInvitationRenderInvitedBy struct {
	// Email User email
	Email *string `json:"email,omitempty"`

	// FamilyName User family name
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName User given name
	GivenName *string `json:"given_name,omitempty"`

	// Sub User sub
	Sub *string `json:"sub,omitempty"`
}

// PendingInvitationRenderWorkspace Workspace
type PendingInvitationRenderWorkspace struct {
	// DisplayName Workspace display name
	DisplayName *string `json:"display_name,omitempty"`

	// Name Workspace name
	Name *string `json:"name,omitempty"`
}

// Policy defines model for Policy.
type Policy struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Policy display name
	DisplayName *string `json:"display_name,omitempty"`

	// Flavors Types of hardware available for deployments
	Flavors *Flavors `json:"flavors,omitempty"`

	// Labels Labels
	Labels *Labels `json:"labels,omitempty"`

	// Locations PolicyLocations is a local type that wraps a slice of Location
	Locations *PolicyLocations `json:"locations,omitempty"`

	// Name Policy name
	Name *string `json:"name,omitempty"`

	// ResourceTypes PolicyResourceTypes is a local type that wraps a slice of PolicyResourceType
	ResourceTypes *PolicyResourceTypes `json:"resource_types,omitempty"`

	// Type Policy type, can be location or flavor
	Type *string `json:"type,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Workspace The workspace the policy belongs to
	Workspace *string `json:"workspace,omitempty"`
}

// PolicyLocation Policy location
type PolicyLocation struct {
	// Name Policy location name
	Name *string `json:"name,omitempty"`

	// Type Policy location type
	Type *string `json:"type,omitempty"`
}

// PolicyLocations PolicyLocations is a local type that wraps a slice of Location
type PolicyLocations = []PolicyLocation

// PolicyResourceType PolicyResourceType is a type of resource, e.g. model, function, etc.
type PolicyResourceType = string

// PolicyResourceTypes PolicyResourceTypes is a local type that wraps a slice of PolicyResourceType
type PolicyResourceTypes = []PolicyResourceType

// ProviderConfig Model provider config
type ProviderConfig struct {
	// AccessToken The access token to use for the provider
	AccessToken *string `json:"access_token,omitempty"`

	// Filename The file name to use for the model
	Filename *string `json:"filename,omitempty"`

	// PresignedUrl The presigned URLs to upload the model to
	PresignedUrl *[]interface{} `json:"presigned_url,omitempty"`

	// Runtime Set of configurations for a deployment
	Runtime *Runtime `json:"runtime,omitempty"`
}

// QPS Query per second per element, can be per response status code (e.g. 200, 400) or per location
type QPS struct {
	// RegionCode QPS for location
	RegionCode *float32 `json:"region_code,omitempty"`
}

// ResourceDeploymentLog Log for a resource deployment (eg. model deployment, function deployment)
type ResourceDeploymentLog struct {
	// Message Content of the log
	Message *string `json:"message,omitempty"`

	// Timestamp The timestamp of the log
	Timestamp *string `json:"timestamp,omitempty"`
}

// ResourceDeploymentMetrics Metrics for a single resource deployment (eg. model deployment, function deployment)
type ResourceDeploymentMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`

	// InferencePerSecondPerRegion Historical requests per second (RPS) per location, for the model deployment
	InferencePerSecondPerRegion *struct {
		// Region Array of metrics
		Region *ArrayMetric `json:"region,omitempty"`
	} `json:"inference_per_second_per_region,omitempty"`

	// QueryPerSecondGlobal RPS value (in last 24 hours) for the model deployment globally
	QueryPerSecondGlobal *float32 `json:"query_per_second_global,omitempty"`

	// QueryPerSecondPerCodeGlobal Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerCodeGlobal *QPS `json:"query_per_second_per_code_global,omitempty"`

	// QueryPerSecondPerRegion Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerRegion *QPS `json:"query_per_second_per_region,omitempty"`

	// QueryPerSecondPerRegionPerCode RPS value (in last 24 hours) per response status code per location, for the model deployment
	QueryPerSecondPerRegionPerCode *struct {
		// Region Query per second per element, can be per response status code (e.g. 200, 400) or per location
		Region *QPS `json:"region,omitempty"`
	} `json:"query_per_second_per_region_per_code,omitempty"`
}

// ResourceMetrics Metrics for a single resource (eg. model, function)
type ResourceMetrics struct {
	// InferencePerSecondGlobal Array of metrics
	InferencePerSecondGlobal *ArrayMetric `json:"inference_per_second_global,omitempty"`

	// QueryPerSecondPerRegion Query per second per element, can be per response status code (e.g. 200, 400) or per location
	QueryPerSecondPerRegion *QPS `json:"query_per_second_per_region,omitempty"`
}

// Runtime Set of configurations for a deployment
type Runtime struct {
	// Args The arguments to pass to the deployment runtime
	Args *[]interface{} `json:"args,omitempty"`

	// Command The command to run the deployment
	Command *[]interface{} `json:"command,omitempty"`

	// Envs The environment variables to set in the deployment. Should be a list of Kubernetes EnvVar types
	Envs *[]interface{} `json:"envs,omitempty"`

	// Image The Docker image for the deployment
	Image *string `json:"image,omitempty"`

	// Model The slug name of the origin model. Only used if the deployment is a ModelDeployment
	Model *string `json:"model,omitempty"`

	// ReadinessProbe The readiness probe. Should be a Kubernetes Probe type
	ReadinessProbe *map[string]interface{} `json:"readiness_probe,omitempty"`

	// Resources The resources for the deployment. Should be a Kubernetes ResourceRequirements type
	Resources *map[string]interface{} `json:"resources,omitempty"`

	// Type The type of origin for the deployment
	Type *string `json:"type,omitempty"`
}

// StandardFieldsDynamoDb Standard fields for Persistance
type StandardFieldsDynamoDb struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// StoreAgent defines model for StoreAgent.
type StoreAgent struct {
	// Configuration Store agent configuration
	Configuration *[]StoreConfiguration `json:"configuration,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Description Store agent description
	Description *string `json:"description,omitempty"`

	// DisplayName Store agent display name
	DisplayName *string `json:"display_name,omitempty"`

	// Image Store agent image
	Image *string `json:"image,omitempty"`

	// Labels Store agent labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Store agent name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// StoreConfiguration Store configuration for resources (eg: agent, function, etc)
type StoreConfiguration struct {
	// Description Store configuration description
	Description *string `json:"description,omitempty"`

	// DisplayName Store configuration display name
	DisplayName *string `json:"display_name,omitempty"`

	// If Conditional rendering for the configuration, example: provider === 'openai'
	If *string `json:"if,omitempty"`

	// Name Store configuration name
	Name    *string                     `json:"name,omitempty"`
	Options *[]StoreConfigurationOption `json:"options,omitempty"`

	// Required Store configuration required
	Required *bool `json:"required,omitempty"`

	// Secret Store configuration secret
	Secret *bool `json:"secret,omitempty"`

	// Type Store configuration type
	Type *string `json:"type,omitempty"`
}

// StoreConfigurationOption Store configuration options for a select type configuration
type StoreConfigurationOption struct {
	// If Conditional rendering for the configuration option, example: provider === 'openai'
	If *string `json:"if,omitempty"`

	// Label Store configuration option label
	Label *string `json:"label,omitempty"`

	// Value Store configuration option value
	Value *string `json:"value,omitempty"`
}

// StoreFunction defines model for StoreFunction.
type StoreFunction struct {
	// Configuration Store function configuration
	Configuration *[]StoreConfiguration `json:"configuration,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// Description Store function description
	Description *string `json:"description,omitempty"`

	// DisplayName Store function display name
	DisplayName *string `json:"display_name,omitempty"`

	// Image Store function image
	Image *string `json:"image,omitempty"`

	// Labels Store function labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Store function name
	Name *string `json:"name,omitempty"`

	// Parameters Store function parameters
	Parameters *[]StoreFunctionParameter `json:"parameters,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// StoreFunctionParameter Store function parameter
type StoreFunctionParameter struct {
	// Description Store function parameter description
	Description *string `json:"description,omitempty"`

	// Name Store function parameter name
	Name *string `json:"name,omitempty"`

	// Required Store function parameter required
	Required *bool `json:"required,omitempty"`

	// Type Store function parameter type
	Type *string `json:"type,omitempty"`
}

// Workspace defines model for Workspace.
type Workspace struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`

	// DisplayName Workspace display name
	DisplayName *string `json:"display_name,omitempty"`

	// Labels Workspace labels
	Labels *map[string]interface{} `json:"labels,omitempty"`

	// Name Workspace name
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time when the resource was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// WorkspaceUser Workspace user
type WorkspaceUser struct {
	// Accepted Whether the user has accepted the workspace invitation
	Accepted *bool `json:"accepted,omitempty"`

	// Email Workspace user email
	Email *string `json:"email,omitempty"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified *bool `json:"email_verified,omitempty"`

	// FamilyName Workspace user family name
	FamilyName *string `json:"family_name,omitempty"`

	// GivenName Workspace user given name
	GivenName *string `json:"given_name,omitempty"`

	// Role Workspace user role
	Role *string `json:"role,omitempty"`

	// Sub Workspace user identifier
	Sub *string `json:"sub,omitempty"`
}

// CreateWorkspaceServiceAccountJSONBody defines parameters for CreateWorkspaceServiceAccount.
type CreateWorkspaceServiceAccountJSONBody struct {
	// Description Service account description
	Description *string `json:"description,omitempty"`

	// Name Service account name
	Name string `json:"name"`
}

// UpdateWorkspaceServiceAccountJSONBody defines parameters for UpdateWorkspaceServiceAccount.
type UpdateWorkspaceServiceAccountJSONBody struct {
	// Description Service account description
	Description *string `json:"description,omitempty"`

	// Name Service account name
	Name *string `json:"name,omitempty"`
}

// CreateApiKeyForServiceAccountJSONBody defines parameters for CreateApiKeyForServiceAccount.
type CreateApiKeyForServiceAccountJSONBody struct {
	// ExpiresIn Expiration period for the API key
	ExpiresIn *string `json:"expires_in,omitempty"`

	// Name Name for the API key
	Name *string `json:"name,omitempty"`
}

// InviteWorkspaceUserJSONBody defines parameters for InviteWorkspaceUser.
type InviteWorkspaceUserJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
}

// UpdateWorkspaceUserRoleJSONBody defines parameters for UpdateWorkspaceUserRole.
type UpdateWorkspaceUserRoleJSONBody struct {
	// Role The new role to assign to the user
	Role string `json:"role"`
}

// PutAgentJSONRequestBody defines body for PutAgent for application/json ContentType.
type PutAgentJSONRequestBody = Agent

// PutAgentDeploymentJSONRequestBody defines body for PutAgentDeployment for application/json ContentType.
type PutAgentDeploymentJSONRequestBody = AgentDeployment

// PutEnvironmentJSONRequestBody defines body for PutEnvironment for application/json ContentType.
type PutEnvironmentJSONRequestBody = Environment

// PutFunctionJSONRequestBody defines body for PutFunction for application/json ContentType.
type PutFunctionJSONRequestBody = Function

// PutFunctionDeploymentJSONRequestBody defines body for PutFunctionDeployment for application/json ContentType.
type PutFunctionDeploymentJSONRequestBody = FunctionDeployment

// PutModelProviderJSONRequestBody defines body for PutModelProvider for application/json ContentType.
type PutModelProviderJSONRequestBody = ModelProvider

// PutModelJSONRequestBody defines body for PutModel for application/json ContentType.
type PutModelJSONRequestBody = Model

// PutModelDeploymentJSONRequestBody defines body for PutModelDeployment for application/json ContentType.
type PutModelDeploymentJSONRequestBody = ModelDeployment

// PutPolicyJSONRequestBody defines body for PutPolicy for application/json ContentType.
type PutPolicyJSONRequestBody = Policy

// CreateWorkspaceServiceAccountJSONRequestBody defines body for CreateWorkspaceServiceAccount for application/json ContentType.
type CreateWorkspaceServiceAccountJSONRequestBody CreateWorkspaceServiceAccountJSONBody

// UpdateWorkspaceServiceAccountJSONRequestBody defines body for UpdateWorkspaceServiceAccount for application/json ContentType.
type UpdateWorkspaceServiceAccountJSONRequestBody UpdateWorkspaceServiceAccountJSONBody

// CreateApiKeyForServiceAccountJSONRequestBody defines body for CreateApiKeyForServiceAccount for application/json ContentType.
type CreateApiKeyForServiceAccountJSONRequestBody CreateApiKeyForServiceAccountJSONBody

// InviteWorkspaceUserJSONRequestBody defines body for InviteWorkspaceUser for application/json ContentType.
type InviteWorkspaceUserJSONRequestBody InviteWorkspaceUserJSONBody

// UpdateWorkspaceUserRoleJSONRequestBody defines body for UpdateWorkspaceUserRole for application/json ContentType.
type UpdateWorkspaceUserRoleJSONRequestBody UpdateWorkspaceUserRoleJSONBody

// CreateWorspaceJSONRequestBody defines body for CreateWorspace for application/json ContentType.
type CreateWorspaceJSONRequestBody = Workspace

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody = Workspace

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	RunServer string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, runServer string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server:    server,
		RunServer: runServer,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	Run(
		ctx context.Context,
		workspaceName string,
		environment string,
		modelName string,
		method string,
		path string,
		headers map[string]string,
		body string,
		reqEditors ...RequestEditorFn,
	) (*http.Response, error)

	// ListAgents request
	ListAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgent request
	DeleteAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgent request
	GetAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentWithBody request with any body
	PutAgentWithBody(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgent(ctx context.Context, agentName string, body PutAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAgentDeployments request
	ListAgentDeployments(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgentDeployment request
	DeleteAgentDeployment(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentDeployment request
	GetAgentDeployment(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentDeploymentWithBody request with any body
	PutAgentDeploymentWithBody(ctx context.Context, agentName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentDeployment(ctx context.Context, agentName string, environmentName string, body PutAgentDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentDeploymentLogs request
	GetAgentDeploymentLogs(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentDeploymentMetrics request
	GetAgentDeploymentMetrics(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentMetrics request
	GetAgentMetrics(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAgentRelease request
	CreateAgentRelease(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModelsForAuthenticationProvider request
	ListModelsForAuthenticationProvider(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelWithRepoForAuthenticationProvider request
	GetModelWithRepoForAuthenticationProvider(ctx context.Context, authenticationProviderName string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationsForAuthenticationProvider request
	ListOrganizationsForAuthenticationProvider(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfiguration request
	GetConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEnvironmentWithBody request with any body
	PutEnvironmentWithBody(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEnvironment(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentMetrics request
	GetEnvironmentMetrics(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctions request
	ListFunctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunction request
	DeleteFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunction request
	GetFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFunctionWithBody request with any body
	PutFunctionWithBody(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFunction(ctx context.Context, functionName string, body PutFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFunctionDeployments request
	ListFunctionDeployments(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunctionDeployment request
	DeleteFunctionDeployment(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionDeployment request
	GetFunctionDeployment(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFunctionDeploymentWithBody request with any body
	PutFunctionDeploymentWithBody(ctx context.Context, functionName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFunctionDeployment(ctx context.Context, functionName string, environmentName string, body PutFunctionDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionDeploymentLogs request
	GetFunctionDeploymentLogs(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionDeploymentMetrics request
	GetFunctionDeploymentMetrics(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionMetrics request
	GetFunctionMetrics(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionRelease request
	CreateFunctionRelease(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLocations request
	ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetrics request
	GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModelProviders request
	ListModelProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModelProvider request
	DeleteModelProvider(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelProvider request
	GetModelProvider(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModelProviderWithBody request with any body
	PutModelProviderWithBody(ctx context.Context, modelProviderName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutModelProvider(ctx context.Context, modelProviderName string, body PutModelProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModels request
	ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModel request
	DeleteModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModel request
	GetModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModelWithBody request with any body
	PutModelWithBody(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutModel(ctx context.Context, modelName string, body PutModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModelDeployments request
	ListModelDeployments(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModelDeployment request
	DeleteModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelDeployment request
	GetModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModelDeploymentWithBody request with any body
	PutModelDeploymentWithBody(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutModelDeployment(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelDeploymentLogs request
	GetModelDeploymentLogs(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelDeploymentMetrics request
	GetModelDeploymentMetrics(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelMetrics request
	GetModelMetrics(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleaseModel request
	ReleaseModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPolicies request
	ListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicy request
	DeletePolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicy request
	GetPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPolicyWithBody request with any body
	PutPolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPolicy(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllPendingInvitations request
	ListAllPendingInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceServiceAccounts request
	GetWorkspaceServiceAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspaceServiceAccountWithBody request with any body
	CreateWorkspaceServiceAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspaceServiceAccount(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceServiceAccount request
	DeleteWorkspaceServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceServiceAccountWithBody request with any body
	UpdateWorkspaceServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceServiceAccount(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApiKeysForServiceAccount request
	ListApiKeysForServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiKeyForServiceAccountWithBody request with any body
	CreateApiKeyForServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiKeyForServiceAccount(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKeyForServiceAccount request
	DeleteApiKeyForServiceAccount(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStoreAgents request
	ListStoreAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoreAgent request
	GetStoreAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStoreFunctions request
	ListStoreFunctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoreFunction request
	GetStoreFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceUsers request
	ListWorkspaceUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteWorkspaceUserWithBody request with any body
	InviteWorkspaceUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InviteWorkspaceUser(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveWorkspaceUser request
	RemoveWorkspaceUser(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceUserRoleWithBody request with any body
	UpdateWorkspaceUserRoleWithBody(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceUserRole(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorspaceWithBody request with any body
	CreateWorspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorspace(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspace request
	DeleteWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceWithBody request with any body
	UpdateWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeclineWorkspaceInvitation request
	DeclineWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptWorkspaceInvitation request
	AcceptWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LeaveWorkspace request
	LeaveWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

// RegisterCliCommands registers CLI commands for the client
func (c *ClientWithResponses) RegisterCliCommands(reg register.Register, ctx context.Context) {

	// Register CLI commands for ListAgents
	reg.CliCommand(ctx, "ListAgents", c.ListAgents)

	// Register CLI commands for DeleteAgent
	reg.CliCommand(ctx, "DeleteAgent", c.DeleteAgent)

	// Register CLI commands for GetAgent
	reg.CliCommand(ctx, "GetAgent", c.GetAgent)

	// Register CLI commands for PutAgent
	reg.CliCommand(ctx, "PutAgent", c.PutAgent)

	// Register CLI commands for ListAgentDeployments
	reg.CliCommand(ctx, "ListAgentDeployments", c.ListAgentDeployments)

	// Register CLI commands for DeleteAgentDeployment
	reg.CliCommand(ctx, "DeleteAgentDeployment", c.DeleteAgentDeployment)

	// Register CLI commands for GetAgentDeployment
	reg.CliCommand(ctx, "GetAgentDeployment", c.GetAgentDeployment)

	// Register CLI commands for PutAgentDeployment
	reg.CliCommand(ctx, "PutAgentDeployment", c.PutAgentDeployment)

	// Register CLI commands for GetAgentDeploymentLogs
	reg.CliCommand(ctx, "GetAgentDeploymentLogs", c.GetAgentDeploymentLogs)

	// Register CLI commands for GetAgentDeploymentMetrics
	reg.CliCommand(ctx, "GetAgentDeploymentMetrics", c.GetAgentDeploymentMetrics)

	// Register CLI commands for GetAgentMetrics
	reg.CliCommand(ctx, "GetAgentMetrics", c.GetAgentMetrics)

	// Register CLI commands for CreateAgentRelease
	reg.CliCommand(ctx, "CreateAgentRelease", c.CreateAgentRelease)

	// Register CLI commands for ListModelsForAuthenticationProvider
	reg.CliCommand(ctx, "ListModelsForAuthenticationProvider", c.ListModelsForAuthenticationProvider)

	// Register CLI commands for GetModelWithRepoForAuthenticationProvider
	reg.CliCommand(ctx, "GetModelWithRepoForAuthenticationProvider", c.GetModelWithRepoForAuthenticationProvider)

	// Register CLI commands for ListOrganizationsForAuthenticationProvider
	reg.CliCommand(ctx, "ListOrganizationsForAuthenticationProvider", c.ListOrganizationsForAuthenticationProvider)

	// Register CLI commands for GetConfiguration
	reg.CliCommand(ctx, "GetConfiguration", c.GetConfiguration)

	// Register CLI commands for ListEnvironments
	reg.CliCommand(ctx, "ListEnvironments", c.ListEnvironments)

	// Register CLI commands for DeleteEnvironment
	reg.CliCommand(ctx, "DeleteEnvironment", c.DeleteEnvironment)

	// Register CLI commands for GetEnvironment
	reg.CliCommand(ctx, "GetEnvironment", c.GetEnvironment)

	// Register CLI commands for PutEnvironment
	reg.CliCommand(ctx, "PutEnvironment", c.PutEnvironment)

	// Register CLI commands for GetEnvironmentMetrics
	reg.CliCommand(ctx, "GetEnvironmentMetrics", c.GetEnvironmentMetrics)

	// Register CLI commands for ListFunctions
	reg.CliCommand(ctx, "ListFunctions", c.ListFunctions)

	// Register CLI commands for DeleteFunction
	reg.CliCommand(ctx, "DeleteFunction", c.DeleteFunction)

	// Register CLI commands for GetFunction
	reg.CliCommand(ctx, "GetFunction", c.GetFunction)

	// Register CLI commands for PutFunction
	reg.CliCommand(ctx, "PutFunction", c.PutFunction)

	// Register CLI commands for ListFunctionDeployments
	reg.CliCommand(ctx, "ListFunctionDeployments", c.ListFunctionDeployments)

	// Register CLI commands for DeleteFunctionDeployment
	reg.CliCommand(ctx, "DeleteFunctionDeployment", c.DeleteFunctionDeployment)

	// Register CLI commands for GetFunctionDeployment
	reg.CliCommand(ctx, "GetFunctionDeployment", c.GetFunctionDeployment)

	// Register CLI commands for PutFunctionDeployment
	reg.CliCommand(ctx, "PutFunctionDeployment", c.PutFunctionDeployment)

	// Register CLI commands for GetFunctionDeploymentLogs
	reg.CliCommand(ctx, "GetFunctionDeploymentLogs", c.GetFunctionDeploymentLogs)

	// Register CLI commands for GetFunctionDeploymentMetrics
	reg.CliCommand(ctx, "GetFunctionDeploymentMetrics", c.GetFunctionDeploymentMetrics)

	// Register CLI commands for GetFunctionMetrics
	reg.CliCommand(ctx, "GetFunctionMetrics", c.GetFunctionMetrics)

	// Register CLI commands for CreateFunctionRelease
	reg.CliCommand(ctx, "CreateFunctionRelease", c.CreateFunctionRelease)

	// Register CLI commands for ListLocations
	reg.CliCommand(ctx, "ListLocations", c.ListLocations)

	// Register CLI commands for GetMetrics
	reg.CliCommand(ctx, "GetMetrics", c.GetMetrics)

	// Register CLI commands for ListModelProviders
	reg.CliCommand(ctx, "ListModelProviders", c.ListModelProviders)

	// Register CLI commands for DeleteModelProvider
	reg.CliCommand(ctx, "DeleteModelProvider", c.DeleteModelProvider)

	// Register CLI commands for GetModelProvider
	reg.CliCommand(ctx, "GetModelProvider", c.GetModelProvider)

	// Register CLI commands for PutModelProvider
	reg.CliCommand(ctx, "PutModelProvider", c.PutModelProvider)

	// Register CLI commands for ListModels
	reg.CliCommand(ctx, "ListModels", c.ListModels)

	// Register CLI commands for DeleteModel
	reg.CliCommand(ctx, "DeleteModel", c.DeleteModel)

	// Register CLI commands for GetModel
	reg.CliCommand(ctx, "GetModel", c.GetModel)

	// Register CLI commands for PutModel
	reg.CliCommand(ctx, "PutModel", c.PutModel)

	// Register CLI commands for ListModelDeployments
	reg.CliCommand(ctx, "ListModelDeployments", c.ListModelDeployments)

	// Register CLI commands for DeleteModelDeployment
	reg.CliCommand(ctx, "DeleteModelDeployment", c.DeleteModelDeployment)

	// Register CLI commands for GetModelDeployment
	reg.CliCommand(ctx, "GetModelDeployment", c.GetModelDeployment)

	// Register CLI commands for PutModelDeployment
	reg.CliCommand(ctx, "PutModelDeployment", c.PutModelDeployment)

	// Register CLI commands for GetModelDeploymentLogs
	reg.CliCommand(ctx, "GetModelDeploymentLogs", c.GetModelDeploymentLogs)

	// Register CLI commands for GetModelDeploymentMetrics
	reg.CliCommand(ctx, "GetModelDeploymentMetrics", c.GetModelDeploymentMetrics)

	// Register CLI commands for GetModelMetrics
	reg.CliCommand(ctx, "GetModelMetrics", c.GetModelMetrics)

	// Register CLI commands for ReleaseModel
	reg.CliCommand(ctx, "ReleaseModel", c.ReleaseModel)

	// Register CLI commands for ListPolicies
	reg.CliCommand(ctx, "ListPolicies", c.ListPolicies)

	// Register CLI commands for DeletePolicy
	reg.CliCommand(ctx, "DeletePolicy", c.DeletePolicy)

	// Register CLI commands for GetPolicy
	reg.CliCommand(ctx, "GetPolicy", c.GetPolicy)

	// Register CLI commands for PutPolicy
	reg.CliCommand(ctx, "PutPolicy", c.PutPolicy)

	// Register CLI commands for ListAllPendingInvitations
	reg.CliCommand(ctx, "ListAllPendingInvitations", c.ListAllPendingInvitations)

	// Register CLI commands for GetWorkspaceServiceAccounts
	reg.CliCommand(ctx, "GetWorkspaceServiceAccounts", c.GetWorkspaceServiceAccounts)

	// Register CLI commands for CreateWorkspaceServiceAccount
	reg.CliCommand(ctx, "CreateWorkspaceServiceAccount", c.CreateWorkspaceServiceAccount)

	// Register CLI commands for DeleteWorkspaceServiceAccount
	reg.CliCommand(ctx, "DeleteWorkspaceServiceAccount", c.DeleteWorkspaceServiceAccount)

	// Register CLI commands for UpdateWorkspaceServiceAccount
	reg.CliCommand(ctx, "UpdateWorkspaceServiceAccount", c.UpdateWorkspaceServiceAccount)

	// Register CLI commands for ListApiKeysForServiceAccount
	reg.CliCommand(ctx, "ListApiKeysForServiceAccount", c.ListApiKeysForServiceAccount)

	// Register CLI commands for CreateApiKeyForServiceAccount
	reg.CliCommand(ctx, "CreateApiKeyForServiceAccount", c.CreateApiKeyForServiceAccount)

	// Register CLI commands for DeleteApiKeyForServiceAccount
	reg.CliCommand(ctx, "DeleteApiKeyForServiceAccount", c.DeleteApiKeyForServiceAccount)

	// Register CLI commands for ListStoreAgents
	reg.CliCommand(ctx, "ListStoreAgents", c.ListStoreAgents)

	// Register CLI commands for GetStoreAgent
	reg.CliCommand(ctx, "GetStoreAgent", c.GetStoreAgent)

	// Register CLI commands for ListStoreFunctions
	reg.CliCommand(ctx, "ListStoreFunctions", c.ListStoreFunctions)

	// Register CLI commands for GetStoreFunction
	reg.CliCommand(ctx, "GetStoreFunction", c.GetStoreFunction)

	// Register CLI commands for ListWorkspaceUsers
	reg.CliCommand(ctx, "ListWorkspaceUsers", c.ListWorkspaceUsers)

	// Register CLI commands for InviteWorkspaceUser
	reg.CliCommand(ctx, "InviteWorkspaceUser", c.InviteWorkspaceUser)

	// Register CLI commands for RemoveWorkspaceUser
	reg.CliCommand(ctx, "RemoveWorkspaceUser", c.RemoveWorkspaceUser)

	// Register CLI commands for UpdateWorkspaceUserRole
	reg.CliCommand(ctx, "UpdateWorkspaceUserRole", c.UpdateWorkspaceUserRole)

	// Register CLI commands for ListWorkspaces
	reg.CliCommand(ctx, "ListWorkspaces", c.ListWorkspaces)

	// Register CLI commands for CreateWorspace
	reg.CliCommand(ctx, "CreateWorspace", c.CreateWorspace)

	// Register CLI commands for DeleteWorkspace
	reg.CliCommand(ctx, "DeleteWorkspace", c.DeleteWorkspace)

	// Register CLI commands for GetWorkspace
	reg.CliCommand(ctx, "GetWorkspace", c.GetWorkspace)

	// Register CLI commands for UpdateWorkspace
	reg.CliCommand(ctx, "UpdateWorkspace", c.UpdateWorkspace)

	// Register CLI commands for DeclineWorkspaceInvitation
	reg.CliCommand(ctx, "DeclineWorkspaceInvitation", c.DeclineWorkspaceInvitation)

	// Register CLI commands for AcceptWorkspaceInvitation
	reg.CliCommand(ctx, "AcceptWorkspaceInvitation", c.AcceptWorkspaceInvitation)

	// Register CLI commands for LeaveWorkspace
	reg.CliCommand(ctx, "LeaveWorkspace", c.LeaveWorkspace)

}

func (c *Client) ListAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentWithBody(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentRequestWithBody(c.Server, agentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgent(ctx context.Context, agentName string, body PutAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentRequest(c.Server, agentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAgentDeployments(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentDeploymentsRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgentDeployment(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentDeploymentRequest(c.Server, agentName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentDeployment(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentDeploymentRequest(c.Server, agentName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentDeploymentWithBody(ctx context.Context, agentName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentDeploymentRequestWithBody(c.Server, agentName, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentDeployment(ctx context.Context, agentName string, environmentName string, body PutAgentDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentDeploymentRequest(c.Server, agentName, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentDeploymentLogs(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentDeploymentLogsRequest(c.Server, agentName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentDeploymentMetrics(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentDeploymentMetricsRequest(c.Server, agentName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentMetrics(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentMetricsRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgentRelease(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentReleaseRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModelsForAuthenticationProvider(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsForAuthenticationProviderRequest(c.Server, authenticationProviderName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelWithRepoForAuthenticationProvider(ctx context.Context, authenticationProviderName string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelWithRepoForAuthenticationProviderRequest(c.Server, authenticationProviderName, modelRepoId, modelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationsForAuthenticationProvider(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsForAuthenticationProviderRequest(c.Server, authenticationProviderName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnvironmentWithBody(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnvironmentRequestWithBody(c.Server, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnvironment(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnvironmentRequest(c.Server, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentMetrics(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentMetricsRequest(c.Server, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFunctionWithBody(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFunctionRequestWithBody(c.Server, functionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFunction(ctx context.Context, functionName string, body PutFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFunctionRequest(c.Server, functionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFunctionDeployments(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFunctionDeploymentsRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunctionDeployment(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionDeploymentRequest(c.Server, functionName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionDeployment(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionDeploymentRequest(c.Server, functionName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFunctionDeploymentWithBody(ctx context.Context, functionName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFunctionDeploymentRequestWithBody(c.Server, functionName, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFunctionDeployment(ctx context.Context, functionName string, environmentName string, body PutFunctionDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFunctionDeploymentRequest(c.Server, functionName, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionDeploymentLogs(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionDeploymentLogsRequest(c.Server, functionName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionDeploymentMetrics(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionDeploymentMetricsRequest(c.Server, functionName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionMetrics(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionMetricsRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionRelease(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionReleaseRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLocationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModelProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModelProvider(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelProviderRequest(c.Server, modelProviderName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelProvider(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelProviderRequest(c.Server, modelProviderName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelProviderWithBody(ctx context.Context, modelProviderName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelProviderRequestWithBody(c.Server, modelProviderName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelProvider(ctx context.Context, modelProviderName string, body PutModelProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelProviderRequest(c.Server, modelProviderName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelWithBody(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelRequestWithBody(c.Server, modelName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModel(ctx context.Context, modelName string, body PutModelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelRequest(c.Server, modelName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModelDeployments(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelDeploymentsRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelDeploymentRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelDeployment(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelDeploymentRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelDeploymentWithBody(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelDeploymentRequestWithBody(c.Server, modelName, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModelDeployment(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModelDeploymentRequest(c.Server, modelName, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelDeploymentLogs(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelDeploymentLogsRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelDeploymentMetrics(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelDeploymentMetricsRequest(c.Server, modelName, environmentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelMetrics(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelMetricsRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseModel(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseModelRequest(c.Server, modelName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicy(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyRequest(c.Server, policyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicyWithBody(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyRequestWithBody(c.Server, policyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicy(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyRequest(c.Server, policyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllPendingInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllPendingInvitationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceServiceAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceServiceAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceServiceAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceServiceAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceServiceAccount(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceServiceAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceServiceAccountRequest(c.Server, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceServiceAccountRequestWithBody(c.Server, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceServiceAccount(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceServiceAccountRequest(c.Server, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiKeysForServiceAccount(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiKeysForServiceAccountRequest(c.Server, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyForServiceAccountWithBody(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyForServiceAccountRequestWithBody(c.Server, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyForServiceAccount(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyForServiceAccountRequest(c.Server, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKeyForServiceAccount(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyForServiceAccountRequest(c.Server, clientId, apiKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStoreAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStoreAgentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoreAgent(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoreAgentRequest(c.Server, agentName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStoreFunctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStoreFunctionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoreFunction(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoreFunctionRequest(c.Server, functionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteWorkspaceUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteWorkspaceUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteWorkspaceUser(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteWorkspaceUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveWorkspaceUser(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveWorkspaceUserRequest(c.Server, subOrEmail)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceUserRoleWithBody(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceUserRoleRequestWithBody(c.Server, subOrEmail, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceUserRole(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceUserRoleRequest(c.Server, subOrEmail, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorspace(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, workspaceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, workspaceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeclineWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeclineWorkspaceInvitationRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptWorkspaceInvitation(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptWorkspaceInvitationRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LeaveWorkspace(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLeaveWorkspaceRequest(c.Server, workspaceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAgentsRequest generates requests for ListAgents
func NewListAgentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAgentRequest generates requests for DeleteAgent
func NewDeleteAgentRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentRequest generates requests for GetAgent
func NewGetAgentRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAgentRequest calls the generic PutAgent builder with application/json body
func NewPutAgentRequest(server string, agentName string, body PutAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentRequestWithBody(server, agentName, "application/json", bodyReader)
}

// NewPutAgentRequestWithBody generates requests for PutAgent with any type of body
func NewPutAgentRequestWithBody(server string, agentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAgentDeploymentsRequest generates requests for ListAgentDeployments
func NewListAgentDeploymentsRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAgentDeploymentRequest generates requests for DeleteAgentDeployment
func NewDeleteAgentDeploymentRequest(server string, agentName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentDeploymentRequest generates requests for GetAgentDeployment
func NewGetAgentDeploymentRequest(server string, agentName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAgentDeploymentRequest calls the generic PutAgentDeployment builder with application/json body
func NewPutAgentDeploymentRequest(server string, agentName string, environmentName string, body PutAgentDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentDeploymentRequestWithBody(server, agentName, environmentName, "application/json", bodyReader)
}

// NewPutAgentDeploymentRequestWithBody generates requests for PutAgentDeployment with any type of body
func NewPutAgentDeploymentRequestWithBody(server string, agentName string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAgentDeploymentLogsRequest generates requests for GetAgentDeploymentLogs
func NewGetAgentDeploymentLogsRequest(server string, agentName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/deployments/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentDeploymentMetricsRequest generates requests for GetAgentDeploymentMetrics
func NewGetAgentDeploymentMetricsRequest(server string, agentName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/deployments/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentMetricsRequest generates requests for GetAgentMetrics
func NewGetAgentMetricsRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAgentReleaseRequest generates requests for CreateAgentRelease
func NewCreateAgentReleaseRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModelsForAuthenticationProviderRequest generates requests for ListModelsForAuthenticationProvider
func NewListModelsForAuthenticationProviderRequest(server string, authenticationProviderName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authenticationProviderName", runtime.ParamLocationPath, authenticationProviderName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authentication_providers/%s/models", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelWithRepoForAuthenticationProviderRequest generates requests for GetModelWithRepoForAuthenticationProvider
func NewGetModelWithRepoForAuthenticationProviderRequest(server string, authenticationProviderName string, modelRepoId string, modelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authenticationProviderName", runtime.ParamLocationPath, authenticationProviderName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "modelRepoId", runtime.ParamLocationPath, modelRepoId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "modelId", runtime.ParamLocationPath, modelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authentication_providers/%s/models/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationsForAuthenticationProviderRequest generates requests for ListOrganizationsForAuthenticationProvider
func NewListOrganizationsForAuthenticationProviderRequest(server string, authenticationProviderName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authenticationProviderName", runtime.ParamLocationPath, authenticationProviderName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authentication_providers/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigurationRequest generates requests for GetConfiguration
func NewGetConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEnvironmentRequest calls the generic PutEnvironment builder with application/json body
func NewPutEnvironmentRequest(server string, environmentName string, body PutEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEnvironmentRequestWithBody(server, environmentName, "application/json", bodyReader)
}

// NewPutEnvironmentRequestWithBody generates requests for PutEnvironment with any type of body
func NewPutEnvironmentRequestWithBody(server string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentMetricsRequest generates requests for GetEnvironmentMetrics
func NewGetEnvironmentMetricsRequest(server string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFunctionsRequest generates requests for ListFunctions
func NewListFunctionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFunctionRequest generates requests for DeleteFunction
func NewDeleteFunctionRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionRequest generates requests for GetFunction
func NewGetFunctionRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFunctionRequest calls the generic PutFunction builder with application/json body
func NewPutFunctionRequest(server string, functionName string, body PutFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFunctionRequestWithBody(server, functionName, "application/json", bodyReader)
}

// NewPutFunctionRequestWithBody generates requests for PutFunction with any type of body
func NewPutFunctionRequestWithBody(server string, functionName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFunctionDeploymentsRequest generates requests for ListFunctionDeployments
func NewListFunctionDeploymentsRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFunctionDeploymentRequest generates requests for DeleteFunctionDeployment
func NewDeleteFunctionDeploymentRequest(server string, functionName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionDeploymentRequest generates requests for GetFunctionDeployment
func NewGetFunctionDeploymentRequest(server string, functionName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFunctionDeploymentRequest calls the generic PutFunctionDeployment builder with application/json body
func NewPutFunctionDeploymentRequest(server string, functionName string, environmentName string, body PutFunctionDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFunctionDeploymentRequestWithBody(server, functionName, environmentName, "application/json", bodyReader)
}

// NewPutFunctionDeploymentRequestWithBody generates requests for PutFunctionDeployment with any type of body
func NewPutFunctionDeploymentRequestWithBody(server string, functionName string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionDeploymentLogsRequest generates requests for GetFunctionDeploymentLogs
func NewGetFunctionDeploymentLogsRequest(server string, functionName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/deployments/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionDeploymentMetricsRequest generates requests for GetFunctionDeploymentMetrics
func NewGetFunctionDeploymentMetricsRequest(server string, functionName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/deployments/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionMetricsRequest generates requests for GetFunctionMetrics
func NewGetFunctionMetricsRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionReleaseRequest generates requests for CreateFunctionRelease
func NewCreateFunctionReleaseRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functions/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLocationsRequest generates requests for ListLocations
func NewListLocationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsRequest generates requests for GetMetrics
func NewGetMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModelProvidersRequest generates requests for ListModelProviders
func NewListModelProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelProviderRequest generates requests for DeleteModelProvider
func NewDeleteModelProviderRequest(server string, modelProviderName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelProviderName", runtime.ParamLocationPath, modelProviderName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelProviderRequest generates requests for GetModelProvider
func NewGetModelProviderRequest(server string, modelProviderName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelProviderName", runtime.ParamLocationPath, modelProviderName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModelProviderRequest calls the generic PutModelProvider builder with application/json body
func NewPutModelProviderRequest(server string, modelProviderName string, body PutModelProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutModelProviderRequestWithBody(server, modelProviderName, "application/json", bodyReader)
}

// NewPutModelProviderRequestWithBody generates requests for PutModelProvider with any type of body
func NewPutModelProviderRequestWithBody(server string, modelProviderName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelProviderName", runtime.ParamLocationPath, modelProviderName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model_providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListModelsRequest generates requests for ListModels
func NewListModelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelRequest generates requests for DeleteModel
func NewDeleteModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelRequest generates requests for GetModel
func NewGetModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModelRequest calls the generic PutModel builder with application/json body
func NewPutModelRequest(server string, modelName string, body PutModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutModelRequestWithBody(server, modelName, "application/json", bodyReader)
}

// NewPutModelRequestWithBody generates requests for PutModel with any type of body
func NewPutModelRequestWithBody(server string, modelName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListModelDeploymentsRequest generates requests for ListModelDeployments
func NewListModelDeploymentsRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelDeploymentRequest generates requests for DeleteModelDeployment
func NewDeleteModelDeploymentRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelDeploymentRequest generates requests for GetModelDeployment
func NewGetModelDeploymentRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModelDeploymentRequest calls the generic PutModelDeployment builder with application/json body
func NewPutModelDeploymentRequest(server string, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutModelDeploymentRequestWithBody(server, modelName, environmentName, "application/json", bodyReader)
}

// NewPutModelDeploymentRequestWithBody generates requests for PutModelDeployment with any type of body
func NewPutModelDeploymentRequestWithBody(server string, modelName string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetModelDeploymentLogsRequest generates requests for GetModelDeploymentLogs
func NewGetModelDeploymentLogsRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelDeploymentMetricsRequest generates requests for GetModelDeploymentMetrics
func NewGetModelDeploymentMetricsRequest(server string, modelName string, environmentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/deployments/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelMetricsRequest generates requests for GetModelMetrics
func NewGetModelMetricsRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReleaseModelRequest generates requests for ReleaseModel
func NewReleaseModelRequest(server string, modelName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "modelName", runtime.ParamLocationPath, modelName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPoliciesRequest generates requests for ListPolicies
func NewListPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePolicyRequest generates requests for DeletePolicy
func NewDeletePolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyRequest generates requests for GetPolicy
func NewGetPolicyRequest(server string, policyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPolicyRequest calls the generic PutPolicy builder with application/json body
func NewPutPolicyRequest(server string, policyName string, body PutPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPolicyRequestWithBody(server, policyName, "application/json", bodyReader)
}

// NewPutPolicyRequestWithBody generates requests for PutPolicy with any type of body
func NewPutPolicyRequestWithBody(server string, policyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyName", runtime.ParamLocationPath, policyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAllPendingInvitationsRequest generates requests for ListAllPendingInvitations
func NewListAllPendingInvitationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceServiceAccountsRequest generates requests for GetWorkspaceServiceAccounts
func NewGetWorkspaceServiceAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkspaceServiceAccountRequest calls the generic CreateWorkspaceServiceAccount builder with application/json body
func NewCreateWorkspaceServiceAccountRequest(server string, body CreateWorkspaceServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceServiceAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorkspaceServiceAccountRequestWithBody generates requests for CreateWorkspaceServiceAccount with any type of body
func NewCreateWorkspaceServiceAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceServiceAccountRequest generates requests for DeleteWorkspaceServiceAccount
func NewDeleteWorkspaceServiceAccountRequest(server string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceServiceAccountRequest calls the generic UpdateWorkspaceServiceAccount builder with application/json body
func NewUpdateWorkspaceServiceAccountRequest(server string, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceServiceAccountRequestWithBody(server, clientId, "application/json", bodyReader)
}

// NewUpdateWorkspaceServiceAccountRequestWithBody generates requests for UpdateWorkspaceServiceAccount with any type of body
func NewUpdateWorkspaceServiceAccountRequestWithBody(server string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApiKeysForServiceAccountRequest generates requests for ListApiKeysForServiceAccount
func NewListApiKeysForServiceAccountRequest(server string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s/api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiKeyForServiceAccountRequest calls the generic CreateApiKeyForServiceAccount builder with application/json body
func NewCreateApiKeyForServiceAccountRequest(server string, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiKeyForServiceAccountRequestWithBody(server, clientId, "application/json", bodyReader)
}

// NewCreateApiKeyForServiceAccountRequestWithBody generates requests for CreateApiKeyForServiceAccount with any type of body
func NewCreateApiKeyForServiceAccountRequestWithBody(server string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s/api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeyForServiceAccountRequest generates requests for DeleteApiKeyForServiceAccount
func NewDeleteApiKeyForServiceAccountRequest(server string, clientId string, apiKeyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clientId", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_accounts/%s/api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListStoreAgentsRequest generates requests for ListStoreAgents
func NewListStoreAgentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoreAgentRequest generates requests for GetStoreAgent
func NewGetStoreAgentRequest(server string, agentName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentName", runtime.ParamLocationPath, agentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListStoreFunctionsRequest generates requests for ListStoreFunctions
func NewListStoreFunctionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/functions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoreFunctionRequest generates requests for GetStoreFunction
func NewGetStoreFunctionRequest(server string, functionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "functionName", runtime.ParamLocationPath, functionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/functions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWorkspaceUsersRequest generates requests for ListWorkspaceUsers
func NewListWorkspaceUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInviteWorkspaceUserRequest calls the generic InviteWorkspaceUser builder with application/json body
func NewInviteWorkspaceUserRequest(server string, body InviteWorkspaceUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInviteWorkspaceUserRequestWithBody(server, "application/json", bodyReader)
}

// NewInviteWorkspaceUserRequestWithBody generates requests for InviteWorkspaceUser with any type of body
func NewInviteWorkspaceUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveWorkspaceUserRequest generates requests for RemoveWorkspaceUser
func NewRemoveWorkspaceUserRequest(server string, subOrEmail string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subOrEmail", runtime.ParamLocationPath, subOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceUserRoleRequest calls the generic UpdateWorkspaceUserRole builder with application/json body
func NewUpdateWorkspaceUserRoleRequest(server string, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceUserRoleRequestWithBody(server, subOrEmail, "application/json", bodyReader)
}

// NewUpdateWorkspaceUserRoleRequestWithBody generates requests for UpdateWorkspaceUserRole with any type of body
func NewUpdateWorkspaceUserRoleRequestWithBody(server string, subOrEmail string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subOrEmail", runtime.ParamLocationPath, subOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorspaceRequest calls the generic CreateWorspace builder with application/json body
func NewCreateWorspaceRequest(server string, body CreateWorspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorspaceRequestWithBody generates requests for CreateWorspace with any type of body
func NewCreateWorspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, workspaceName string, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, workspaceName, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, workspaceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeclineWorkspaceInvitationRequest generates requests for DeclineWorkspaceInvitation
func NewDeclineWorkspaceInvitationRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/decline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptWorkspaceInvitationRequest generates requests for AcceptWorkspaceInvitation
func NewAcceptWorkspaceInvitationRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLeaveWorkspaceRequest generates requests for LeaveWorkspace
func NewLeaveWorkspaceRequest(server string, workspaceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceName", runtime.ParamLocationPath, workspaceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/leave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, runServer string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, runServer, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAgentsWithResponse request
	ListAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAgentsResponse, error)

	// DeleteAgentWithResponse request
	DeleteAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error)

	// GetAgentWithResponse request
	GetAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetAgentResponse, error)

	// PutAgentWithBodyWithResponse request with any body
	PutAgentWithBodyWithResponse(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentResponse, error)

	PutAgentWithResponse(ctx context.Context, agentName string, body PutAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentResponse, error)

	// ListAgentDeploymentsWithResponse request
	ListAgentDeploymentsWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*ListAgentDeploymentsResponse, error)

	// DeleteAgentDeploymentWithResponse request
	DeleteAgentDeploymentWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteAgentDeploymentResponse, error)

	// GetAgentDeploymentWithResponse request
	GetAgentDeploymentWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*GetAgentDeploymentResponse, error)

	// PutAgentDeploymentWithBodyWithResponse request with any body
	PutAgentDeploymentWithBodyWithResponse(ctx context.Context, agentName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentDeploymentResponse, error)

	PutAgentDeploymentWithResponse(ctx context.Context, agentName string, environmentName string, body PutAgentDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentDeploymentResponse, error)

	// GetAgentDeploymentLogsWithResponse request
	GetAgentDeploymentLogsWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*GetAgentDeploymentLogsResponse, error)

	// GetAgentDeploymentMetricsWithResponse request
	GetAgentDeploymentMetricsWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*GetAgentDeploymentMetricsResponse, error)

	// GetAgentMetricsWithResponse request
	GetAgentMetricsWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetAgentMetricsResponse, error)

	// CreateAgentReleaseWithResponse request
	CreateAgentReleaseWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*CreateAgentReleaseResponse, error)

	// ListModelsForAuthenticationProviderWithResponse request
	ListModelsForAuthenticationProviderWithResponse(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*ListModelsForAuthenticationProviderResponse, error)

	// GetModelWithRepoForAuthenticationProviderWithResponse request
	GetModelWithRepoForAuthenticationProviderWithResponse(ctx context.Context, authenticationProviderName string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*GetModelWithRepoForAuthenticationProviderResponse, error)

	// ListOrganizationsForAuthenticationProviderWithResponse request
	ListOrganizationsForAuthenticationProviderWithResponse(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*ListOrganizationsForAuthenticationProviderResponse, error)

	// GetConfigurationWithResponse request
	GetConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationResponse, error)

	// ListEnvironmentsWithResponse request
	ListEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// PutEnvironmentWithBodyWithResponse request with any body
	PutEnvironmentWithBodyWithResponse(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error)

	PutEnvironmentWithResponse(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error)

	// GetEnvironmentMetricsWithResponse request
	GetEnvironmentMetricsWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentMetricsResponse, error)

	// ListFunctionsWithResponse request
	ListFunctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFunctionsResponse, error)

	// DeleteFunctionWithResponse request
	DeleteFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*DeleteFunctionResponse, error)

	// GetFunctionWithResponse request
	GetFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetFunctionResponse, error)

	// PutFunctionWithBodyWithResponse request with any body
	PutFunctionWithBodyWithResponse(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFunctionResponse, error)

	PutFunctionWithResponse(ctx context.Context, functionName string, body PutFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFunctionResponse, error)

	// ListFunctionDeploymentsWithResponse request
	ListFunctionDeploymentsWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*ListFunctionDeploymentsResponse, error)

	// DeleteFunctionDeploymentWithResponse request
	DeleteFunctionDeploymentWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteFunctionDeploymentResponse, error)

	// GetFunctionDeploymentWithResponse request
	GetFunctionDeploymentWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*GetFunctionDeploymentResponse, error)

	// PutFunctionDeploymentWithBodyWithResponse request with any body
	PutFunctionDeploymentWithBodyWithResponse(ctx context.Context, functionName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFunctionDeploymentResponse, error)

	PutFunctionDeploymentWithResponse(ctx context.Context, functionName string, environmentName string, body PutFunctionDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFunctionDeploymentResponse, error)

	// GetFunctionDeploymentLogsWithResponse request
	GetFunctionDeploymentLogsWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*GetFunctionDeploymentLogsResponse, error)

	// GetFunctionDeploymentMetricsWithResponse request
	GetFunctionDeploymentMetricsWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*GetFunctionDeploymentMetricsResponse, error)

	// GetFunctionMetricsWithResponse request
	GetFunctionMetricsWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetFunctionMetricsResponse, error)

	// CreateFunctionReleaseWithResponse request
	CreateFunctionReleaseWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*CreateFunctionReleaseResponse, error)

	// ListLocationsWithResponse request
	ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error)

	// GetMetricsWithResponse request
	GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error)

	// ListModelProvidersWithResponse request
	ListModelProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelProvidersResponse, error)

	// DeleteModelProviderWithResponse request
	DeleteModelProviderWithResponse(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*DeleteModelProviderResponse, error)

	// GetModelProviderWithResponse request
	GetModelProviderWithResponse(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*GetModelProviderResponse, error)

	// PutModelProviderWithBodyWithResponse request with any body
	PutModelProviderWithBodyWithResponse(ctx context.Context, modelProviderName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelProviderResponse, error)

	PutModelProviderWithResponse(ctx context.Context, modelProviderName string, body PutModelProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelProviderResponse, error)

	// ListModelsWithResponse request
	ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error)

	// DeleteModelWithResponse request
	DeleteModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error)

	// GetModelWithResponse request
	GetModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelResponse, error)

	// PutModelWithBodyWithResponse request with any body
	PutModelWithBodyWithResponse(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelResponse, error)

	PutModelWithResponse(ctx context.Context, modelName string, body PutModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelResponse, error)

	// ListModelDeploymentsWithResponse request
	ListModelDeploymentsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ListModelDeploymentsResponse, error)

	// DeleteModelDeploymentWithResponse request
	DeleteModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteModelDeploymentResponse, error)

	// GetModelDeploymentWithResponse request
	GetModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentResponse, error)

	// PutModelDeploymentWithBodyWithResponse request with any body
	PutModelDeploymentWithBodyWithResponse(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error)

	PutModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error)

	// GetModelDeploymentLogsWithResponse request
	GetModelDeploymentLogsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentLogsResponse, error)

	// GetModelDeploymentMetricsWithResponse request
	GetModelDeploymentMetricsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentMetricsResponse, error)

	// GetModelMetricsWithResponse request
	GetModelMetricsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelMetricsResponse, error)

	// ReleaseModelWithResponse request
	ReleaseModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ReleaseModelResponse, error)

	// ListPoliciesWithResponse request
	ListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPoliciesResponse, error)

	// DeletePolicyWithResponse request
	DeletePolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error)

	// GetPolicyWithResponse request
	GetPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error)

	// PutPolicyWithBodyWithResponse request with any body
	PutPolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error)

	PutPolicyWithResponse(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error)

	// ListAllPendingInvitationsWithResponse request
	ListAllPendingInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllPendingInvitationsResponse, error)

	// GetWorkspaceServiceAccountsWithResponse request
	GetWorkspaceServiceAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkspaceServiceAccountsResponse, error)

	// CreateWorkspaceServiceAccountWithBodyWithResponse request with any body
	CreateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error)

	CreateWorkspaceServiceAccountWithResponse(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error)

	// DeleteWorkspaceServiceAccountWithResponse request
	DeleteWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceServiceAccountResponse, error)

	// UpdateWorkspaceServiceAccountWithBodyWithResponse request with any body
	UpdateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error)

	UpdateWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error)

	// ListApiKeysForServiceAccountWithResponse request
	ListApiKeysForServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*ListApiKeysForServiceAccountResponse, error)

	// CreateApiKeyForServiceAccountWithBodyWithResponse request with any body
	CreateApiKeyForServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error)

	CreateApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error)

	// DeleteApiKeyForServiceAccountWithResponse request
	DeleteApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*DeleteApiKeyForServiceAccountResponse, error)

	// ListStoreAgentsWithResponse request
	ListStoreAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreAgentsResponse, error)

	// GetStoreAgentWithResponse request
	GetStoreAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetStoreAgentResponse, error)

	// ListStoreFunctionsWithResponse request
	ListStoreFunctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreFunctionsResponse, error)

	// GetStoreFunctionWithResponse request
	GetStoreFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetStoreFunctionResponse, error)

	// ListWorkspaceUsersWithResponse request
	ListWorkspaceUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error)

	// InviteWorkspaceUserWithBodyWithResponse request with any body
	InviteWorkspaceUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error)

	InviteWorkspaceUserWithResponse(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error)

	// RemoveWorkspaceUserWithResponse request
	RemoveWorkspaceUserWithResponse(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*RemoveWorkspaceUserResponse, error)

	// UpdateWorkspaceUserRoleWithBodyWithResponse request with any body
	UpdateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error)

	UpdateWorkspaceUserRoleWithResponse(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error)

	// ListWorkspacesWithResponse request
	ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error)

	// CreateWorspaceWithBodyWithResponse request with any body
	CreateWorspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error)

	CreateWorspaceWithResponse(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error)

	// DeleteWorkspaceWithResponse request
	DeleteWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspaceWithResponse request
	GetWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// UpdateWorkspaceWithBodyWithResponse request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// DeclineWorkspaceInvitationWithResponse request
	DeclineWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeclineWorkspaceInvitationResponse, error)

	// AcceptWorkspaceInvitationWithResponse request
	AcceptWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*AcceptWorkspaceInvitationResponse, error)

	// LeaveWorkspaceWithResponse request
	LeaveWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*LeaveWorkspaceResponse, error)
}

type ListAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Agent
}

// Status returns HTTPResponse.Status
func (r ListAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r DeleteAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r GetAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r PutAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAgentDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AgentDeployment
}

// Status returns HTTPResponse.Status
func (r ListAgentDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentDeployment
}

// Status returns HTTPResponse.Status
func (r DeleteAgentDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentDeployment
}

// Status returns HTTPResponse.Status
func (r GetAgentDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentDeployment
}

// Status returns HTTPResponse.Status
func (r PutAgentDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentDeploymentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceDeploymentLog
}

// Status returns HTTPResponse.Status
func (r GetAgentDeploymentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentDeploymentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentDeploymentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDeploymentMetrics
}

// Status returns HTTPResponse.Status
func (r GetAgentDeploymentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentDeploymentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceMetrics
}

// Status returns HTTPResponse.Status
func (r GetAgentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAgentReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentRelease
}

// Status returns HTTPResponse.Status
func (r CreateAgentReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAgentReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsForAuthenticationProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthenticationProviderModel
}

// Status returns HTTPResponse.Status
func (r ListModelsForAuthenticationProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsForAuthenticationProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelWithRepoForAuthenticationProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationProviderModel
}

// Status returns HTTPResponse.Status
func (r GetModelWithRepoForAuthenticationProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelWithRepoForAuthenticationProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsForAuthenticationProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthenticationProviderOrganization
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsForAuthenticationProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsForAuthenticationProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Configuration
}

// Status returns HTTPResponse.Status
func (r GetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Environment
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r PutEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentMetrics
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Function
}

// Status returns HTTPResponse.Status
func (r ListFunctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Function
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Function
}

// Status returns HTTPResponse.Status
func (r GetFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Function
}

// Status returns HTTPResponse.Status
func (r PutFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFunctionDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FunctionDeployment
}

// Status returns HTTPResponse.Status
func (r ListFunctionDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFunctionDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionDeployment
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionDeployment
}

// Status returns HTTPResponse.Status
func (r GetFunctionDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFunctionDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionDeployment
}

// Status returns HTTPResponse.Status
func (r PutFunctionDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFunctionDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionDeploymentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceDeploymentLog
}

// Status returns HTTPResponse.Status
func (r GetFunctionDeploymentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionDeploymentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionDeploymentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDeploymentMetrics
}

// Status returns HTTPResponse.Status
func (r GetFunctionDeploymentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionDeploymentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceMetrics
}

// Status returns HTTPResponse.Status
func (r GetFunctionMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionRelease
}

// Status returns HTTPResponse.Status
func (r CreateFunctionReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Location
}

// Status returns HTTPResponse.Status
func (r ListLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metrics
}

// Status returns HTTPResponse.Status
func (r GetMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelProvider
}

// Status returns HTTPResponse.Status
func (r ListModelProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelProvider
}

// Status returns HTTPResponse.Status
func (r DeleteModelProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelProvider
}

// Status returns HTTPResponse.Status
func (r GetModelProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModelProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelProvider
}

// Status returns HTTPResponse.Status
func (r PutModelProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModelProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Model
}

// Status returns HTTPResponse.Status
func (r ListModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r DeleteModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r GetModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Model
}

// Status returns HTTPResponse.Status
func (r PutModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelDeployment
}

// Status returns HTTPResponse.Status
func (r ListModelDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeployment
}

// Status returns HTTPResponse.Status
func (r DeleteModelDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeployment
}

// Status returns HTTPResponse.Status
func (r GetModelDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModelDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeployment
}

// Status returns HTTPResponse.Status
func (r PutModelDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModelDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelDeploymentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelDeploymentLog
}

// Status returns HTTPResponse.Status
func (r GetModelDeploymentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelDeploymentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelDeploymentMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDeploymentMetrics
}

// Status returns HTTPResponse.Status
func (r GetModelDeploymentMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelDeploymentMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelMetrics
}

// Status returns HTTPResponse.Status
func (r GetModelMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleaseModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelRelease
}

// Status returns HTTPResponse.Status
func (r ReleaseModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleaseModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Policy
}

// Status returns HTTPResponse.Status
func (r ListPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r DeletePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r GetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r PutPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllPendingInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PendingInvitationRender
}

// Status returns HTTPResponse.Status
func (r ListAllPendingInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllPendingInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceServiceAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceServiceAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceServiceAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// ClientSecret Service account client secret (only returned on creation)
		ClientSecret *string `json:"client_secret,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ClientId Service account client ID
		ClientId *string `json:"client_id,omitempty"`

		// CreatedAt Creation timestamp
		CreatedAt *string `json:"created_at,omitempty"`

		// Description Service account description
		Description *string `json:"description,omitempty"`

		// Name Service account name
		Name *string `json:"name,omitempty"`

		// UpdatedAt Last update timestamp
		UpdatedAt *string `json:"updated_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiKeysForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApiKey
}

// Status returns HTTPResponse.Status
func (r ListApiKeysForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiKeysForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiKeyForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
}

// Status returns HTTPResponse.Status
func (r CreateApiKeyForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiKeyForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyForServiceAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyForServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyForServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStoreAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StoreAgent
}

// Status returns HTTPResponse.Status
func (r ListStoreAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStoreAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoreAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoreAgent
}

// Status returns HTTPResponse.Status
func (r GetStoreAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoreAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStoreFunctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StoreFunction
}

// Status returns HTTPResponse.Status
func (r ListStoreFunctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStoreFunctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoreFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoreFunction
}

// Status returns HTTPResponse.Status
func (r GetStoreFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoreFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkspaceUser
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteWorkspaceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitation
}

// Status returns HTTPResponse.Status
func (r InviteWorkspaceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteWorkspaceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveWorkspaceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveWorkspaceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveWorkspaceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceUser
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Workspace
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r CreateWorspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeclineWorkspaceInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitation
}

// Status returns HTTPResponse.Status
func (r DeclineWorkspaceInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeclineWorkspaceInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptWorkspaceInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingInvitationAccept
}

// Status returns HTTPResponse.Status
func (r AcceptWorkspaceInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptWorkspaceInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LeaveWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r LeaveWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LeaveWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAgentsWithResponse request returning *ListAgentsResponse
func (c *ClientWithResponses) ListAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAgentsResponse, error) {
	rsp, err := c.ListAgents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentsResponse(rsp)
}

// DeleteAgentWithResponse request returning *DeleteAgentResponse
func (c *ClientWithResponses) DeleteAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error) {
	rsp, err := c.DeleteAgent(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentResponse(rsp)
}

// GetAgentWithResponse request returning *GetAgentResponse
func (c *ClientWithResponses) GetAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetAgentResponse, error) {
	rsp, err := c.GetAgent(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentResponse(rsp)
}

// PutAgentWithBodyWithResponse request with arbitrary body returning *PutAgentResponse
func (c *ClientWithResponses) PutAgentWithBodyWithResponse(ctx context.Context, agentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentResponse, error) {
	rsp, err := c.PutAgentWithBody(ctx, agentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentResponse(rsp)
}

func (c *ClientWithResponses) PutAgentWithResponse(ctx context.Context, agentName string, body PutAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentResponse, error) {
	rsp, err := c.PutAgent(ctx, agentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentResponse(rsp)
}

// ListAgentDeploymentsWithResponse request returning *ListAgentDeploymentsResponse
func (c *ClientWithResponses) ListAgentDeploymentsWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*ListAgentDeploymentsResponse, error) {
	rsp, err := c.ListAgentDeployments(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentDeploymentsResponse(rsp)
}

// DeleteAgentDeploymentWithResponse request returning *DeleteAgentDeploymentResponse
func (c *ClientWithResponses) DeleteAgentDeploymentWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteAgentDeploymentResponse, error) {
	rsp, err := c.DeleteAgentDeployment(ctx, agentName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentDeploymentResponse(rsp)
}

// GetAgentDeploymentWithResponse request returning *GetAgentDeploymentResponse
func (c *ClientWithResponses) GetAgentDeploymentWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*GetAgentDeploymentResponse, error) {
	rsp, err := c.GetAgentDeployment(ctx, agentName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentDeploymentResponse(rsp)
}

// PutAgentDeploymentWithBodyWithResponse request with arbitrary body returning *PutAgentDeploymentResponse
func (c *ClientWithResponses) PutAgentDeploymentWithBodyWithResponse(ctx context.Context, agentName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentDeploymentResponse, error) {
	rsp, err := c.PutAgentDeploymentWithBody(ctx, agentName, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentDeploymentResponse(rsp)
}

func (c *ClientWithResponses) PutAgentDeploymentWithResponse(ctx context.Context, agentName string, environmentName string, body PutAgentDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentDeploymentResponse, error) {
	rsp, err := c.PutAgentDeployment(ctx, agentName, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentDeploymentResponse(rsp)
}

// GetAgentDeploymentLogsWithResponse request returning *GetAgentDeploymentLogsResponse
func (c *ClientWithResponses) GetAgentDeploymentLogsWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*GetAgentDeploymentLogsResponse, error) {
	rsp, err := c.GetAgentDeploymentLogs(ctx, agentName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentDeploymentLogsResponse(rsp)
}

// GetAgentDeploymentMetricsWithResponse request returning *GetAgentDeploymentMetricsResponse
func (c *ClientWithResponses) GetAgentDeploymentMetricsWithResponse(ctx context.Context, agentName string, environmentName string, reqEditors ...RequestEditorFn) (*GetAgentDeploymentMetricsResponse, error) {
	rsp, err := c.GetAgentDeploymentMetrics(ctx, agentName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentDeploymentMetricsResponse(rsp)
}

// GetAgentMetricsWithResponse request returning *GetAgentMetricsResponse
func (c *ClientWithResponses) GetAgentMetricsWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetAgentMetricsResponse, error) {
	rsp, err := c.GetAgentMetrics(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentMetricsResponse(rsp)
}

// CreateAgentReleaseWithResponse request returning *CreateAgentReleaseResponse
func (c *ClientWithResponses) CreateAgentReleaseWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*CreateAgentReleaseResponse, error) {
	rsp, err := c.CreateAgentRelease(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentReleaseResponse(rsp)
}

// ListModelsForAuthenticationProviderWithResponse request returning *ListModelsForAuthenticationProviderResponse
func (c *ClientWithResponses) ListModelsForAuthenticationProviderWithResponse(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*ListModelsForAuthenticationProviderResponse, error) {
	rsp, err := c.ListModelsForAuthenticationProvider(ctx, authenticationProviderName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsForAuthenticationProviderResponse(rsp)
}

// GetModelWithRepoForAuthenticationProviderWithResponse request returning *GetModelWithRepoForAuthenticationProviderResponse
func (c *ClientWithResponses) GetModelWithRepoForAuthenticationProviderWithResponse(ctx context.Context, authenticationProviderName string, modelRepoId string, modelId string, reqEditors ...RequestEditorFn) (*GetModelWithRepoForAuthenticationProviderResponse, error) {
	rsp, err := c.GetModelWithRepoForAuthenticationProvider(ctx, authenticationProviderName, modelRepoId, modelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelWithRepoForAuthenticationProviderResponse(rsp)
}

// ListOrganizationsForAuthenticationProviderWithResponse request returning *ListOrganizationsForAuthenticationProviderResponse
func (c *ClientWithResponses) ListOrganizationsForAuthenticationProviderWithResponse(ctx context.Context, authenticationProviderName string, reqEditors ...RequestEditorFn) (*ListOrganizationsForAuthenticationProviderResponse, error) {
	rsp, err := c.ListOrganizationsForAuthenticationProvider(ctx, authenticationProviderName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsForAuthenticationProviderResponse(rsp)
}

// GetConfigurationWithResponse request returning *GetConfigurationResponse
func (c *ClientWithResponses) GetConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationResponse, error) {
	rsp, err := c.GetConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// PutEnvironmentWithBodyWithResponse request with arbitrary body returning *PutEnvironmentResponse
func (c *ClientWithResponses) PutEnvironmentWithBodyWithResponse(ctx context.Context, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error) {
	rsp, err := c.PutEnvironmentWithBody(ctx, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) PutEnvironmentWithResponse(ctx context.Context, environmentName string, body PutEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnvironmentResponse, error) {
	rsp, err := c.PutEnvironment(ctx, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnvironmentResponse(rsp)
}

// GetEnvironmentMetricsWithResponse request returning *GetEnvironmentMetricsResponse
func (c *ClientWithResponses) GetEnvironmentMetricsWithResponse(ctx context.Context, environmentName string, reqEditors ...RequestEditorFn) (*GetEnvironmentMetricsResponse, error) {
	rsp, err := c.GetEnvironmentMetrics(ctx, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentMetricsResponse(rsp)
}

// ListFunctionsWithResponse request returning *ListFunctionsResponse
func (c *ClientWithResponses) ListFunctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFunctionsResponse, error) {
	rsp, err := c.ListFunctions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionsResponse(rsp)
}

// DeleteFunctionWithResponse request returning *DeleteFunctionResponse
func (c *ClientWithResponses) DeleteFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*DeleteFunctionResponse, error) {
	rsp, err := c.DeleteFunction(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionResponse(rsp)
}

// GetFunctionWithResponse request returning *GetFunctionResponse
func (c *ClientWithResponses) GetFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetFunctionResponse, error) {
	rsp, err := c.GetFunction(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionResponse(rsp)
}

// PutFunctionWithBodyWithResponse request with arbitrary body returning *PutFunctionResponse
func (c *ClientWithResponses) PutFunctionWithBodyWithResponse(ctx context.Context, functionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFunctionResponse, error) {
	rsp, err := c.PutFunctionWithBody(ctx, functionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFunctionResponse(rsp)
}

func (c *ClientWithResponses) PutFunctionWithResponse(ctx context.Context, functionName string, body PutFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFunctionResponse, error) {
	rsp, err := c.PutFunction(ctx, functionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFunctionResponse(rsp)
}

// ListFunctionDeploymentsWithResponse request returning *ListFunctionDeploymentsResponse
func (c *ClientWithResponses) ListFunctionDeploymentsWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*ListFunctionDeploymentsResponse, error) {
	rsp, err := c.ListFunctionDeployments(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFunctionDeploymentsResponse(rsp)
}

// DeleteFunctionDeploymentWithResponse request returning *DeleteFunctionDeploymentResponse
func (c *ClientWithResponses) DeleteFunctionDeploymentWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteFunctionDeploymentResponse, error) {
	rsp, err := c.DeleteFunctionDeployment(ctx, functionName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionDeploymentResponse(rsp)
}

// GetFunctionDeploymentWithResponse request returning *GetFunctionDeploymentResponse
func (c *ClientWithResponses) GetFunctionDeploymentWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*GetFunctionDeploymentResponse, error) {
	rsp, err := c.GetFunctionDeployment(ctx, functionName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionDeploymentResponse(rsp)
}

// PutFunctionDeploymentWithBodyWithResponse request with arbitrary body returning *PutFunctionDeploymentResponse
func (c *ClientWithResponses) PutFunctionDeploymentWithBodyWithResponse(ctx context.Context, functionName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFunctionDeploymentResponse, error) {
	rsp, err := c.PutFunctionDeploymentWithBody(ctx, functionName, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFunctionDeploymentResponse(rsp)
}

func (c *ClientWithResponses) PutFunctionDeploymentWithResponse(ctx context.Context, functionName string, environmentName string, body PutFunctionDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFunctionDeploymentResponse, error) {
	rsp, err := c.PutFunctionDeployment(ctx, functionName, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFunctionDeploymentResponse(rsp)
}

// GetFunctionDeploymentLogsWithResponse request returning *GetFunctionDeploymentLogsResponse
func (c *ClientWithResponses) GetFunctionDeploymentLogsWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*GetFunctionDeploymentLogsResponse, error) {
	rsp, err := c.GetFunctionDeploymentLogs(ctx, functionName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionDeploymentLogsResponse(rsp)
}

// GetFunctionDeploymentMetricsWithResponse request returning *GetFunctionDeploymentMetricsResponse
func (c *ClientWithResponses) GetFunctionDeploymentMetricsWithResponse(ctx context.Context, functionName string, environmentName string, reqEditors ...RequestEditorFn) (*GetFunctionDeploymentMetricsResponse, error) {
	rsp, err := c.GetFunctionDeploymentMetrics(ctx, functionName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionDeploymentMetricsResponse(rsp)
}

// GetFunctionMetricsWithResponse request returning *GetFunctionMetricsResponse
func (c *ClientWithResponses) GetFunctionMetricsWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetFunctionMetricsResponse, error) {
	rsp, err := c.GetFunctionMetrics(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionMetricsResponse(rsp)
}

// CreateFunctionReleaseWithResponse request returning *CreateFunctionReleaseResponse
func (c *ClientWithResponses) CreateFunctionReleaseWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*CreateFunctionReleaseResponse, error) {
	rsp, err := c.CreateFunctionRelease(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionReleaseResponse(rsp)
}

// ListLocationsWithResponse request returning *ListLocationsResponse
func (c *ClientWithResponses) ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error) {
	rsp, err := c.ListLocations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLocationsResponse(rsp)
}

// GetMetricsWithResponse request returning *GetMetricsResponse
func (c *ClientWithResponses) GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error) {
	rsp, err := c.GetMetrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsResponse(rsp)
}

// ListModelProvidersWithResponse request returning *ListModelProvidersResponse
func (c *ClientWithResponses) ListModelProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelProvidersResponse, error) {
	rsp, err := c.ListModelProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelProvidersResponse(rsp)
}

// DeleteModelProviderWithResponse request returning *DeleteModelProviderResponse
func (c *ClientWithResponses) DeleteModelProviderWithResponse(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*DeleteModelProviderResponse, error) {
	rsp, err := c.DeleteModelProvider(ctx, modelProviderName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelProviderResponse(rsp)
}

// GetModelProviderWithResponse request returning *GetModelProviderResponse
func (c *ClientWithResponses) GetModelProviderWithResponse(ctx context.Context, modelProviderName string, reqEditors ...RequestEditorFn) (*GetModelProviderResponse, error) {
	rsp, err := c.GetModelProvider(ctx, modelProviderName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelProviderResponse(rsp)
}

// PutModelProviderWithBodyWithResponse request with arbitrary body returning *PutModelProviderResponse
func (c *ClientWithResponses) PutModelProviderWithBodyWithResponse(ctx context.Context, modelProviderName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelProviderResponse, error) {
	rsp, err := c.PutModelProviderWithBody(ctx, modelProviderName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelProviderResponse(rsp)
}

func (c *ClientWithResponses) PutModelProviderWithResponse(ctx context.Context, modelProviderName string, body PutModelProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelProviderResponse, error) {
	rsp, err := c.PutModelProvider(ctx, modelProviderName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelProviderResponse(rsp)
}

// ListModelsWithResponse request returning *ListModelsResponse
func (c *ClientWithResponses) ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error) {
	rsp, err := c.ListModels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsResponse(rsp)
}

// DeleteModelWithResponse request returning *DeleteModelResponse
func (c *ClientWithResponses) DeleteModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error) {
	rsp, err := c.DeleteModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelResponse(rsp)
}

// GetModelWithResponse request returning *GetModelResponse
func (c *ClientWithResponses) GetModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelResponse, error) {
	rsp, err := c.GetModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelResponse(rsp)
}

// PutModelWithBodyWithResponse request with arbitrary body returning *PutModelResponse
func (c *ClientWithResponses) PutModelWithBodyWithResponse(ctx context.Context, modelName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelResponse, error) {
	rsp, err := c.PutModelWithBody(ctx, modelName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelResponse(rsp)
}

func (c *ClientWithResponses) PutModelWithResponse(ctx context.Context, modelName string, body PutModelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelResponse, error) {
	rsp, err := c.PutModel(ctx, modelName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelResponse(rsp)
}

// ListModelDeploymentsWithResponse request returning *ListModelDeploymentsResponse
func (c *ClientWithResponses) ListModelDeploymentsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ListModelDeploymentsResponse, error) {
	rsp, err := c.ListModelDeployments(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelDeploymentsResponse(rsp)
}

// DeleteModelDeploymentWithResponse request returning *DeleteModelDeploymentResponse
func (c *ClientWithResponses) DeleteModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*DeleteModelDeploymentResponse, error) {
	rsp, err := c.DeleteModelDeployment(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelDeploymentResponse(rsp)
}

// GetModelDeploymentWithResponse request returning *GetModelDeploymentResponse
func (c *ClientWithResponses) GetModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentResponse, error) {
	rsp, err := c.GetModelDeployment(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelDeploymentResponse(rsp)
}

// PutModelDeploymentWithBodyWithResponse request with arbitrary body returning *PutModelDeploymentResponse
func (c *ClientWithResponses) PutModelDeploymentWithBodyWithResponse(ctx context.Context, modelName string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error) {
	rsp, err := c.PutModelDeploymentWithBody(ctx, modelName, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelDeploymentResponse(rsp)
}

func (c *ClientWithResponses) PutModelDeploymentWithResponse(ctx context.Context, modelName string, environmentName string, body PutModelDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutModelDeploymentResponse, error) {
	rsp, err := c.PutModelDeployment(ctx, modelName, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModelDeploymentResponse(rsp)
}

// GetModelDeploymentLogsWithResponse request returning *GetModelDeploymentLogsResponse
func (c *ClientWithResponses) GetModelDeploymentLogsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentLogsResponse, error) {
	rsp, err := c.GetModelDeploymentLogs(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelDeploymentLogsResponse(rsp)
}

// GetModelDeploymentMetricsWithResponse request returning *GetModelDeploymentMetricsResponse
func (c *ClientWithResponses) GetModelDeploymentMetricsWithResponse(ctx context.Context, modelName string, environmentName string, reqEditors ...RequestEditorFn) (*GetModelDeploymentMetricsResponse, error) {
	rsp, err := c.GetModelDeploymentMetrics(ctx, modelName, environmentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelDeploymentMetricsResponse(rsp)
}

// GetModelMetricsWithResponse request returning *GetModelMetricsResponse
func (c *ClientWithResponses) GetModelMetricsWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*GetModelMetricsResponse, error) {
	rsp, err := c.GetModelMetrics(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelMetricsResponse(rsp)
}

// ReleaseModelWithResponse request returning *ReleaseModelResponse
func (c *ClientWithResponses) ReleaseModelWithResponse(ctx context.Context, modelName string, reqEditors ...RequestEditorFn) (*ReleaseModelResponse, error) {
	rsp, err := c.ReleaseModel(ctx, modelName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseModelResponse(rsp)
}

// ListPoliciesWithResponse request returning *ListPoliciesResponse
func (c *ClientWithResponses) ListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPoliciesResponse, error) {
	rsp, err := c.ListPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPoliciesResponse(rsp)
}

// DeletePolicyWithResponse request returning *DeletePolicyResponse
func (c *ClientWithResponses) DeletePolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error) {
	rsp, err := c.DeletePolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyResponse(rsp)
}

// GetPolicyWithResponse request returning *GetPolicyResponse
func (c *ClientWithResponses) GetPolicyWithResponse(ctx context.Context, policyName string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error) {
	rsp, err := c.GetPolicy(ctx, policyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyResponse(rsp)
}

// PutPolicyWithBodyWithResponse request with arbitrary body returning *PutPolicyResponse
func (c *ClientWithResponses) PutPolicyWithBodyWithResponse(ctx context.Context, policyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error) {
	rsp, err := c.PutPolicyWithBody(ctx, policyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyResponse(rsp)
}

func (c *ClientWithResponses) PutPolicyWithResponse(ctx context.Context, policyName string, body PutPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyResponse, error) {
	rsp, err := c.PutPolicy(ctx, policyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyResponse(rsp)
}

// ListAllPendingInvitationsWithResponse request returning *ListAllPendingInvitationsResponse
func (c *ClientWithResponses) ListAllPendingInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAllPendingInvitationsResponse, error) {
	rsp, err := c.ListAllPendingInvitations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllPendingInvitationsResponse(rsp)
}

// GetWorkspaceServiceAccountsWithResponse request returning *GetWorkspaceServiceAccountsResponse
func (c *ClientWithResponses) GetWorkspaceServiceAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkspaceServiceAccountsResponse, error) {
	rsp, err := c.GetWorkspaceServiceAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceServiceAccountsResponse(rsp)
}

// CreateWorkspaceServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceServiceAccountResponse
func (c *ClientWithResponses) CreateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.CreateWorkspaceServiceAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceServiceAccountWithResponse(ctx context.Context, body CreateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.CreateWorkspaceServiceAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceServiceAccountResponse(rsp)
}

// DeleteWorkspaceServiceAccountWithResponse request returning *DeleteWorkspaceServiceAccountResponse
func (c *ClientWithResponses) DeleteWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceServiceAccountResponse, error) {
	rsp, err := c.DeleteWorkspaceServiceAccount(ctx, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceServiceAccountResponse(rsp)
}

// UpdateWorkspaceServiceAccountWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceServiceAccountResponse
func (c *ClientWithResponses) UpdateWorkspaceServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.UpdateWorkspaceServiceAccountWithBody(ctx, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceServiceAccountWithResponse(ctx context.Context, clientId string, body UpdateWorkspaceServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceServiceAccountResponse, error) {
	rsp, err := c.UpdateWorkspaceServiceAccount(ctx, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceServiceAccountResponse(rsp)
}

// ListApiKeysForServiceAccountWithResponse request returning *ListApiKeysForServiceAccountResponse
func (c *ClientWithResponses) ListApiKeysForServiceAccountWithResponse(ctx context.Context, clientId string, reqEditors ...RequestEditorFn) (*ListApiKeysForServiceAccountResponse, error) {
	rsp, err := c.ListApiKeysForServiceAccount(ctx, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiKeysForServiceAccountResponse(rsp)
}

// CreateApiKeyForServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateApiKeyForServiceAccountResponse
func (c *ClientWithResponses) CreateApiKeyForServiceAccountWithBodyWithResponse(ctx context.Context, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error) {
	rsp, err := c.CreateApiKeyForServiceAccountWithBody(ctx, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyForServiceAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, body CreateApiKeyForServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyForServiceAccountResponse, error) {
	rsp, err := c.CreateApiKeyForServiceAccount(ctx, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyForServiceAccountResponse(rsp)
}

// DeleteApiKeyForServiceAccountWithResponse request returning *DeleteApiKeyForServiceAccountResponse
func (c *ClientWithResponses) DeleteApiKeyForServiceAccountWithResponse(ctx context.Context, clientId string, apiKeyId string, reqEditors ...RequestEditorFn) (*DeleteApiKeyForServiceAccountResponse, error) {
	rsp, err := c.DeleteApiKeyForServiceAccount(ctx, clientId, apiKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyForServiceAccountResponse(rsp)
}

// ListStoreAgentsWithResponse request returning *ListStoreAgentsResponse
func (c *ClientWithResponses) ListStoreAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreAgentsResponse, error) {
	rsp, err := c.ListStoreAgents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStoreAgentsResponse(rsp)
}

// GetStoreAgentWithResponse request returning *GetStoreAgentResponse
func (c *ClientWithResponses) GetStoreAgentWithResponse(ctx context.Context, agentName string, reqEditors ...RequestEditorFn) (*GetStoreAgentResponse, error) {
	rsp, err := c.GetStoreAgent(ctx, agentName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoreAgentResponse(rsp)
}

// ListStoreFunctionsWithResponse request returning *ListStoreFunctionsResponse
func (c *ClientWithResponses) ListStoreFunctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListStoreFunctionsResponse, error) {
	rsp, err := c.ListStoreFunctions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStoreFunctionsResponse(rsp)
}

// GetStoreFunctionWithResponse request returning *GetStoreFunctionResponse
func (c *ClientWithResponses) GetStoreFunctionWithResponse(ctx context.Context, functionName string, reqEditors ...RequestEditorFn) (*GetStoreFunctionResponse, error) {
	rsp, err := c.GetStoreFunction(ctx, functionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoreFunctionResponse(rsp)
}

// ListWorkspaceUsersWithResponse request returning *ListWorkspaceUsersResponse
func (c *ClientWithResponses) ListWorkspaceUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error) {
	rsp, err := c.ListWorkspaceUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceUsersResponse(rsp)
}

// InviteWorkspaceUserWithBodyWithResponse request with arbitrary body returning *InviteWorkspaceUserResponse
func (c *ClientWithResponses) InviteWorkspaceUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error) {
	rsp, err := c.InviteWorkspaceUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteWorkspaceUserResponse(rsp)
}

func (c *ClientWithResponses) InviteWorkspaceUserWithResponse(ctx context.Context, body InviteWorkspaceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteWorkspaceUserResponse, error) {
	rsp, err := c.InviteWorkspaceUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteWorkspaceUserResponse(rsp)
}

// RemoveWorkspaceUserWithResponse request returning *RemoveWorkspaceUserResponse
func (c *ClientWithResponses) RemoveWorkspaceUserWithResponse(ctx context.Context, subOrEmail string, reqEditors ...RequestEditorFn) (*RemoveWorkspaceUserResponse, error) {
	rsp, err := c.RemoveWorkspaceUser(ctx, subOrEmail, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveWorkspaceUserResponse(rsp)
}

// UpdateWorkspaceUserRoleWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceUserRoleResponse
func (c *ClientWithResponses) UpdateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, subOrEmail string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error) {
	rsp, err := c.UpdateWorkspaceUserRoleWithBody(ctx, subOrEmail, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceUserRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceUserRoleWithResponse(ctx context.Context, subOrEmail string, body UpdateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceUserRoleResponse, error) {
	rsp, err := c.UpdateWorkspaceUserRole(ctx, subOrEmail, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceUserRoleResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// CreateWorspaceWithBodyWithResponse request with arbitrary body returning *CreateWorspaceResponse
func (c *ClientWithResponses) CreateWorspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error) {
	rsp, err := c.CreateWorspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorspaceWithResponse(ctx context.Context, body CreateWorspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorspaceResponse, error) {
	rsp, err := c.CreateWorspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorspaceResponse(rsp)
}

// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, workspaceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, workspaceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, workspaceName string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, workspaceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// DeclineWorkspaceInvitationWithResponse request returning *DeclineWorkspaceInvitationResponse
func (c *ClientWithResponses) DeclineWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*DeclineWorkspaceInvitationResponse, error) {
	rsp, err := c.DeclineWorkspaceInvitation(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeclineWorkspaceInvitationResponse(rsp)
}

// AcceptWorkspaceInvitationWithResponse request returning *AcceptWorkspaceInvitationResponse
func (c *ClientWithResponses) AcceptWorkspaceInvitationWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*AcceptWorkspaceInvitationResponse, error) {
	rsp, err := c.AcceptWorkspaceInvitation(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptWorkspaceInvitationResponse(rsp)
}

// LeaveWorkspaceWithResponse request returning *LeaveWorkspaceResponse
func (c *ClientWithResponses) LeaveWorkspaceWithResponse(ctx context.Context, workspaceName string, reqEditors ...RequestEditorFn) (*LeaveWorkspaceResponse, error) {
	rsp, err := c.LeaveWorkspace(ctx, workspaceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLeaveWorkspaceResponse(rsp)
}

// ParseListAgentsResponse parses an HTTP response from a ListAgentsWithResponse call
func ParseListAgentsResponse(rsp *http.Response) (*ListAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAgentResponse parses an HTTP response from a DeleteAgentWithResponse call
func ParseDeleteAgentResponse(rsp *http.Response) (*DeleteAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentResponse parses an HTTP response from a GetAgentWithResponse call
func ParseGetAgentResponse(rsp *http.Response) (*GetAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentResponse parses an HTTP response from a PutAgentWithResponse call
func ParsePutAgentResponse(rsp *http.Response) (*PutAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAgentDeploymentsResponse parses an HTTP response from a ListAgentDeploymentsWithResponse call
func ParseListAgentDeploymentsResponse(rsp *http.Response) (*ListAgentDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AgentDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAgentDeploymentResponse parses an HTTP response from a DeleteAgentDeploymentWithResponse call
func ParseDeleteAgentDeploymentResponse(rsp *http.Response) (*DeleteAgentDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentDeploymentResponse parses an HTTP response from a GetAgentDeploymentWithResponse call
func ParseGetAgentDeploymentResponse(rsp *http.Response) (*GetAgentDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentDeploymentResponse parses an HTTP response from a PutAgentDeploymentWithResponse call
func ParsePutAgentDeploymentResponse(rsp *http.Response) (*PutAgentDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentDeploymentLogsResponse parses an HTTP response from a GetAgentDeploymentLogsWithResponse call
func ParseGetAgentDeploymentLogsResponse(rsp *http.Response) (*GetAgentDeploymentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentDeploymentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceDeploymentLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentDeploymentMetricsResponse parses an HTTP response from a GetAgentDeploymentMetricsWithResponse call
func ParseGetAgentDeploymentMetricsResponse(rsp *http.Response) (*GetAgentDeploymentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentDeploymentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDeploymentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentMetricsResponse parses an HTTP response from a GetAgentMetricsWithResponse call
func ParseGetAgentMetricsResponse(rsp *http.Response) (*GetAgentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAgentReleaseResponse parses an HTTP response from a CreateAgentReleaseWithResponse call
func ParseCreateAgentReleaseResponse(rsp *http.Response) (*CreateAgentReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAgentReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentRelease
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelsForAuthenticationProviderResponse parses an HTTP response from a ListModelsForAuthenticationProviderWithResponse call
func ParseListModelsForAuthenticationProviderResponse(rsp *http.Response) (*ListModelsForAuthenticationProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsForAuthenticationProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthenticationProviderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelWithRepoForAuthenticationProviderResponse parses an HTTP response from a GetModelWithRepoForAuthenticationProviderWithResponse call
func ParseGetModelWithRepoForAuthenticationProviderResponse(rsp *http.Response) (*GetModelWithRepoForAuthenticationProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelWithRepoForAuthenticationProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationProviderModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationsForAuthenticationProviderResponse parses an HTTP response from a ListOrganizationsForAuthenticationProviderWithResponse call
func ParseListOrganizationsForAuthenticationProviderResponse(rsp *http.Response) (*ListOrganizationsForAuthenticationProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsForAuthenticationProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthenticationProviderOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigurationResponse parses an HTTP response from a GetConfigurationWithResponse call
func ParseGetConfigurationResponse(rsp *http.Response) (*GetConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutEnvironmentResponse parses an HTTP response from a PutEnvironmentWithResponse call
func ParsePutEnvironmentResponse(rsp *http.Response) (*PutEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentMetricsResponse parses an HTTP response from a GetEnvironmentMetricsWithResponse call
func ParseGetEnvironmentMetricsResponse(rsp *http.Response) (*GetEnvironmentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFunctionsResponse parses an HTTP response from a ListFunctionsWithResponse call
func ParseListFunctionsResponse(rsp *http.Response) (*ListFunctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFunctionResponse parses an HTTP response from a DeleteFunctionWithResponse call
func ParseDeleteFunctionResponse(rsp *http.Response) (*DeleteFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionResponse parses an HTTP response from a GetFunctionWithResponse call
func ParseGetFunctionResponse(rsp *http.Response) (*GetFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutFunctionResponse parses an HTTP response from a PutFunctionWithResponse call
func ParsePutFunctionResponse(rsp *http.Response) (*PutFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Function
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFunctionDeploymentsResponse parses an HTTP response from a ListFunctionDeploymentsWithResponse call
func ParseListFunctionDeploymentsResponse(rsp *http.Response) (*ListFunctionDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFunctionDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FunctionDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFunctionDeploymentResponse parses an HTTP response from a DeleteFunctionDeploymentWithResponse call
func ParseDeleteFunctionDeploymentResponse(rsp *http.Response) (*DeleteFunctionDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionDeploymentResponse parses an HTTP response from a GetFunctionDeploymentWithResponse call
func ParseGetFunctionDeploymentResponse(rsp *http.Response) (*GetFunctionDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutFunctionDeploymentResponse parses an HTTP response from a PutFunctionDeploymentWithResponse call
func ParsePutFunctionDeploymentResponse(rsp *http.Response) (*PutFunctionDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFunctionDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionDeploymentLogsResponse parses an HTTP response from a GetFunctionDeploymentLogsWithResponse call
func ParseGetFunctionDeploymentLogsResponse(rsp *http.Response) (*GetFunctionDeploymentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionDeploymentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceDeploymentLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionDeploymentMetricsResponse parses an HTTP response from a GetFunctionDeploymentMetricsWithResponse call
func ParseGetFunctionDeploymentMetricsResponse(rsp *http.Response) (*GetFunctionDeploymentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionDeploymentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDeploymentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionMetricsResponse parses an HTTP response from a GetFunctionMetricsWithResponse call
func ParseGetFunctionMetricsResponse(rsp *http.Response) (*GetFunctionMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFunctionReleaseResponse parses an HTTP response from a CreateFunctionReleaseWithResponse call
func ParseCreateFunctionReleaseResponse(rsp *http.Response) (*CreateFunctionReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionRelease
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLocationsResponse parses an HTTP response from a ListLocationsWithResponse call
func ParseListLocationsResponse(rsp *http.Response) (*ListLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMetricsResponse parses an HTTP response from a GetMetricsWithResponse call
func ParseGetMetricsResponse(rsp *http.Response) (*GetMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelProvidersResponse parses an HTTP response from a ListModelProvidersWithResponse call
func ParseListModelProvidersResponse(rsp *http.Response) (*ListModelProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelProviderResponse parses an HTTP response from a DeleteModelProviderWithResponse call
func ParseDeleteModelProviderResponse(rsp *http.Response) (*DeleteModelProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelProviderResponse parses an HTTP response from a GetModelProviderWithResponse call
func ParseGetModelProviderResponse(rsp *http.Response) (*GetModelProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutModelProviderResponse parses an HTTP response from a PutModelProviderWithResponse call
func ParsePutModelProviderResponse(rsp *http.Response) (*PutModelProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModelProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelsResponse parses an HTTP response from a ListModelsWithResponse call
func ParseListModelsResponse(rsp *http.Response) (*ListModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelResponse parses an HTTP response from a DeleteModelWithResponse call
func ParseDeleteModelResponse(rsp *http.Response) (*DeleteModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelResponse parses an HTTP response from a GetModelWithResponse call
func ParseGetModelResponse(rsp *http.Response) (*GetModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutModelResponse parses an HTTP response from a PutModelWithResponse call
func ParsePutModelResponse(rsp *http.Response) (*PutModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelDeploymentsResponse parses an HTTP response from a ListModelDeploymentsWithResponse call
func ParseListModelDeploymentsResponse(rsp *http.Response) (*ListModelDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelDeploymentResponse parses an HTTP response from a DeleteModelDeploymentWithResponse call
func ParseDeleteModelDeploymentResponse(rsp *http.Response) (*DeleteModelDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelDeploymentResponse parses an HTTP response from a GetModelDeploymentWithResponse call
func ParseGetModelDeploymentResponse(rsp *http.Response) (*GetModelDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutModelDeploymentResponse parses an HTTP response from a PutModelDeploymentWithResponse call
func ParsePutModelDeploymentResponse(rsp *http.Response) (*PutModelDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModelDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelDeploymentLogsResponse parses an HTTP response from a GetModelDeploymentLogsWithResponse call
func ParseGetModelDeploymentLogsResponse(rsp *http.Response) (*GetModelDeploymentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelDeploymentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelDeploymentLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelDeploymentMetricsResponse parses an HTTP response from a GetModelDeploymentMetricsWithResponse call
func ParseGetModelDeploymentMetricsResponse(rsp *http.Response) (*GetModelDeploymentMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelDeploymentMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDeploymentMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelMetricsResponse parses an HTTP response from a GetModelMetricsWithResponse call
func ParseGetModelMetricsResponse(rsp *http.Response) (*GetModelMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReleaseModelResponse parses an HTTP response from a ReleaseModelWithResponse call
func ParseReleaseModelResponse(rsp *http.Response) (*ReleaseModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleaseModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelRelease
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPoliciesResponse parses an HTTP response from a ListPoliciesWithResponse call
func ParseListPoliciesResponse(rsp *http.Response) (*ListPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePolicyResponse parses an HTTP response from a DeletePolicyWithResponse call
func ParseDeletePolicyResponse(rsp *http.Response) (*DeletePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicyResponse parses an HTTP response from a GetPolicyWithResponse call
func ParseGetPolicyResponse(rsp *http.Response) (*GetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPolicyResponse parses an HTTP response from a PutPolicyWithResponse call
func ParsePutPolicyResponse(rsp *http.Response) (*PutPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAllPendingInvitationsResponse parses an HTTP response from a ListAllPendingInvitationsWithResponse call
func ParseListAllPendingInvitationsResponse(rsp *http.Response) (*ListAllPendingInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllPendingInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PendingInvitationRender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceServiceAccountsResponse parses an HTTP response from a GetWorkspaceServiceAccountsWithResponse call
func ParseGetWorkspaceServiceAccountsResponse(rsp *http.Response) (*GetWorkspaceServiceAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceServiceAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceServiceAccountResponse parses an HTTP response from a CreateWorkspaceServiceAccountWithResponse call
func ParseCreateWorkspaceServiceAccountResponse(rsp *http.Response) (*CreateWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// ClientSecret Service account client secret (only returned on creation)
			ClientSecret *string `json:"client_secret,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceServiceAccountResponse parses an HTTP response from a DeleteWorkspaceServiceAccountWithResponse call
func ParseDeleteWorkspaceServiceAccountResponse(rsp *http.Response) (*DeleteWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceServiceAccountResponse parses an HTTP response from a UpdateWorkspaceServiceAccountWithResponse call
func ParseUpdateWorkspaceServiceAccountResponse(rsp *http.Response) (*UpdateWorkspaceServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ClientId Service account client ID
			ClientId *string `json:"client_id,omitempty"`

			// CreatedAt Creation timestamp
			CreatedAt *string `json:"created_at,omitempty"`

			// Description Service account description
			Description *string `json:"description,omitempty"`

			// Name Service account name
			Name *string `json:"name,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *string `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApiKeysForServiceAccountResponse parses an HTTP response from a ListApiKeysForServiceAccountWithResponse call
func ParseListApiKeysForServiceAccountResponse(rsp *http.Response) (*ListApiKeysForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiKeysForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiKeyForServiceAccountResponse parses an HTTP response from a CreateApiKeyForServiceAccountWithResponse call
func ParseCreateApiKeyForServiceAccountResponse(rsp *http.Response) (*CreateApiKeyForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiKeyForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeyForServiceAccountResponse parses an HTTP response from a DeleteApiKeyForServiceAccountWithResponse call
func ParseDeleteApiKeyForServiceAccountResponse(rsp *http.Response) (*DeleteApiKeyForServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyForServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListStoreAgentsResponse parses an HTTP response from a ListStoreAgentsWithResponse call
func ParseListStoreAgentsResponse(rsp *http.Response) (*ListStoreAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStoreAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StoreAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStoreAgentResponse parses an HTTP response from a GetStoreAgentWithResponse call
func ParseGetStoreAgentResponse(rsp *http.Response) (*GetStoreAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoreAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoreAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListStoreFunctionsResponse parses an HTTP response from a ListStoreFunctionsWithResponse call
func ParseListStoreFunctionsResponse(rsp *http.Response) (*ListStoreFunctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStoreFunctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StoreFunction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStoreFunctionResponse parses an HTTP response from a GetStoreFunctionWithResponse call
func ParseGetStoreFunctionResponse(rsp *http.Response) (*GetStoreFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoreFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoreFunction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWorkspaceUsersResponse parses an HTTP response from a ListWorkspaceUsersWithResponse call
func ParseListWorkspaceUsersResponse(rsp *http.Response) (*ListWorkspaceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkspaceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInviteWorkspaceUserResponse parses an HTTP response from a InviteWorkspaceUserWithResponse call
func ParseInviteWorkspaceUserResponse(rsp *http.Response) (*InviteWorkspaceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InviteWorkspaceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveWorkspaceUserResponse parses an HTTP response from a RemoveWorkspaceUserWithResponse call
func ParseRemoveWorkspaceUserResponse(rsp *http.Response) (*RemoveWorkspaceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveWorkspaceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateWorkspaceUserRoleResponse parses an HTTP response from a UpdateWorkspaceUserRoleWithResponse call
func ParseUpdateWorkspaceUserRoleResponse(rsp *http.Response) (*UpdateWorkspaceUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWorspaceResponse parses an HTTP response from a CreateWorspaceWithResponse call
func ParseCreateWorspaceResponse(rsp *http.Response) (*CreateWorspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeclineWorkspaceInvitationResponse parses an HTTP response from a DeclineWorkspaceInvitationWithResponse call
func ParseDeclineWorkspaceInvitationResponse(rsp *http.Response) (*DeclineWorkspaceInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeclineWorkspaceInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptWorkspaceInvitationResponse parses an HTTP response from a AcceptWorkspaceInvitationWithResponse call
func ParseAcceptWorkspaceInvitationResponse(rsp *http.Response) (*AcceptWorkspaceInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptWorkspaceInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingInvitationAccept
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLeaveWorkspaceResponse parses an HTTP response from a LeaveWorkspaceWithResponse call
func ParseLeaveWorkspaceResponse(rsp *http.Response) (*LeaveWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LeaveWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd3XPbOJL/V1C6q5qkSmtnd+fJVfvgydf61tl47MnNw0xKBZGQhA0JcAFQHq3L//sV",
	"vkiQBEhQFmU756c4Ij67f+hudDeAu1lC84ISRASfnd3NeLJBOVR/nq8REfIPmGWfV7Oz3+5m/83QanY2",
	"+6/TutKpqXF6IyBJIUs/YJSl/N2OwJy+W87u53ezgtECMYGRajfFvMjgbkFgjtT/EU8YLgSmZHamewWm",
	"DFBl5jOxK9DsbMYFw2Q9u5/PMrhEmWqtb0iXutT9fNbXV6iPW8q+8QImnoq/2k+Byvf3X+fevgrI5D90",
	"BdT/36Eio7tc0rlqgy7/hRIhB9AucnhWQMvi5lh/2eiJyXGKDQK6mIdECSUrvC4Z1BX7R1XP5K1bTfEH",
	"EbjMUOqh9AaJDWL1MEBaNQMwB7ZiNbglpRmCRDe6xYySPGqObmHPTFcZ3FI2iLgPptgeEM2yvDvKy8tP",
	"QFBQcgRWlGkKzAEWgG9omaVgiYBsFAq8zBC4xWIDViVJZG2QwCyTo/fMpqDpQqC8yKBAftIUNAW2xNzp",
	"DYItzHAK/lEuESNIIN4o6oNxQTOcGMDF4ePK1rifz1hJBNaLt6/ytSl2P59xxLaIZYjzhcZnfMc3VVUN",
	"UdWcoAwtsAebbxmCAoEVozmAQJUDDK0xF4ihtGLESNkiqV999uN+iTJK1hwIOkL0OPWbyzYkea5RhiAP",
	"ik2mP88lOFMJUt0BgGa8iiyUNFaWLAYJlSt6Nm/JIlm+29dnhteYNNpQDd9ucLJxqIO5HVDqo7eg3abf",
	"IS4wUTRoj3FU6/c+Ahb4H2g3hcQu8OKbbrnFlAID+cEzefRHgRniC0w8RDAoAHL9ZEAV1T+8wgRwlFCS",
	"8te+Vn0rwgwC4HQuyciQYBhtkRRYimuSoudXF77m/Br6n1JCS8lnaoamyMtlt/IXjhjgpWIKwCkiAq+w",
	"Qp6v/kL/2G7kxtRXX2NW2yUl6z9leItSO2AtupMEcY7JGvyEYJ5hv8ZnDO4+SaolHuLKj1Jd5aoAn81n",
	"WKB8UK6a9mqYQtmQ6q4UG0mVRHH8itEtThH7RFOUdbtXPwO6FBATKd2U1CMA/SEQIzADsNEYKExrc8DL",
	"ZAMgB38v12tM1h9ggubgc4HI+cUcIJGcnJx0hEGiRGu6gB7NbccJcjUiUxRAr95O6S3JKEz5YDt1yaoZ",
	"TARaIxZCe6uBi3deSxUvGWQha7fVhCkcNnvxN8QjWpGlfLOIGkSo8wIXKMMELQRcDzZiCwNZ2NcYw1uv",
	"8dFux5Tz2XcCroeJoQo5K6WrGlqLQjBEUkzWC55QNjxAWxzo4l2qe9WDd+F9ZmtI8H8qY7qtCeuvQGyg",
	"ABvKBdfD4NHrEbzqWYevOwsRbqGAbFGyrIcS1B2argG+XF9612Pv5s/f4tBmsHdtNlryL9ExYwns9zw8",
	"ftveG7WMx5YN1pJ/lAhcbco7Ne23GtceICe0JFL/epuwn3pa8E0quIeTUElTLP8Ds6vGXLoYaJlhfruU",
	"K9W5hVmJACQpgBmnAAKz/qVpwpAy1niBErzaAbxqboyUQZ4CXJXNIYFrV//75nXl7FYqodFChiwShmOb",
	"Dz3bi35UaLsB1PsZx4bvICaDXCzkvo4hIZc9JYsCMUxT/w4jxwTnZQ5gLqGgNsE4R1quSFtLNgcYKjKc",
	"QHCLswwwlENMAEwE3iJw/uGX99dycAnM0J8E/dN/EJNbgARzOXLMQQ5TL3ly+MeClPnCNM4D44N/qPGR",
	"Ml/KNbiyg+GVOVgT48Sr7PKAHaXtIXALRbLRO5ccfkNqJlKO2znwE/AWEgmk32dJUf4+A5SB32c5yinb",
	"2f+xgts/E0qSkjFEkt3vM+/EMYmZuGFM3MTtEN/IMfxZ2ex675JAjlqFJVNgdgt3HLCSEDlXyU8B5MZG",
	"qK1aRrW2eO2nqGL2QhpKixRlcOefgQLSLSYpvTWDyUsuQAE5l70xlJYJSoFDL7BEK7l5tnCSPTSwBIsi",
	"wyg9Ab9sMAeJnnPJ0arM5oos6A+YFxlSu45vCBWydWWoMg4goyVJzWKqRMwyQyC1C01uS7cUp6pAlgIu",
	"IBOgQARmQgkWgm4BQ/8ukdS4Cc0RwOTEu5FQJCqLheHjaCarFagW3BJVtu3tBpE2N1VPHJSFVv1y/QW4",
	"JuRkF5oj/vHwDCsbxmUd3SJm+ac3HABKHm0Rg2u9boxNoUaGSVEKReTOQvIKScjWyOeWU78bsW8Bb5eq",
	"WdFR6vd90/l3VB+2JKlrtET6GA/j1B7p2HS9cz43oP4KoBDQistuqz1WyChPl+uGGenkcvgNqJWC9XLh",
	"1ZqSegm8QifrE5CiLcpokSunasFoWiqH3es5QGRFWSJRnJeZwEXWIAWgJEEns37UfTK79ID+qcV5k5RN",
	"nGGyQlJEIqnMF9ods1hndAmzIZy4vgTvCtG+ao+fQfk6JHw2kKW3etFDnCmRKQftULUzYD8mdVcalpr0",
	"4sfXYdspUF0NS1dPinIO1kX5Ok4YfKi99y0I7grEo6ca5W4xZPUshQ/WIXxseWQ7PlJYreruOJG1qrs6",
	"uGZ/6o+veUodnjMHC5E1Jh3mcP3zHGwR2wGcF5QJSEQlcIx/3lYRVElhHT2CBFxefvJ6kWNCdKt6HM8j",
	"Srdy1mR/133hnLHrpoAM5kggn0hy4WwKaRt3R0vW4Jo0EGGmhZVi3vm6qY4HEEwZsp1d2b58cuslWvic",
	"ooW+JTjSlvrgaWIwZmgrBcOGVavhyGE19mMFD6sOp4ofxnXgs1kuK5myp2PNNOBr2mzzPfkG5os1g3CG",
	"hY5fVesy6Krsaa0u400iKYlgu97qukS/xA9UtiUebL5lw1QLGTx+O2mwGhdQlH1zMwWi8PSp1x3WYauU",
	"j1zAvAg60OoSnqGrDXywqv46YtgD2yiGOC1Z4kGnjo701zZl/N3bYOhRDXYdaz2Otf6pN+g3SvXoiNhI",
	"ZXNJ1ziBGdA0BwwVDHEk5cUaQN3kXHvFjN8PEy7NWaw8Y5jUO3RHCHMAuY3rNrZwfgZPugMIGs4XK7CC",
	"mVSENfEcjascFoQKZUhprzuhTIcDKmfkQU1qULmPvQPCNgDh15HTp8hp/99C7mdCdijTISFFIzUJs85d",
	"m8WNEfhzHdo0MjtLXdrn2pcfFjbEulCTGUjKkDVsiPEarcbb2d5wwI1jejtG9xVNfzHVbgqUfI92N2Jb",
	"TNbjsKEzWvzI2EPwPSBDjxiplijIVWLPLjcVqDGBTpz4d8FBkXZJ1z4TYm0iIu2xd1Uo4hyukT8QbRwu",
	"KmRIvZkePYaEjRapz73N3A9PM8pQgIBjss7Q8KwP5Xmd+1sqlJhYe83Jv2O5O1RKsYo5FYiZbDzw6vrq",
	"5rX6wVqk80oWDE6r7vNBvuN/l4jt/JRpzuX66sYEc15hoqPKf/kRbGjJ+OvgqIFuLXMsfh0p83Yt/0xo",
	"iiK58/PVTbCZOOoMt1CNaSRBJFMZ4gUlHBnjHshmpuW2mk+Xy8E1t8dKm3B5PZSRwWla7TyJUzj3G2ef",
	"TNKbST1yPwaPXwzN0s6jVpaH3DhUY+1Phxmo7M+uPXSkoNnpbIjx19qMa61fZICr3FFVlmLVZJPR3zAJ",
	"JODIL1blNRuZ243OVWegQx6Ftt2aByY8qFaDTjxNwrAHT/d4LPed7m0q311E6z4CXumE0AuyxQJOFO9D",
	"OcRZIONdf/PlScoRoXSx3IVz5X31GM18p0DeXgL1ZfJlawgKcEVRtVGt+ojhwXmSoMKXTN5tG+qi80OQ",
	"vEGIPs5XZInE1DUiRjWNpdUBgeTLzq+HCNJGiCeEw17V5Z/2hW7gp91+6Cw5YgtjUHZPnFQpWbIYl9QT",
	"7n7PZ5JGczkwn/2YX1PBzwSUguXuMAxfwRxnIWelqqpLBI2ANd4i0ldfFQg7wvuO9+wpldukD0uqDg37",
	"nbe1hBty4A7Vj0821ynJR/dTm0zooXke4fCs2RsNVtEjvqyKh9P/+5O8bcRBnRqL7PXa1FFJR2HT2PQs",
	"P1amoJ0foMwEtB7srC90NyM9VddlZrLEE0oEoxkHG3oLYMtPrJLsIEm1ty01WVvVLBiSXajAqHu4sI3n",
	"cJzS0KgKycWlobVqjdyytGsHTgQOziZ4oqAqoFKeVUeZTnrTScEMFvJ3nmHtJrysZx8V2mwR1RPi7OI0",
	"NFa3jB6uTRq0K2MOFM+NJ9PGwfVJIx/RfWskovNYYnmmNopsjZo+0jV32UMbXrN17xy3UqdEF4J+Q4GU",
	"JF0CqBLu1QBqSfdsGFc4Q+FNo/yqd46tJoMhj4IhjtcEpf6zYcrjbouAL9eXXLVcZBSmzuZKSZ2e7OGx",
	"cQXf6vv56qY7vp9LxHauV1X+iTKkc4GN1A2647Q4+8ubN3Pw45s3r6VUdj10AT9cwCP489WNIrdTu2Vh",
	"+mZl8Rjt57fr0pXUr5Bdoc6vc18K0etnExboEmacv/LQdHoJJLwEEl4CCaFVuufarBdkvQpfP7Mgw3Wt",
	"21pXTiAlPFunYTUhengE2TpwigeydamzYgTV5/DMKR5npVhNO3CkOM9hyKNtPqqLP8r2cbX+dhHZBobu",
	"Ome3kGG4zBDXYXxhfTOhBIgMc0VIJxHiPdn+L9ThhoHT0zj3Kjc5pnc0+YYYUCU8WRjBBJHQ2bty3XDa",
	"U+32VlVOwGeS7bSbHa98BzpBO4HJu1mFKSbSsCwYXQZmVRUCqlA4l0R+bW1+alDXmXiBTsznMdkrVlZc",
	"o3+XmCGD5MAA/Hs3ZVKYDYqhbwzjfMs24DrprmJTDqxUQdXfFWIc6zyPUVeeqAOFUOgttT6kaU+EViLx",
	"FnJ7XtTr9CzSBzdv2oilE2VoqjsEk/7LFVTf5pxLO3E9/nBE84oGj4zoPZLjjmEgjtvvZGs0NHQVhl9q",
	"uU3oIr3ppOHKWTCnfHjs0fEep9IsBKy3MQBIOrcp1PLnFVqf2fv0Gs6JrhkRweZmTwdgd6vBIbavvNsw",
	"e2wAMOXrxmRdSb1G+3N7fv6sdlD87W9/Az/QAhGIf4j3XfsGHxo0LSpv2J5r8nMRWplMq4o0boRVaV8y",
	"rb48JK4hU9Z7WZH/djFPI/F+xSBFovox9K9uGcnsNWcdkdmyqh8GNtPvPphT0mfM5LS8GnE+oaepEWcW",
	"GkfrHkv71feAPqoCXHlOpu4rFFex55h71WB9JGs/TVjV308ZroZOR/cdDm014RQ98KnPoFrunlMM4L5u",
	"PHoW+2jebitDSItiTt1aOALYr2I8TfXqmT4F4WkrXks0QtxHDQ/HR8JDK65uYexi2yPP6Ne+jKLq4xfu",
	"g3TdXck9QNY5RUOn52VVsIEc2OLN1BMnqcd/7Mef2tEcWjjJQ31YbBHDKxwz0h+4bkuNeIkQAVVd3+h6",
	"c0haY3xANkmrpf68En/uUKuJUBqRNymlVbfv1lmvo5SjpGRY7G7kStTY+QlBhth5KTbyf0v1vw+U5XIn",
	"P/ufX3+ZzfWt/Yre6mvd10aIQmJdBQ+oPtcp5Jxn5hZa8FaH8cFVBomc5hYxrqfy5uTNyZ+1oY4ILPDs",
	"bPbXkzcnf5XghmKjxnaqdlDqT3Odk0S9guhFOjubXWIuztfm7J11SKvif3nzxp4eti6CQl2BJeue/otr",
	"ia8FUvQWQbsbPMqsvdR5qcKoqzID1YAb9Fci0qX8b/qyfH6WYS5mX6X04GWeQ7Yz0wQwywC0c9V3k9pK",
	"s6+ybUOs0zv17z9hju41gDKkD3w1afdO/W7vdHgQ8SJodlAamSm1qKQnZLwBy3p5t0k192PpIxLPkhhy",
	"Mi1KfEQihgyuJfib92rs1gMNWH6Qi3Nm1eKswtrMNVkEK9HcoUlbNH2dz4rSw4Or0uGBiij+RNPdFORv",
	"jvX+mfFce0rbbP9SaC/rEOf9suLUPck8KHDfNY49H0n0OmGIKYXwwqFEhDxuHwF/UgttmNend04QbIzW",
	"aASFpl0+LuOnYnSEUnFP4O4ascM9dc13RsJeVbQP8R5v4cz7emvdTtnts7WiDqobW5iZSEu24XJkfXkM",
	"tOpo5mzu+eTXr+aKLcpMpHJvYO8jlE8zug7r5a5AuaTqYYL/pytoeoPEnyB5LLNkIdFwxhBMNUgPA7G8",
	"zpaKRNmn6q2YF6AdVgyG80wnw5Rh/x6wigXOU4DLMZg2Cau67PGZWfXrTbHMY/Vh7Mf1CFDugY5Wuo0X",
	"46Y2Pmw/B+WeoXJldvhtC1PKBM2dl+4gaV/L43K3at1yufE4T3VzlOS792kgs4qry+y8d+dfI1Eywp3M",
	"R7kFtu8DyQEToG44MoHt5Q5cvDuZzT0uBJVUyD9Q5n+paJR88L9DFMBmcPZPz8Doez1tKjMjAJuwE8Tl",
	"fg8rKrAGOjgAbE/vcn2zREEv0nvzv4v0PgLOOj1d308NGCoox4Ky3QhMf0Qa0r9isZEjeLbInvtusG9c",
	"9+Hv3qH9w/q7eBfb28ieplT7vUv1EZamtAbMTSmPuTDdl83GqpVG3ZHaxX3K7kXJ7IHcxkuBT0bXeCHx",
	"YGh3kt1CG5j2i3qTSZNWWlyX3M1X3AxEzXl5UKhA+wDxm2d/+mMczbIOYVsfNDndS3JHLvnG/brte1H8",
	"K/2929sx1ov77NNEC8MlQ5gzqDlzy5PGz12ODMV62rdYZeqATHPvYSOLXY7o8u+b7w3Fithn66hpQGIC",
	"CPTGpfx7whYK5gOrMJK9H5Fo8vbZkjQQp4ok5pOBtAkT+d4B4XWUIp7BV2WHwYePLnV4e7zI0tSwGooa",
	"mfyMKJgNS26P09W/vnP3qPNea30Pt+33IM4P7MV12Vk5c4dFkcej68GKTeHuT935UJU6hrFUHVGZyFKq",
	"5txvwK6cSVsK1r+1yHd6Z/+MTIX5UB9YmAyTNSEPTbhe46I6FtDNJXPpF85xed60CSzNaKpEy0rnzItH",
	"ULp4PFQiSYMxh9fxTZ4cT8FPh4XehMtIRPTJmejky+6jkseV5dOnYFq6xGdheu5J4k93VcbCYJ+8TO/D",
	"pJMvt8Mna3kxEKerorOxxqmw75KiQxpuT1o+9hJ7krmbASBNp3wfL4PzyCiu8ji9XyNTOR+G+f1l+mBa",
	"Z5eYYzM7v8dV9p3ld/qQG0rxPBDuIlL2utDbwxH0gr6nlPTpBVo47zMaayPQ9HQw9AwzQSv+DSWDVvqs",
	"6z2MZuo+iaET+jJ60kPbj4Mfwbg5cJJoxdh98kSb75oHU0U7fRgANF43GBGwr+rZ57wzpLPo9I2w/pB9",
	"fU39MbR4+Db6w7CtIkHYQ5E5E7acqH/THNgnlNNIj/iBu84Pf4JiJQgmWxsHFnYDMZJGXKv5go4hsyWr",
	"IXLjFd2xYHdyz2KzUxqvvR0H782XBScCfYuQA9nBoHAoUHGmxQsvh0wSbyOpMDJfJSJTUJduEmyETdJ5",
	"+y6Up/poCYAjcDINLnoddt23A4PQGM5fGZGi/cLrSXgdktFjuDwinyWC4Vflk2f44Z1/Hl4fz+93FKBV",
	"3r72h8jsmxGIrFTSnmeiRlgJR7QOJrUKBo8KtQnepLPR+PGa3rBzICX1kzlKMi3yD0zIYe3po+U87rBT",
	"X+LXs6RWn/7x02mcMujRAZOmbg7xy2q52YT65FH0yIHxERkGCuLFL6MCaRsxOsKpaXaw+kWOsI44dspH",
	"++WPSXeTUcke7XeE+JNb2cMw2fMIhhuXdOASpfmOk7vQgctU8IjYVjYfXRmtI8fS2irN74zQvXu6IRI/",
	"3iKcP4szGaNBZjX95AkkXnwdWfsfA96tneQeSSMxK2EfjdBOCvHLKVmoAZ1m6kqsqBqbTvJ9rdejm1ET",
	"ZpF0cBxKIXkYOPc6d/QgiO6RMvCC0n2E7aEDeB1AhlNNhjD5ENQNQu0pAGxyNk/C3KE8FM2AbhLKELv3",
	"yT2ZxFFjsk5ar8fCb0jdFeRmYZgbV7opGEBQAAkVG8S6EDR5JMdxuh04aUVDYCBjxfQZJk/HB99KTylo",
	"hhPz0MkIB4utFumGv7K9HMMm0G/+T2UH2JmHHSlFPVlL+uqnJtFP79RfuxGeCl1hyDNhSDAh4i2RD0zU",
	"XvdDYWflIeug22GIcB+ReLZUC/gS+ukVLfmrZjyiv8bvdHv5Ic5dlS7nDr9ld5l2vJ36RFCJ3Hz3QUdJ",
	"MEZXOEOn9atWozUIIikma+ddrFhlcp5lV7ryhdP7UTRLu9tr9Vzm/qpmPvvxzY9dihHqI88Qj52iPcrJ",
	"027NZfdXzWiO2BYnaAGThJbjAzGmOrDVI1j8EYnqIa4bXf3cdn4oJree5MwwImKBfc8BNscPdFFw8c73",
	"qFjfK+BqhakXYnGOuIB54X1Is/fNxNZY9nsqsdVI6HW1vifHLyEXVlD0TOc++ML7YS2yCktBRVi/wtfG",
	"o4P9uhmtHr17E6ugYLulCGDrugFsP0B3jXl283gQaijL33RTX7uv5h1cp060tHU7wfek/W3p4uAVJdkO",
	"MCUgUQoo0W/9Y0pev4iRPcTIwcVGr1EUFB4h2eFTm6d3GhLmzuThfV6rr9BGLyxNes37tw7WPVa9HetR",
	"XWwvOvl7XkxmCz96MQU2il+q3eHgQtFFn9pC+c5U/XNV6y/S4UlIB5M+fmhVewoLvPiGdmN3redXF0BW",
	"M7GHQRGjvBIF/gfa8Q+UeQz7yW8aV51Pdpu4pmLYqdCgV7xgfwTBO7CrI3YqsZw3D+go8vtZfwhBj/4o",
	"MEN8gT0y5r38Zu5nRwzTtDq/aqYSL2mU03ew9jGkfQzWD4vtW4aDOwAXEwcWTKd3UE0ndl8wGqDmSdke",
	"gHbZNDFVjSm4B1UfQWZ0MlPOC6yGjdPAAxWGn+NTm7mgDMU8yn8jCx7xZf66v4dpmO7lgmrK1Xtnlufq",
	"V7uIHKK0H98PXYbijHdCOeRSZS8qfETCJYDngktLiEd/5FpzIe4aZEWX496F3OhyQox6bzvuorXvvuNe",
	"zB7jSt8WrQ6C3J47WveA8JR3g5Z8/OUUqk5kbLJyM3zhx7qVotHlEWIswV1ARSffbSFR0RUVWFVeHdkW",
	"ELRJcnVnYA6x5xyXrtkkxcGsb9ml/GNFWS531+aXvbbP72VVi3Q7SxV27aJ50vSCdih7XNDaYydisoUZ",
	"TjWHgKFVKMJd85RQAVa0JOkICBp6tUCoMVARdRCFlTw4vePl8jNTrOk1w69RTrc1PlW6XROhrygDDG3p",
	"N3uTgiUvwA7LN5CrecMkQYVAqfrilN0h8dqXzCh7b2O8V6zelEtAmWGJAzq/aK2pcAjHf8thK+dd40nF",
	"w+R0Ujk+Z+qaeGkQONX0VbKKbHQfAOm+u8mU8leHt7duZ3pkzlj3dFlLHjCaKXVngDSsW1pObEnNa5qh",
	"p8P/QwhaSZUu3X7ZIEDQraaZoAByjtfEKgczm/7gs2r46yP7LVp6uitt1RJRszSu3MZ6CcrdCyN3VU1z",
	"w8bU66fXi1tW84ixBaQUdn4YZ5rVFQfMsSObYo9pht26c94zuSUmi8VydYqUS4eQj7RIJ+BY752TtzVB",
	"I5bJ6V3194jc8YYh3Zc+/quzaKO3be5K9yiXxoCfzNmdKfndm8sesUcakIMR3HRTKV9YOWFe4d7ZCxFM",
	"bJl+Q3wkR+Pji9g/YMR7P7l/mqIkw0Sf5PPq9He6QHs3Ku3oPi1vqlV0uXB3Pd+3HInyjNRfm5taw490",
	"lJrQLOzoCfVzi2kPxcu/qI4h+8FyrvwRY7Gia71ABVOiSTEGMNYFFLdhc7iyz7ZNd9ZGmh70gYGWIbhF",
	"fWbppSwwsNdQZV4smBYOGvjJ0EpEYGcftGgWtreY8scIdAzkB6Q5JqZpxLZ+fv6EYJ5hAVK0rR7gv1IP",
	"8M9nJctmZ7ONEAU/Oz2FBT5Z6tInKdqebt/MuoF7tzlMVoghknSbYiVxm5rdf73/vwAAAP//T00IzGf/",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

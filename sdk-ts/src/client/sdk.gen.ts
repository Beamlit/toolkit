// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { ListAgentsData, ListAgentsError, ListAgentsResponse, CreateAgentData, CreateAgentError, CreateAgentResponse, DeleteAgentData, DeleteAgentError, DeleteAgentResponse, GetAgentData, GetAgentError, GetAgentResponse, UpdateAgentData, UpdateAgentError, UpdateAgentResponse, ListAgentHistoryData, ListAgentHistoryError, ListAgentHistoryResponse, DeleteAgentHistoryData, DeleteAgentHistoryError, DeleteAgentHistoryResponse, GetAgentHistoryData, GetAgentHistoryError, GetAgentHistoryResponse, PutAgentHistoryData, PutAgentHistoryError, PutAgentHistoryResponse, GetAgentEnvironmentLogsData, GetAgentEnvironmentLogsError, GetAgentEnvironmentLogsResponse, GetAgentMetricsData, GetAgentMetricsError, GetAgentMetricsResponse, CreateAgentReleaseData, CreateAgentReleaseError, CreateAgentReleaseResponse, GetAgentTraceIdsData, GetAgentTraceIdsError, GetAgentTraceIdsResponse, GetConfigurationError, GetConfigurationResponse, ListEnvironmentsError, ListEnvironmentsResponse, CreateEnvironmentData, CreateEnvironmentError, CreateEnvironmentResponse, DeleteEnvironmentData, DeleteEnvironmentError, DeleteEnvironmentResponse, GetEnvironmentData, GetEnvironmentError, GetEnvironmentResponse, UpdateEnvironmentData, UpdateEnvironmentError, UpdateEnvironmentResponse, GetEnvironmentMetricsData, GetEnvironmentMetricsError, GetEnvironmentMetricsResponse, ListFunctionsData, ListFunctionsError, ListFunctionsResponse, CreateFunctionData, CreateFunctionError, CreateFunctionResponse, DeleteFunctionData, DeleteFunctionError, DeleteFunctionResponse, GetFunctionData, GetFunctionError, GetFunctionResponse, UpdateFunctionData, UpdateFunctionError, UpdateFunctionResponse, GetFunctionEnvironmentLogsData, GetFunctionEnvironmentLogsError, GetFunctionEnvironmentLogsResponse, GetFunctionMetricsData, GetFunctionMetricsError, GetFunctionMetricsResponse, CreateFunctionReleaseData, CreateFunctionReleaseError, CreateFunctionReleaseResponse, GetFunctionTraceIdsData, GetFunctionTraceIdsError, GetFunctionTraceIdsResponse, ListAgentsHistoryError, ListAgentsHistoryResponse, GetAgentsHistoryData, GetAgentsHistoryError, GetAgentsHistoryResponse, GetIntegrationData, GetIntegrationError, GetIntegrationResponse, ListIntegrationConnectionsError, ListIntegrationConnectionsResponse, CreateIntegrationConnectionData, CreateIntegrationConnectionError, CreateIntegrationConnectionResponse, DeleteIntegrationConnectionData, DeleteIntegrationConnectionError, DeleteIntegrationConnectionResponse, GetIntegrationConnectionData, GetIntegrationConnectionError, GetIntegrationConnectionResponse, UpdateIntegrationConnectionData, UpdateIntegrationConnectionError, UpdateIntegrationConnectionResponse, GetIntegrationConnectionModelEndpointConfigurationsData, GetIntegrationConnectionModelEndpointConfigurationsError, GetIntegrationConnectionModelEndpointConfigurationsResponse, ListIntegrationConnectionModelsData, ListIntegrationConnectionModelsError, ListIntegrationConnectionModelsResponse, GetIntegrationConnectionModelData, GetIntegrationConnectionModelError, GetIntegrationConnectionModelResponse, ListKnowledgebasesData, ListKnowledgebasesError, ListKnowledgebasesResponse, CreateKnowledgebaseData, CreateKnowledgebaseError, CreateKnowledgebaseResponse, DeleteKnowledgebaseData, DeleteKnowledgebaseError, DeleteKnowledgebaseResponse, GetKnowledgebaseData, GetKnowledgebaseError, GetKnowledgebaseResponse, UpdateKnowledgebaseData, UpdateKnowledgebaseError, UpdateKnowledgebaseResponse, ListLocationsError, ListLocationsResponse, GetMetricsError, GetMetricsResponse, ListModelsData, ListModelsError, ListModelsResponse, CreateModelData, CreateModelError, CreateModelResponse, DeleteModelData, DeleteModelError, DeleteModelResponse, GetModelData, GetModelError, GetModelResponse, UpdateModelData, UpdateModelError, UpdateModelResponse, GetModelEnvironmentLogsData, GetModelEnvironmentLogsError, GetModelEnvironmentLogsResponse, GetModelMetricsData, GetModelMetricsError, GetModelMetricsResponse, ReleaseModelData, ReleaseModelError, ReleaseModelResponse, GetModelTraceIdsData, GetModelTraceIdsError, GetModelTraceIdsResponse, ListPoliciesError, ListPoliciesResponse, CreatePolicyData, CreatePolicyError, CreatePolicyResponse, DeletePolicyData, DeletePolicyError, DeletePolicyResponse, GetPolicyData, GetPolicyError, GetPolicyResponse, UpdatePolicyData, UpdatePolicyError, UpdatePolicyResponse, ListPrivateClustersError, ListPrivateClustersResponse, CreatePrivateClusterError, CreatePrivateClusterResponse, DeletePrivateClusterData, DeletePrivateClusterError, DeletePrivateClusterResponse, GetPrivateClusterData, GetPrivateClusterError, GetPrivateClusterResponse, UpdatePrivateClusterData, UpdatePrivateClusterError, UpdatePrivateClusterResponse, GetPrivateClusterHealthData, GetPrivateClusterHealthError, GetPrivateClusterHealthResponse, UpdatePrivateClusterHealthData, UpdatePrivateClusterHealthError, UpdatePrivateClusterHealthResponse, ListAllPendingInvitationsError, ListAllPendingInvitationsResponse, GetWorkspaceServiceAccountsError, GetWorkspaceServiceAccountsResponse, CreateWorkspaceServiceAccountData, CreateWorkspaceServiceAccountError, CreateWorkspaceServiceAccountResponse, DeleteWorkspaceServiceAccountData, DeleteWorkspaceServiceAccountError, DeleteWorkspaceServiceAccountResponse, UpdateWorkspaceServiceAccountData, UpdateWorkspaceServiceAccountError, UpdateWorkspaceServiceAccountResponse, ListApiKeysForServiceAccountData, ListApiKeysForServiceAccountError, ListApiKeysForServiceAccountResponse, CreateApiKeyForServiceAccountData, CreateApiKeyForServiceAccountError, CreateApiKeyForServiceAccountResponse, DeleteApiKeyForServiceAccountData, DeleteApiKeyForServiceAccountError, DeleteApiKeyForServiceAccountResponse, ListStoreAgentsError, ListStoreAgentsResponse, GetStoreAgentData, GetStoreAgentError, GetStoreAgentResponse, ListStoreFunctionsError, ListStoreFunctionsResponse, GetStoreFunctionData, GetStoreFunctionError, GetStoreFunctionResponse, GetTraceIdsData, GetTraceIdsError, GetTraceIdsResponse, GetTraceData, GetTraceError, GetTraceResponse, GetTraceLogsData, GetTraceLogsError, GetTraceLogsResponse, ListWorkspaceUsersError, ListWorkspaceUsersResponse, InviteWorkspaceUserData, InviteWorkspaceUserError, InviteWorkspaceUserResponse, RemoveWorkspaceUserData, RemoveWorkspaceUserError, RemoveWorkspaceUserResponse, UpdateWorkspaceUserRoleData, UpdateWorkspaceUserRoleError, UpdateWorkspaceUserRoleResponse, ListWorkspacesError, ListWorkspacesResponse, CreateWorspaceData, CreateWorspaceError, CreateWorspaceResponse, DeleteWorkspaceData, DeleteWorkspaceError, DeleteWorkspaceResponse, GetWorkspaceData, GetWorkspaceError, GetWorkspaceResponse, UpdateWorkspaceData, UpdateWorkspaceError, UpdateWorkspaceResponse, DeclineWorkspaceInvitationData, DeclineWorkspaceInvitationError, DeclineWorkspaceInvitationResponse, AcceptWorkspaceInvitationData, AcceptWorkspaceInvitationError, AcceptWorkspaceInvitationResponse, LeaveWorkspaceData, LeaveWorkspaceError, LeaveWorkspaceResponse } from './types.gen.js';

export const client = createClient(createConfig());

/**
 * List all agents
 */
export const listAgents = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListAgentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAgentsResponse, ListAgentsError, ThrowOnError>({
        ...options,
        url: '/agents'
    });
};

/**
 * Create agent by name
 */
export const createAgent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateAgentData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAgentResponse, CreateAgentError, ThrowOnError>({
        ...options,
        url: '/agents'
    });
};

/**
 * Delete agent by name
 */
export const deleteAgent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAgentData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAgentResponse, DeleteAgentError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}'
    });
};

/**
 * Get agent by name
 */
export const getAgent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAgentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAgentResponse, GetAgentError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}'
    });
};

/**
 * Update agent by name
 */
export const updateAgent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateAgentData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateAgentResponse, UpdateAgentError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}'
    });
};

export const listAgentHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListAgentHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAgentHistoryResponse, ListAgentHistoryError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/history'
    });
};

export const deleteAgentHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAgentHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAgentHistoryResponse, DeleteAgentHistoryError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/history/{requestId}'
    });
};

export const getAgentHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAgentHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAgentHistoryResponse, GetAgentHistoryError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/history/{requestId}'
    });
};

/**
 * Update agent's history by request ID
 */
export const putAgentHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutAgentHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutAgentHistoryResponse, PutAgentHistoryError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/history/{requestId}'
    });
};

export const getAgentEnvironmentLogs = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAgentEnvironmentLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAgentEnvironmentLogsResponse, GetAgentEnvironmentLogsError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/logs'
    });
};

/**
 * Get agent metrics
 */
export const getAgentMetrics = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAgentMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAgentMetricsResponse, GetAgentMetricsError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/metrics'
    });
};

/**
 * Create release for a agent from an environment
 */
export const createAgentRelease = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateAgentReleaseData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAgentReleaseResponse, CreateAgentReleaseError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/release'
    });
};

/**
 * Get agent trace IDs
 */
export const getAgentTraceIds = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAgentTraceIdsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAgentTraceIdsResponse, GetAgentTraceIdsError, ThrowOnError>({
        ...options,
        url: '/agents/{agentName}/traces'
    });
};

/**
 * List all configurations
 */
export const getConfiguration = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetConfigurationResponse, GetConfigurationError, ThrowOnError>({
        ...options,
        url: '/configuration'
    });
};

/**
 * List environments
 * Returns a list of all environments in the workspace.
 */
export const listEnvironments = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListEnvironmentsResponse, ListEnvironmentsError, ThrowOnError>({
        ...options,
        url: '/environments'
    });
};

/**
 * Create environment
 * Creates an environment.
 */
export const createEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateEnvironmentResponse, CreateEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments'
    });
};

/**
 * Delete environment
 * Deletes an environment by name.
 */
export const deleteEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteEnvironmentResponse, DeleteEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments/{environmentName}'
    });
};

/**
 * Get environment
 * Returns an environment by name.
 */
export const getEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEnvironmentResponse, GetEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments/{environmentName}'
    });
};

/**
 * Update environment
 * Updates an environment.
 */
export const updateEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateEnvironmentResponse, UpdateEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments/{environmentName}'
    });
};

/**
 * Get environment metrics
 * Returns metrics for an environment by name.
 */
export const getEnvironmentMetrics = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEnvironmentMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEnvironmentMetricsResponse, GetEnvironmentMetricsError, ThrowOnError>({
        ...options,
        url: '/environments/{environmentName}/metrics'
    });
};

/**
 * List all functions
 */
export const listFunctions = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListFunctionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListFunctionsResponse, ListFunctionsError, ThrowOnError>({
        ...options,
        url: '/functions'
    });
};

/**
 * Create function
 */
export const createFunction = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateFunctionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateFunctionResponse, CreateFunctionError, ThrowOnError>({
        ...options,
        url: '/functions'
    });
};

/**
 * Delete function by name
 */
export const deleteFunction = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteFunctionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteFunctionResponse, DeleteFunctionError, ThrowOnError>({
        ...options,
        url: '/functions/{functionName}'
    });
};

/**
 * Get function by name
 */
export const getFunction = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetFunctionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFunctionResponse, GetFunctionError, ThrowOnError>({
        ...options,
        url: '/functions/{functionName}'
    });
};

/**
 * Update function by name
 */
export const updateFunction = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateFunctionData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateFunctionResponse, UpdateFunctionError, ThrowOnError>({
        ...options,
        url: '/functions/{functionName}'
    });
};

export const getFunctionEnvironmentLogs = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetFunctionEnvironmentLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFunctionEnvironmentLogsResponse, GetFunctionEnvironmentLogsError, ThrowOnError>({
        ...options,
        url: '/functions/{functionName}/logs'
    });
};

/**
 * Get function metrics
 */
export const getFunctionMetrics = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetFunctionMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFunctionMetricsResponse, GetFunctionMetricsError, ThrowOnError>({
        ...options,
        url: '/functions/{functionName}/metrics'
    });
};

/**
 * Create release for a function from an environment
 */
export const createFunctionRelease = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateFunctionReleaseData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateFunctionReleaseResponse, CreateFunctionReleaseError, ThrowOnError>({
        ...options,
        url: '/functions/{functionName}/release'
    });
};

/**
 * Get function trace IDs
 */
export const getFunctionTraceIds = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetFunctionTraceIdsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFunctionTraceIdsResponse, GetFunctionTraceIdsError, ThrowOnError>({
        ...options,
        url: '/functions/{functionName}/traces'
    });
};

/**
 * Get all history for all agents
 */
export const listAgentsHistory = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAgentsHistoryResponse, ListAgentsHistoryError, ThrowOnError>({
        ...options,
        url: '/history/agents'
    });
};

/**
 * Get all history for a specific request ID from all agents
 */
export const getAgentsHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAgentsHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAgentsHistoryResponse, GetAgentsHistoryError, ThrowOnError>({
        ...options,
        url: '/history/agents/{requestId}'
    });
};

/**
 * List integrations connections
 * Returns integration information by name.
 */
export const getIntegration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIntegrationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIntegrationResponse, GetIntegrationError, ThrowOnError>({
        ...options,
        url: '/integrations/{integrationName}'
    });
};

/**
 * List integrations connections
 * Returns a list of all connections integrations in the workspace.
 */
export const listIntegrationConnections = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIntegrationConnectionsResponse, ListIntegrationConnectionsError, ThrowOnError>({
        ...options,
        url: '/integrations/connections'
    });
};

/**
 * Create integration
 * Create a connection for an integration.
 */
export const createIntegrationConnection = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIntegrationConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIntegrationConnectionResponse, CreateIntegrationConnectionError, ThrowOnError>({
        ...options,
        url: '/integrations/connections'
    });
};

/**
 * Delete integration
 * Deletes an integration connection by integration name and connection name.
 */
export const deleteIntegrationConnection = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteIntegrationConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteIntegrationConnectionResponse, DeleteIntegrationConnectionError, ThrowOnError>({
        ...options,
        url: '/integrations/connections/{connectionName}'
    });
};

/**
 * Get integration
 * Returns an integration connection by integration name and connection name.
 */
export const getIntegrationConnection = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIntegrationConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIntegrationConnectionResponse, GetIntegrationConnectionError, ThrowOnError>({
        ...options,
        url: '/integrations/connections/{connectionName}'
    });
};

/**
 * Update integration connection
 * Update an integration connection by integration name and connection name.
 */
export const updateIntegrationConnection = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIntegrationConnectionData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateIntegrationConnectionResponse, UpdateIntegrationConnectionError, ThrowOnError>({
        ...options,
        url: '/integrations/connections/{connectionName}'
    });
};

/**
 * Get integration connection model endpoint configurations
 * Returns a list of all endpoint configurations for a model.
 */
export const getIntegrationConnectionModelEndpointConfigurations = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIntegrationConnectionModelEndpointConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIntegrationConnectionModelEndpointConfigurationsResponse, GetIntegrationConnectionModelEndpointConfigurationsError, ThrowOnError>({
        ...options,
        url: '/integrations/connections/{connectionName}/endpointConfigurations'
    });
};

/**
 * List integration connection models
 * Returns a list of all models for an integration connection.
 */
export const listIntegrationConnectionModels = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListIntegrationConnectionModelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIntegrationConnectionModelsResponse, ListIntegrationConnectionModelsError, ThrowOnError>({
        ...options,
        url: '/integrations/connections/{connectionName}/models'
    });
};

/**
 * Get integration model endpoint configurations
 * Returns a model for an integration connection by ID.
 */
export const getIntegrationConnectionModel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIntegrationConnectionModelData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIntegrationConnectionModelResponse, GetIntegrationConnectionModelError, ThrowOnError>({
        ...options,
        url: '/integrations/connections/{connectionName}/models/{modelId}'
    });
};

/**
 * List knowledgebases
 * Returns a list of all knowledgebases in the workspace.
 */
export const listKnowledgebases = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListKnowledgebasesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListKnowledgebasesResponse, ListKnowledgebasesError, ThrowOnError>({
        ...options,
        url: '/knowledgebases'
    });
};

/**
 * Create environment
 * Creates an knowledgebase.
 */
export const createKnowledgebase = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateKnowledgebaseData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateKnowledgebaseResponse, CreateKnowledgebaseError, ThrowOnError>({
        ...options,
        url: '/knowledgebases'
    });
};

/**
 * Delete environment
 * Deletes an knowledgebase by Name.
 */
export const deleteKnowledgebase = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteKnowledgebaseData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteKnowledgebaseResponse, DeleteKnowledgebaseError, ThrowOnError>({
        ...options,
        url: '/knowledgebases/{knowledgebaseName}'
    });
};

/**
 * Get knowledgebase
 * Returns an knowledgebase by Name.
 */
export const getKnowledgebase = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetKnowledgebaseData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKnowledgebaseResponse, GetKnowledgebaseError, ThrowOnError>({
        ...options,
        url: '/knowledgebases/{knowledgebaseName}'
    });
};

/**
 * Update knowledgebase
 * Updates an knowledgebase.
 */
export const updateKnowledgebase = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateKnowledgebaseData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateKnowledgebaseResponse, UpdateKnowledgebaseError, ThrowOnError>({
        ...options,
        url: '/knowledgebases/{knowledgebaseName}'
    });
};

/**
 * List locations
 * Returns a list of all locations available with status.
 */
export const listLocations = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListLocationsResponse, ListLocationsError, ThrowOnError>({
        ...options,
        url: '/locations'
    });
};

/**
 * Get metrics for a workspace
 * Returns metrics for the workspace's deployments.
 */
export const getMetrics = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMetricsResponse, GetMetricsError, ThrowOnError>({
        ...options,
        url: '/metrics'
    });
};

/**
 * List models
 * Returns a list of all models in the workspace.
 */
export const listModels = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListModelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListModelsResponse, ListModelsError, ThrowOnError>({
        ...options,
        url: '/models'
    });
};

/**
 * Create model
 * Creates a model.
 */
export const createModel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateModelData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateModelResponse, CreateModelError, ThrowOnError>({
        ...options,
        url: '/models'
    });
};

/**
 * Delete model
 * Deletes a model by name.
 */
export const deleteModel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteModelData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteModelResponse, DeleteModelError, ThrowOnError>({
        ...options,
        url: '/models/{modelName}'
    });
};

/**
 * Get model
 * Returns a model by name.
 */
export const getModel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetModelData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetModelResponse, GetModelError, ThrowOnError>({
        ...options,
        url: '/models/{modelName}'
    });
};

/**
 * Create or update model
 * Update a model by name.
 */
export const updateModel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateModelData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateModelResponse, UpdateModelError, ThrowOnError>({
        ...options,
        url: '/models/{modelName}'
    });
};

/**
 * Returns logs for a model deployment by name.
 */
export const getModelEnvironmentLogs = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetModelEnvironmentLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetModelEnvironmentLogsResponse, GetModelEnvironmentLogsError, ThrowOnError>({
        ...options,
        url: '/models/{modelName}/logs'
    });
};

/**
 * Get model metrics
 * Returns metrics for a model by name.
 */
export const getModelMetrics = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetModelMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetModelMetricsResponse, GetModelMetricsError, ThrowOnError>({
        ...options,
        url: '/models/{modelName}/metrics'
    });
};

/**
 * Release model from an environment
 * Make a release for a model from an environment to another.
 */
export const releaseModel = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ReleaseModelData, ThrowOnError>) => {
    return (options?.client ?? client).post<ReleaseModelResponse, ReleaseModelError, ThrowOnError>({
        ...options,
        url: '/models/{modelName}/release'
    });
};

/**
 * Get model trace IDs
 */
export const getModelTraceIds = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetModelTraceIdsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetModelTraceIdsResponse, GetModelTraceIdsError, ThrowOnError>({
        ...options,
        url: '/models/{modelName}/traces'
    });
};

/**
 * List policies
 * Returns a list of all policies in the workspace.
 */
export const listPolicies = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListPoliciesResponse, ListPoliciesError, ThrowOnError>({
        ...options,
        url: '/policies'
    });
};

/**
 * Create policy
 * Creates a policy.
 */
export const createPolicy = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreatePolicyData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePolicyResponse, CreatePolicyError, ThrowOnError>({
        ...options,
        url: '/policies'
    });
};

/**
 * Delete policy
 * Deletes a policy by name.
 */
export const deletePolicy = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeletePolicyData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePolicyResponse, DeletePolicyError, ThrowOnError>({
        ...options,
        url: '/policies/{policyName}'
    });
};

/**
 * Get policy
 * Returns a policy by name.
 */
export const getPolicy = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPolicyData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPolicyResponse, GetPolicyError, ThrowOnError>({
        ...options,
        url: '/policies/{policyName}'
    });
};

/**
 * Update policy
 * Updates a policy.
 */
export const updatePolicy = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePolicyData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdatePolicyResponse, UpdatePolicyError, ThrowOnError>({
        ...options,
        url: '/policies/{policyName}'
    });
};

/**
 * List all private clusters
 */
export const listPrivateClusters = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListPrivateClustersResponse, ListPrivateClustersError, ThrowOnError>({
        ...options,
        url: '/privateclusters'
    });
};

/**
 * Create private cluster
 */
export const createPrivateCluster = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePrivateClusterResponse, CreatePrivateClusterError, ThrowOnError>({
        ...options,
        url: '/privateclusters'
    });
};

/**
 * Delete private cluster
 */
export const deletePrivateCluster = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeletePrivateClusterData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePrivateClusterResponse, DeletePrivateClusterError, ThrowOnError>({
        ...options,
        url: '/privateclusters/{privateClusterName}'
    });
};

/**
 * Get private cluster by name
 */
export const getPrivateCluster = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPrivateClusterData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPrivateClusterResponse, GetPrivateClusterError, ThrowOnError>({
        ...options,
        url: '/privateclusters/{privateClusterName}'
    });
};

/**
 * Update private cluster
 */
export const updatePrivateCluster = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePrivateClusterData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdatePrivateClusterResponse, UpdatePrivateClusterError, ThrowOnError>({
        ...options,
        url: '/privateclusters/{privateClusterName}'
    });
};

/**
 * Get private cluster health
 */
export const getPrivateClusterHealth = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPrivateClusterHealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPrivateClusterHealthResponse, GetPrivateClusterHealthError, ThrowOnError>({
        ...options,
        url: '/privateclusters/{privateClusterName}/health'
    });
};

/**
 * Update private cluster health
 */
export const updatePrivateClusterHealth = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePrivateClusterHealthData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdatePrivateClusterHealthResponse, UpdatePrivateClusterHealthError, ThrowOnError>({
        ...options,
        url: '/privateclusters/{privateClusterName}/health'
    });
};

/**
 * List pending invitations
 * Returns a list of all pending invitations in the workspace.
 */
export const listAllPendingInvitations = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAllPendingInvitationsResponse, ListAllPendingInvitationsError, ThrowOnError>({
        ...options,
        url: '/profile/invitations'
    });
};

/**
 * Get workspace service accounts
 * Returns a list of all service accounts in the workspace.
 */
export const getWorkspaceServiceAccounts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWorkspaceServiceAccountsResponse, GetWorkspaceServiceAccountsError, ThrowOnError>({
        ...options,
        url: '/service_accounts'
    });
};

/**
 * Create workspace service account
 * Creates a service account in the workspace.
 */
export const createWorkspaceServiceAccount = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateWorkspaceServiceAccountData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateWorkspaceServiceAccountResponse, CreateWorkspaceServiceAccountError, ThrowOnError>({
        ...options,
        url: '/service_accounts'
    });
};

/**
 * Delete workspace service account
 * Deletes a service account.
 */
export const deleteWorkspaceServiceAccount = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteWorkspaceServiceAccountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteWorkspaceServiceAccountResponse, DeleteWorkspaceServiceAccountError, ThrowOnError>({
        ...options,
        url: '/service_accounts/{clientId}'
    });
};

/**
 * Update workspace service account
 * Updates a service account.
 */
export const updateWorkspaceServiceAccount = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateWorkspaceServiceAccountData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateWorkspaceServiceAccountResponse, UpdateWorkspaceServiceAccountError, ThrowOnError>({
        ...options,
        url: '/service_accounts/{clientId}'
    });
};

/**
 * List API keys for service account
 * Returns a list of all API keys for a service account.
 */
export const listApiKeysForServiceAccount = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListApiKeysForServiceAccountData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListApiKeysForServiceAccountResponse, ListApiKeysForServiceAccountError, ThrowOnError>({
        ...options,
        url: '/service_accounts/{clientId}/api_keys'
    });
};

/**
 * Create API key for service account
 * Creates an API key for a service account.
 */
export const createApiKeyForServiceAccount = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateApiKeyForServiceAccountData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateApiKeyForServiceAccountResponse, CreateApiKeyForServiceAccountError, ThrowOnError>({
        ...options,
        url: '/service_accounts/{clientId}/api_keys'
    });
};

/**
 * Delete API key for service account
 * Deletes an API key for a service account.
 */
export const deleteApiKeyForServiceAccount = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiKeyForServiceAccountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiKeyForServiceAccountResponse, DeleteApiKeyForServiceAccountError, ThrowOnError>({
        ...options,
        url: '/service_accounts/{clientId}/api_keys/{apiKeyId}'
    });
};

/**
 * List all store agent
 */
export const listStoreAgents = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListStoreAgentsResponse, ListStoreAgentsError, ThrowOnError>({
        ...options,
        url: '/store/agents'
    });
};

/**
 * Get store agent by name
 */
export const getStoreAgent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetStoreAgentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStoreAgentResponse, GetStoreAgentError, ThrowOnError>({
        ...options,
        url: '/store/agents/{agentName}'
    });
};

/**
 * List all store agent functions
 */
export const listStoreFunctions = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListStoreFunctionsResponse, ListStoreFunctionsError, ThrowOnError>({
        ...options,
        url: '/store/functions'
    });
};

/**
 * Get store agent function by name
 */
export const getStoreFunction = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetStoreFunctionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStoreFunctionResponse, GetStoreFunctionError, ThrowOnError>({
        ...options,
        url: '/store/functions/{functionName}'
    });
};

/**
 * Get trace IDs
 */
export const getTraceIds = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetTraceIdsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTraceIdsResponse, GetTraceIdsError, ThrowOnError>({
        ...options,
        url: '/traces'
    });
};

/**
 * Get trace by ID
 */
export const getTrace = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTraceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTraceResponse, GetTraceError, ThrowOnError>({
        ...options,
        url: '/traces/{traceId}'
    });
};

/**
 * Get trace logs
 */
export const getTraceLogs = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTraceLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTraceLogsResponse, GetTraceLogsError, ThrowOnError>({
        ...options,
        url: '/traces/{traceId}/logs'
    });
};

/**
 * List users in workspace
 * Returns a list of all users in the workspace.
 */
export const listWorkspaceUsers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListWorkspaceUsersResponse, ListWorkspaceUsersError, ThrowOnError>({
        ...options,
        url: '/users'
    });
};

/**
 * Invite user to workspace
 * Invites a user to the workspace by email.
 */
export const inviteWorkspaceUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<InviteWorkspaceUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<InviteWorkspaceUserResponse, InviteWorkspaceUserError, ThrowOnError>({
        ...options,
        url: '/users'
    });
};

/**
 * Remove user from workspace or revoke invitation
 * Removes a user from the workspace (or revokes an invitation if the user has not accepted the invitation yet).
 */
export const removeWorkspaceUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RemoveWorkspaceUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<RemoveWorkspaceUserResponse, RemoveWorkspaceUserError, ThrowOnError>({
        ...options,
        url: '/users/{subOrEmail}'
    });
};

/**
 * Update user role in workspace
 * Updates the role of a user in the workspace.
 */
export const updateWorkspaceUserRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateWorkspaceUserRoleData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateWorkspaceUserRoleResponse, UpdateWorkspaceUserRoleError, ThrowOnError>({
        ...options,
        url: '/users/{subOrEmail}'
    });
};

/**
 * List workspaces
 * Returns a list of all workspaces.
 */
export const listWorkspaces = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListWorkspacesResponse, ListWorkspacesError, ThrowOnError>({
        ...options,
        url: '/workspaces'
    });
};

/**
 * Create worspace
 * Creates a workspace.
 */
export const createWorspace = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateWorspaceData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateWorspaceResponse, CreateWorspaceError, ThrowOnError>({
        ...options,
        url: '/workspaces'
    });
};

/**
 * Delete workspace
 * Deletes a workspace by name.
 */
export const deleteWorkspace = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteWorkspaceData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteWorkspaceResponse, DeleteWorkspaceError, ThrowOnError>({
        ...options,
        url: '/workspaces/{workspaceName}'
    });
};

/**
 * Get workspace
 * Returns a workspace by name.
 */
export const getWorkspace = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetWorkspaceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWorkspaceResponse, GetWorkspaceError, ThrowOnError>({
        ...options,
        url: '/workspaces/{workspaceName}'
    });
};

/**
 * Update workspace
 * Updates a workspace by name.
 */
export const updateWorkspace = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateWorkspaceData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateWorkspaceResponse, UpdateWorkspaceError, ThrowOnError>({
        ...options,
        url: '/workspaces/{workspaceName}'
    });
};

/**
 * Decline invitation to workspace
 * Declines an invitation to a workspace.
 */
export const declineWorkspaceInvitation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeclineWorkspaceInvitationData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeclineWorkspaceInvitationResponse, DeclineWorkspaceInvitationError, ThrowOnError>({
        ...options,
        url: '/workspaces/{workspaceName}/decline'
    });
};

/**
 * Accept invitation to workspace
 * Accepts an invitation to a workspace.
 */
export const acceptWorkspaceInvitation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AcceptWorkspaceInvitationData, ThrowOnError>) => {
    return (options?.client ?? client).post<AcceptWorkspaceInvitationResponse, AcceptWorkspaceInvitationError, ThrowOnError>({
        ...options,
        url: '/workspaces/{workspaceName}/join'
    });
};

/**
 * Leave workspace
 * Leaves a workspace.
 */
export const leaveWorkspace = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LeaveWorkspaceData, ThrowOnError>) => {
    return (options?.client ?? client).delete<LeaveWorkspaceResponse, LeaveWorkspaceError, ThrowOnError>({
        ...options,
        url: '/workspaces/{workspaceName}/leave'
    });
};